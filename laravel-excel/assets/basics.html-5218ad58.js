import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,b as s,d as e,w as t,e as n,a as i}from"./app-edc8bdf9.js";const r={},u=s("h1",{id:"importing-basics",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#importing-basics","aria-hidden":"true"},"#"),n(" Importing basics")],-1),d={class:"table-of-contents"},k=i(`<p>If you have followed the 5 minute quick start, you&#39;ll already have a <code>UsersImport</code> class.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Imports</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>User</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Hash</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>ToModel</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">UsersImport</span> <span class="token keyword">implements</span> <span class="token class-name">ToModel</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token keyword">array</span></span> <span class="token parameter">$row</span>
     *
     * <span class="token keyword">@return</span> <span class="token class-name">User<span class="token punctuation">|</span><span class="token keyword">null</span></span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">model</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$row</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
           <span class="token string single-quoted-string">&#39;name&#39;</span>     <span class="token operator">=&gt;</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
           <span class="token string single-quoted-string">&#39;email&#39;</span>    <span class="token operator">=&gt;</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
           <span class="token string single-quoted-string">&#39;password&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">Hash</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="importing-from-default-disk" tabindex="-1"><a class="header-anchor" href="#importing-from-default-disk" aria-hidden="true">#</a> Importing from default disk</h2><p>Passing the UsersImport object to the <code>Excel::import()</code> method will tell the package how to import the file that is passed as second parameter. The file is expected to be located in your default filesystem disk (see <code>config/filesystems.php</code>).</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Excel</span><span class="token operator">::</span><span class="token function">import</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UsersImport</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;users.xlsx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="importing-from-another-disk" tabindex="-1"><a class="header-anchor" href="#importing-from-another-disk" aria-hidden="true">#</a> Importing from another disk</h3><p>You can specify another disk with the third parameter like your Amazon s3 disk. (see <code>config/filesystems.php</code>)</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Excel</span><span class="token operator">::</span><span class="token function">import</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UsersImport</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;users.xlsx&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;s3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="importing-uploaded-files" tabindex="-1"><a class="header-anchor" href="#importing-uploaded-files" aria-hidden="true">#</a> Importing uploaded files</h2><p>If you let your user upload the document, you can also just pass the uploaded file directly.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Excel</span><span class="token operator">::</span><span class="token function">import</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UsersImport</span><span class="token punctuation">,</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;your_file&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="importing-full-path" tabindex="-1"><a class="header-anchor" href="#importing-full-path" aria-hidden="true">#</a> Importing full path</h3><p>If you want to specifiy the path where your file is, without having to move it to a disk, you can directly pass that file path to the import method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Excel</span><span class="token operator">::</span><span class="token function">import</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UsersImport</span><span class="token punctuation">,</span> <span class="token function">storage_path</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;users.xlsx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="importing-to-array-or-collection" tabindex="-1"><a class="header-anchor" href="#importing-to-array-or-collection" aria-hidden="true">#</a> Importing to array or collection</h2><p>If you want to bypass the <code>ToArray</code> or <code>ToCollection</code> concerns and want to have an array of imported data in your controller (beware of performance!), you can use the <code>::toArray()</code> or <code>::toCollection()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token class-name static-context">Excel</span><span class="token operator">::</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UsersImport</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;users.xlsx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$collection</span> <span class="token operator">=</span> <span class="token class-name static-context">Excel</span><span class="token operator">::</span><span class="token function">toCollection</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UsersImport</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;users.xlsx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="specifying-a-reader-type" tabindex="-1"><a class="header-anchor" href="#specifying-a-reader-type" aria-hidden="true">#</a> Specifying a reader type</h2><p>If the reader type is not detectable by the file extension, you can specify a reader type by passing it as fourth parameter.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Excel</span><span class="token operator">::</span><span class="token function">import</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UsersImport</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;users.xlsx&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;s3&#39;</span><span class="token punctuation">,</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Excel</span><span class="token operator">::</span><span class="token constant">XLSX</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,20);function m(h,g){const a=o("router-link");return c(),l("div",null,[u,s("nav",d,[s("ul",null,[s("li",null,[e(a,{to:"#importing-from-default-disk"},{default:t(()=>[n("Importing from default disk")]),_:1}),s("ul",null,[s("li",null,[e(a,{to:"#importing-from-another-disk"},{default:t(()=>[n("Importing from another disk")]),_:1})])])]),s("li",null,[e(a,{to:"#importing-uploaded-files"},{default:t(()=>[n("Importing uploaded files")]),_:1}),s("ul",null,[s("li",null,[e(a,{to:"#importing-full-path"},{default:t(()=>[n("Importing full path")]),_:1})])])]),s("li",null,[e(a,{to:"#importing-to-array-or-collection"},{default:t(()=>[n("Importing to array or collection")]),_:1})]),s("li",null,[e(a,{to:"#specifying-a-reader-type"},{default:t(()=>[n("Specifying a reader type")]),_:1})])])]),k])}const b=p(r,[["render",m],["__file","basics.html.vue"]]);export{b as default};
