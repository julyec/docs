import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c as u,b as n,d as a,w as t,e as s,a as o}from"./app-5f6cf456.js";const r={},d=n("h1",{id:"customizing-columns",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#customizing-columns","aria-hidden":"true"},"#"),s(" Customizing columns")],-1),k={class:"table-of-contents"},v=o(`<h2 id="formatting-columns" tabindex="-1"><a class="header-anchor" href="#formatting-columns" aria-hidden="true">#</a> Formatting columns</h2><p>You can easily format an entire column, by using <code>WithColumnFormatting</code>. In case you want something more custom, it&#39;s suggested to use the <code>AfterSheet</code> event to directly interact with the underlying <code>Worksheet</code> class.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Exports</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\\</span>PhpSpreadsheet<span class="token punctuation">\\</span>Shared<span class="token punctuation">\\</span>Date</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\\</span>PhpSpreadsheet<span class="token punctuation">\\</span>Style<span class="token punctuation">\\</span>NumberFormat</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>WithColumnFormatting</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>WithMapping</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">InvoicesExport</span> <span class="token keyword">implements</span> <span class="token class-name">WithColumnFormatting</span><span class="token punctuation">,</span> WithMapping
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">map</span><span class="token punctuation">(</span><span class="token variable">$invoice</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token variable">$invoice</span><span class="token operator">-&gt;</span><span class="token property">invoice_number</span><span class="token punctuation">,</span>
            <span class="token class-name static-context">Date</span><span class="token operator">::</span><span class="token function">dateTimeToExcel</span><span class="token punctuation">(</span><span class="token variable">$invoice</span><span class="token operator">-&gt;</span><span class="token property">created_at</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token variable">$invoice</span><span class="token operator">-&gt;</span><span class="token property">total</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">columnFormats</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;B&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">NumberFormat</span><span class="token operator">::</span><span class="token constant">FORMAT_DATE_DDMMYYYY</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;C&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">NumberFormat</span><span class="token operator">::</span><span class="token constant">FORMAT_CURRENCY_EUR_INTEGER</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dates" tabindex="-1"><a class="header-anchor" href="#dates" aria-hidden="true">#</a> Dates</h3><p>When working with dates, it&#39;s recommended to use <code>\\PhpOffice\\PhpSpreadsheet\\Shared\\Date::dateTimeToExcel()</code> in your mapping to ensure correct parsing of dates.</p><h3 id="value-binders" tabindex="-1"><a class="header-anchor" href="#value-binders" aria-hidden="true">#</a> Value binders</h3><p>By default Laravel Excel uses PhpSpreadsheet&#39;s default value binder to intelligently format a cell&#39;s value when reading it. You may override this behavior by implementing the <code>WithCustomValueBinder</code> concern and the <code>bindValue</code> method. Your export class may also extend <code>DefaultValueBinder</code> to return the default behavior.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Exports</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\\</span>PhpSpreadsheet<span class="token punctuation">\\</span>Cell<span class="token punctuation">\\</span>Cell</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>ToModel</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\\</span>PhpSpreadsheet<span class="token punctuation">\\</span>Cell<span class="token punctuation">\\</span>DataType</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>WithCustomValueBinder</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\\</span>PhpSpreadsheet<span class="token punctuation">\\</span>Cell<span class="token punctuation">\\</span>DefaultValueBinder</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">UsersExport</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultValueBinder</span> <span class="token keyword">implements</span> <span class="token class-name">WithCustomValueBinder</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">bindValue</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Cell</span> <span class="token variable">$cell</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$cell</span><span class="token operator">-&gt;</span><span class="token function">setValueExplicit</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token class-name static-context">DataType</span><span class="token operator">::</span><span class="token constant">TYPE_NUMERIC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// else return default behavior</span>
        <span class="token keyword">return</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token variable">$cell</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="available-datatypes" tabindex="-1"><a class="header-anchor" href="#available-datatypes" aria-hidden="true">#</a> Available DataTypes</h4><ul><li><code>PhpOffice\\PhpSpreadsheet\\Cell\\DataType::TYPE_STRING</code></li><li><code>PhpOffice\\PhpSpreadsheet\\Cell\\DataType::TYPE_FORMULA</code></li><li><code>PhpOffice\\PhpSpreadsheet\\Cell\\DataType::TYPE_NUMERIC</code></li><li><code>PhpOffice\\PhpSpreadsheet\\Cell\\DataType::TYPE_BOOL</code></li><li><code>PhpOffice\\PhpSpreadsheet\\Cell\\DataType::TYPE_NULL</code></li><li><code>PhpOffice\\PhpSpreadsheet\\Cell\\DataType::TYPE_INLINE</code></li><li><code>PhpOffice\\PhpSpreadsheet\\Cell\\DataType::TYPE_ERROR</code></li></ul><h3 id="disable-intelligent-formatting" tabindex="-1"><a class="header-anchor" href="#disable-intelligent-formatting" aria-hidden="true">#</a> Disable intelligent formatting</h3><p>If you want to disable the intelligent formatting of values, you can extend your export class with <code>\\PhpOffice\\PhpSpreadsheet\\Cell\\StringValueBinder</code>. In this case all values are passed on as strings.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Exports</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>WithCustomValueBinder</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">UsersExport</span> <span class="token keyword">extends</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>PhpOffice<span class="token punctuation">\\</span>PhpSpreadsheet<span class="token punctuation">\\</span>Cell<span class="token punctuation">\\</span>StringValueBinder</span> <span class="token keyword">implements</span> <span class="token class-name">WithCustomValueBinder</span>
<span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="default-value-binder" tabindex="-1"><a class="header-anchor" href="#default-value-binder" aria-hidden="true">#</a> Default Value Binder</h3><p>If you want to use one value binder for all your exports, you can configure the default value binder in the config.</p><p>In <code>config/excel.php</code>:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token string single-quoted-string">&#39;value_binder&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;default&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name class-name-fully-qualified static-context">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>DefaultValueBinder</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="auto-size" tabindex="-1"><a class="header-anchor" href="#auto-size" aria-hidden="true">#</a> Auto size</h2><p>If you want Laravel Excel to perform an automatic width calculation, you need to implement the <code>ShouldAutoSize</code> interface, like the following code.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Exports</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>ShouldAutoSize</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">InvoicesExport</span> <span class="token keyword">implements</span> <span class="token class-name">ShouldAutoSize</span>
<span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="column-widths" tabindex="-1"><a class="header-anchor" href="#column-widths" aria-hidden="true">#</a> Column widths</h2><p>In some cases you might want more control over the actual column width instead of relying on autosizing. You can do so with the <code>WithColumnWidths</code> concerns. It accepts an array of columns (alphabetic representation: A, B, C) and a numeric width.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Exports</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>WithColumnWidths</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">InvoicesExport</span> <span class="token keyword">implements</span> <span class="token class-name">WithColumnWidths</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">columnWidths</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;A&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">55</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;B&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">45</span><span class="token punctuation">,</span>            
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Can be used together with <code>ShouldAutoSize</code>. Only the columns with explicit widths won&#39;t be autosized.</p><h2 id="styling" tabindex="-1"><a class="header-anchor" href="#styling" aria-hidden="true">#</a> Styling</h2><p>The <code>WithStyles</code> (available after <code>v3.1.21</code>) concerns allows styling columns, cells and rows. This might be useful when you want to make the heading row bold.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Exports</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>WithStyles</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\\</span>PhpSpreadsheet<span class="token punctuation">\\</span>Worksheet<span class="token punctuation">\\</span>Worksheet</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">InvoicesExport</span> <span class="token keyword">implements</span> <span class="token class-name">WithStyles</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">styles</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Worksheet</span> <span class="token variable">$sheet</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token comment">// Style the first row as bold text.</span>
            <span class="token number">1</span>    <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;font&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;bold&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

            <span class="token comment">// Styling a specific cell by coordinate.</span>
            <span class="token string single-quoted-string">&#39;B2&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;font&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;italic&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

            <span class="token comment">// Styling an entire column.</span>
            <span class="token string single-quoted-string">&#39;C&#39;</span>  <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;font&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;size&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27),m={href:"https://phpspreadsheet.readthedocs.io/en/latest/topics/recipes/#valid-array-keys-for-style-applyfromarray",target:"_blank",rel:"noopener noreferrer"},g=o(`<p>If you prefer the fluent syntax for styling cells, you can do it as follows:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Exports</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>WithStyles</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\\</span>PhpSpreadsheet<span class="token punctuation">\\</span>Worksheet<span class="token punctuation">\\</span>Worksheet</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">InvoicesExport</span> <span class="token keyword">implements</span> <span class="token class-name">WithStyles</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">styles</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Worksheet</span> <span class="token variable">$sheet</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$sheet</span><span class="token operator">-&gt;</span><span class="token function">getStyle</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;B2&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getFont</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">setBold</span><span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="default-styles" tabindex="-1"><a class="header-anchor" href="#default-styles" aria-hidden="true">#</a> Default styles</h2><p>The <code>WithDefaultStyles</code> (available after <code>v3.1.40</code>) concerns allows styling the entire workbook.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Exports</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\\</span>PhpSpreadsheet<span class="token punctuation">\\</span>Style<span class="token punctuation">\\</span>Fill</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\\</span>PhpSpreadsheet<span class="token punctuation">\\</span>Style<span class="token punctuation">\\</span>Style</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\\</span>PhpSpreadsheet<span class="token punctuation">\\</span>Style<span class="token punctuation">\\</span>Color</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>WithDefaultStyles</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\\</span>PhpSpreadsheet<span class="token punctuation">\\</span>Worksheet<span class="token punctuation">\\</span>Worksheet</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">InvoicesExport</span> <span class="token keyword">implements</span> <span class="token class-name">WithDefaultStyles</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">defaultStyles</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Style</span> <span class="token variable">$defaultStyle</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Configure the default styles</span>
        <span class="token keyword">return</span> <span class="token variable">$defaultStyle</span><span class="token operator">-&gt;</span><span class="token function">getFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">setFillType</span><span class="token punctuation">(</span><span class="token class-name static-context">Fill</span><span class="token operator">::</span><span class="token constant">FILL_SOLID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
        <span class="token comment">// Or return the styles array</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;fill&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
                <span class="token string single-quoted-string">&#39;fillType&#39;</span>   <span class="token operator">=&gt;</span> <span class="token class-name static-context">Fill</span><span class="token operator">::</span><span class="token constant">FILL_SOLID</span><span class="token punctuation">,</span>
                <span class="token string single-quoted-string">&#39;startColor&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;argb&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">Color</span><span class="token operator">::</span><span class="token constant">RED</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="workbook-background-color" tabindex="-1"><a class="header-anchor" href="#workbook-background-color" aria-hidden="true">#</a> Workbook background color</h2><p>The <code>WithBackgroundColor</code> (available after <code>v3.1.40</code>) concerns adds support to configure the background color of the entire workbook</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Exports</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\\</span>PhpSpreadsheet<span class="token punctuation">\\</span>Style<span class="token punctuation">\\</span>Fill</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\\</span>PhpSpreadsheet<span class="token punctuation">\\</span>Style<span class="token punctuation">\\</span>Style</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\\</span>PhpSpreadsheet<span class="token punctuation">\\</span>Style<span class="token punctuation">\\</span>Color</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\\</span>PhpSpreadsheet<span class="token punctuation">\\</span>Worksheet<span class="token punctuation">\\</span>Worksheet</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>WithBackgroundColor</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">InvoicesExport</span> <span class="token keyword">implements</span> <span class="token class-name">WithBackgroundColor</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">backgroundColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Return RGB color code.</span>
        <span class="token keyword">return</span> <span class="token string single-quoted-string">&#39;000000&#39;</span><span class="token punctuation">;</span>
    
        <span class="token comment">// Return a Color instance. The fill type will automatically be set to &quot;solid&quot;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token class-name static-context">Color</span><span class="token operator">::</span><span class="token constant">COLOR_BLUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
        <span class="token comment">// Or return the styles array</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
             <span class="token string single-quoted-string">&#39;fillType&#39;</span>   <span class="token operator">=&gt;</span> <span class="token class-name static-context">Fill</span><span class="token operator">::</span><span class="token constant">FILL_GRADIENT_LINEAR</span><span class="token punctuation">,</span>
             <span class="token string single-quoted-string">&#39;startColor&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;argb&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">Color</span><span class="token operator">::</span><span class="token constant">COLOR_RED</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="full-styling-map" tabindex="-1"><a class="header-anchor" href="#full-styling-map" aria-hidden="true">#</a> Full Styling Map</h2><p>The full styling map can be taken from the PhpSpreadsheet Styles class as follows:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token doc-comment comment">/**
 * Apply styles from array.
 */</span>
<span class="token variable">$spreadsheet</span><span class="token operator">-&gt;</span><span class="token function">getActiveSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getStyle</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;B2&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">applyFromArray</span><span class="token punctuation">(</span>
    <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;font&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Arial&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;bold&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;italic&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;underline&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">Font</span><span class="token operator">::</span><span class="token constant">UNDERLINE_DOUBLE</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;strikethrough&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;color&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
                <span class="token string single-quoted-string">&#39;rgb&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;808080&#39;</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;borders&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;bottom&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
                <span class="token string single-quoted-string">&#39;borderStyle&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">Border</span><span class="token operator">::</span><span class="token constant">BORDER_DASHDOT</span><span class="token punctuation">,</span>
                <span class="token string single-quoted-string">&#39;color&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
                    <span class="token string single-quoted-string">&#39;rgb&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;808080&#39;</span>
                <span class="token punctuation">]</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;top&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
                <span class="token string single-quoted-string">&#39;borderStyle&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">Border</span><span class="token operator">::</span><span class="token constant">BORDER_DASHDOT</span><span class="token punctuation">,</span>
                <span class="token string single-quoted-string">&#39;color&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
                    <span class="token string single-quoted-string">&#39;rgb&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;808080&#39;</span>
                <span class="token punctuation">]</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;alignment&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;horizontal&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">Alignment</span><span class="token operator">::</span><span class="token constant">HORIZONTAL_CENTER</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;vertical&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">Alignment</span><span class="token operator">::</span><span class="token constant">VERTICAL_CENTER</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;wrapText&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;quotePrefix&#39;</span>    <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function b(h,f){const e=p("router-link"),l=p("ExternalLinkIcon");return i(),u("div",null,[d,n("nav",k,[n("ul",null,[n("li",null,[a(e,{to:"#formatting-columns"},{default:t(()=>[s("Formatting columns")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#dates"},{default:t(()=>[s("Dates")]),_:1})]),n("li",null,[a(e,{to:"#value-binders"},{default:t(()=>[s("Value binders")]),_:1})]),n("li",null,[a(e,{to:"#disable-intelligent-formatting"},{default:t(()=>[s("Disable intelligent formatting")]),_:1})]),n("li",null,[a(e,{to:"#default-value-binder"},{default:t(()=>[s("Default Value Binder")]),_:1})])])]),n("li",null,[a(e,{to:"#auto-size"},{default:t(()=>[s("Auto size")]),_:1})]),n("li",null,[a(e,{to:"#column-widths"},{default:t(()=>[s("Column widths")]),_:1})]),n("li",null,[a(e,{to:"#styling"},{default:t(()=>[s("Styling")]),_:1})]),n("li",null,[a(e,{to:"#default-styles"},{default:t(()=>[s("Default styles")]),_:1})]),n("li",null,[a(e,{to:"#workbook-background-color"},{default:t(()=>[s("Workbook background color")]),_:1})]),n("li",null,[a(e,{to:"#full-styling-map"},{default:t(()=>[s("Full Styling Map")]),_:1})])])]),v,n("p",null,[s("For the contents of the styles array, please refer to the "),n("a",m,[s("PhpSpreadsheet docs"),a(l)])]),g])}const x=c(r,[["render",b],["__file","column-formatting.html.vue"]]);export{x as default};
