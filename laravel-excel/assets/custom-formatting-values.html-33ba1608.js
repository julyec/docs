import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as i,c as o,b as n,d as e,w as t,e as a,a as c}from"./app-5f6cf456.js";const u={},d=n("h1",{id:"custom-formatting-values",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#custom-formatting-values","aria-hidden":"true"},"#"),a(" Custom Formatting Values")],-1),r={class:"table-of-contents"},k=c(`<h2 id="value-binder" tabindex="-1"><a class="header-anchor" href="#value-binder" aria-hidden="true">#</a> Value Binder</h2><p>By default Laravel Excel uses PhpSpreadsheet&#39;s default value binder to intelligently format a cell&#39;s value when reading it. You may override this behavior by implementing the <code>WithCustomValueBinder</code> concern and the <code>bindValue</code> method. Your import class may also extend <code>DefaultValueBinder</code> to return the default behavior.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Imports</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\\</span>PhpSpreadsheet<span class="token punctuation">\\</span>Cell<span class="token punctuation">\\</span>Cell</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>ToModel</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\\</span>PhpSpreadsheet<span class="token punctuation">\\</span>Cell<span class="token punctuation">\\</span>DataType</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>WithCustomValueBinder</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\\</span>PhpSpreadsheet<span class="token punctuation">\\</span>Cell<span class="token punctuation">\\</span>DefaultValueBinder</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">UsersImport</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultValueBinder</span> <span class="token keyword">implements</span> <span class="token class-name">WithCustomValueBinder</span><span class="token punctuation">,</span> ToModel
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">bindValue</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Cell</span> <span class="token variable">$cell</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$cell</span><span class="token operator">-&gt;</span><span class="token function">setValueExplicit</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token class-name static-context">DataType</span><span class="token operator">::</span><span class="token constant">TYPE_NUMERIC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// else return default behavior</span>
        <span class="token keyword">return</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">bindValue</span><span class="token punctuation">(</span><span class="token variable">$cell</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="available-datatypes" tabindex="-1"><a class="header-anchor" href="#available-datatypes" aria-hidden="true">#</a> Available DataTypes</h2><ul><li><code>PhpOffice\\PhpSpreadsheet\\Cell\\DataType::TYPE_STRING</code></li><li><code>PhpOffice\\PhpSpreadsheet\\Cell\\DataType::TYPE_FORMULA</code></li><li><code>PhpOffice\\PhpSpreadsheet\\Cell\\DataType::TYPE_NUMERIC</code></li><li><code>PhpOffice\\PhpSpreadsheet\\Cell\\DataType::TYPE_BOOL</code></li><li><code>PhpOffice\\PhpSpreadsheet\\Cell\\DataType::TYPE_NULL</code></li><li><code>PhpOffice\\PhpSpreadsheet\\Cell\\DataType::TYPE_INLINE</code></li><li><code>PhpOffice\\PhpSpreadsheet\\Cell\\DataType::TYPE_ERROR</code></li></ul><h2 id="disable-intelligent-formatting" tabindex="-1"><a class="header-anchor" href="#disable-intelligent-formatting" aria-hidden="true">#</a> Disable intelligent formatting</h2><p>If you want to disable the intelligent formatting of values, you can extend your import class with <code>\\PhpOffice\\PhpSpreadsheet\\Cell\\StringValueBinder</code>. In this case all values are passed on as strings.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Imports</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>ToModel</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>WithCustomValueBinder</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">UsersImport</span> <span class="token keyword">extends</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>PhpOffice<span class="token punctuation">\\</span>PhpSpreadsheet<span class="token punctuation">\\</span>Cell<span class="token punctuation">\\</span>StringValueBinder</span> <span class="token keyword">implements</span> <span class="token class-name">WithCustomValueBinder</span><span class="token punctuation">,</span> ToModel
<span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="default-value-binder" tabindex="-1"><a class="header-anchor" href="#default-value-binder" aria-hidden="true">#</a> Default Value Binder</h2><p>If you want to use one value binder for all your imports, you can configure the default value binder in the config.</p><p>In <code>config/excel.php</code>:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token string single-quoted-string">&#39;value_binder&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;default&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name class-name-fully-qualified static-context">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>DefaultValueBinder</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function v(m,h){const s=l("router-link");return i(),o("div",null,[d,n("nav",r,[n("ul",null,[n("li",null,[e(s,{to:"#value-binder"},{default:t(()=>[a("Value Binder")]),_:1})]),n("li",null,[e(s,{to:"#available-datatypes"},{default:t(()=>[a("Available DataTypes")]),_:1})]),n("li",null,[e(s,{to:"#disable-intelligent-formatting"},{default:t(()=>[a("Disable intelligent formatting")]),_:1})]),n("li",null,[e(s,{to:"#default-value-binder"},{default:t(()=>[a("Default Value Binder")]),_:1})])])]),k])}const g=p(u,[["render",v],["__file","custom-formatting-values.html.vue"]]);export{g as default};
