import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r as a,o as l,c as s,b as e,d as o,w as i,e as r,a as c}from"./app-edc8bdf9.js";const p={},u=e("h1",{id:"upgrade-guide",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#upgrade-guide","aria-hidden":"true"},"#"),r(" Upgrade Guide")],-1),h={class:"table-of-contents"},g=c('<h2 id="upgrading-to-3-1-from-3-0" tabindex="-1"><a class="header-anchor" href="#upgrading-to-3-1-from-3-0" aria-hidden="true">#</a> Upgrading to 3.1 from 3.0</h2><p>Version 3.1 is backwards compatible with 3.0. Only features were added in this release.</p><p><strong>Additions</strong></p><ul><li>Imports feature.</li><li>ChunkReading</li><li>BatchInserts</li><li>Queued imports</li><li>ToArray concern for Exports.</li><li>Custom value binders for Imports and Exports.</li></ul><p><strong>Removals</strong></p><ul><li><code>Excel::filter(&#39;chunk&#39;)</code> method is removed, chunk filter is automatically added when using chunk reading.</li></ul><h2 id="upgrading-to-3-from-2-1" tabindex="-1"><a class="header-anchor" href="#upgrading-to-3-from-2-1" aria-hidden="true">#</a> Upgrading to 3.* from 2.1</h2><p>Version 3.* is not backwards compatible with 2.*. It&#39;s not possible to provide a step-by-step migration guide as it&#39;s a complete paradigm shift.</p><p><strong>New dependencies</strong></p><p>3.* introduces some new dependencies.</p><ul><li>Requires PHP 7.0 or higher.</li><li>Requires Laravel 5.5 (or higher).</li><li>Requires PhpSpreadsheet instead of PHPExcel.</li></ul><p><strong>Deprecations</strong></p><p>ALL Laravel Excel 2.* methods are deprecated and will not be able to use in 3.0 .</p><ul><li><code>Excel::load()</code> is removed and replaced by <code>Excel::import($yourImport)</code></li><li><code>Excel::create()</code> is removed and replaced by <code>Excel::download/Excel::store($yourExport)</code></li><li><code>Excel::create()-&gt;string(&#39;xlsx&#39;)</code> is removed an replaced by <code>Excel::raw($yourExport, Excel::XLSX)</code></li><li>3.0 provides no convenience methods for styling, you are encouraged to use PhpSpreadsheets native methods.</li></ul>',14),m={href:"https://github.com/SpartnerNL/Laravel-Excel/issues/1799",target:"_blank",rel:"noopener noreferrer"};function f(x,_){const t=a("router-link"),n=a("ExternalLinkIcon");return l(),s("div",null,[u,e("nav",h,[e("ul",null,[e("li",null,[o(t,{to:"#upgrading-to-3-1-from-3-0"},{default:i(()=>[r("Upgrading to 3.1 from 3.0")]),_:1})]),e("li",null,[o(t,{to:"#upgrading-to-3-from-2-1"},{default:i(()=>[r("Upgrading to 3.* from 2.1")]),_:1})])])]),g,e("p",null,[r("You can find an example upgrade for an export here: "),e("a",m,[r("https://github.com/SpartnerNL/Laravel-Excel/issues/1799"),o(n)])])])}const v=d(p,[["render",f],["__file","upgrade.html.vue"]]);export{v as default};
