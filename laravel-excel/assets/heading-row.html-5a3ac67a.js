import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c,b as n,d as e,w as t,e as s,a as l}from"./app-5f6cf456.js";const r={},u=n("h1",{id:"heading-row",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#heading-row","aria-hidden":"true"},"#"),s(" Heading row")],-1),d={class:"table-of-contents"},k=l(`<p>In case your file contains a heading row (a row in which each cells indicates the purpose of that column) and you want to use those names as array keys of each row, you can implement the <code>WithHeadingRow</code> concern.</p><p>Given we have an Excel file looking like this:</p><table><thead><tr><th>Name</th><th>Email</th><th>@ Field</th></tr></thead><tbody><tr><td>Patrick Brouwers</td><td>patrick@maatwebsite.nl</td><td>Some value</td></tr></tbody></table><p>We can now reference the heading instead of a numeric array key.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Imports</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>User</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>ToModel</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>WithHeadingRow</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">UsersImport</span> <span class="token keyword">implements</span> <span class="token class-name">ToModel</span><span class="token punctuation">,</span> WithHeadingRow
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">model</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$row</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;name&#39;</span>  <span class="token operator">=&gt;</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;email&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;email&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;at&#39;</span>    <span class="token operator">=&gt;</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;at_field&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="heading-row-on-different-row" tabindex="-1"><a class="header-anchor" href="#heading-row-on-different-row" aria-hidden="true">#</a> Heading row on different row</h2><p>In case your heading row is not on the first row, you can easily specify this in your import class:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Imports</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>User</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>ToModel</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>WithHeadingRow</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">UsersImport</span> <span class="token keyword">implements</span> <span class="token class-name">ToModel</span><span class="token punctuation">,</span> WithHeadingRow
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">model</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$row</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;name&#39;</span>  <span class="token operator">=&gt;</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;email&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;email&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">headingRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The 2nd row will now be used as heading row.</p><h2 id="heading-key-formatting" tabindex="-1"><a class="header-anchor" href="#heading-key-formatting" aria-hidden="true">#</a> Heading key formatting</h2><p>By default the heading keys are formatted with the Laravel <code>str_slug()</code> helper. E.g. this means all spaces are converted to <code>_</code>.</p><p>If you want to change this behaviour, you can do so by extending the <code>HeadingRowFormatter</code></p><h3 id="no-formatting" tabindex="-1"><a class="header-anchor" href="#no-formatting" aria-hidden="true">#</a> No formatting</h3><p>If you want no formatting at all, you can use the <code>none</code> formatter. The array keys will contain the exact data that was in the heading row.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Imports<span class="token punctuation">\\</span>HeadingRowFormatter</span><span class="token punctuation">;</span>

<span class="token class-name static-context">HeadingRowFormatter</span><span class="token operator">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;none&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">model</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$row</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;name&#39;</span>  <span class="token operator">=&gt;</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;Name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;email&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;Email&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="custom-formatter" tabindex="-1"><a class="header-anchor" href="#custom-formatter" aria-hidden="true">#</a> Custom formatter</h3><p>You can define a custom formatter with <code>::extend()</code> in a service provider.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">HeadingRowFormatter</span><span class="token operator">::</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;custom&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string single-quoted-string">&#39;do-something-custom&#39;</span> <span class="token operator">.</span> <span class="token variable">$value</span><span class="token punctuation">;</span> 
    
    <span class="token comment">// And you can use heading column index.</span>
    <span class="token comment">// return &#39;column-&#39; . $key; </span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can set the custom formatter in <code>config/excel.php</code>.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token string single-quoted-string">&#39;imports&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;heading_row&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;formatter&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;custom&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or you can then set this new formatter in a service provider.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">HeadingRowFormatter</span><span class="token operator">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;custom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="importing-only-the-heading-row" tabindex="-1"><a class="header-anchor" href="#importing-only-the-heading-row" aria-hidden="true">#</a> Importing only the heading row</h2><p>Sometimes you might want to prefetch the heading row to do some validation. We have an easy shortcut for this: <code>HeadingRowImport</code>.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>HeadingRowImport</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">UsersImportController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">import</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$headings</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HeadingRowImport</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;users.xlsx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The headings array contains an array of headings per sheet.</p><h2 id="grouping-values-of-multiple-columns-sharing-same-header" tabindex="-1"><a class="header-anchor" href="#grouping-values-of-multiple-columns-sharing-same-header" aria-hidden="true">#</a> Grouping values of multiple columns sharing same header</h2><p>Given we have an Excel file looking like this:</p><table><thead><tr><th>Name</th><th>Email</th><th>Options</th><th>Options</th></tr></thead><tbody><tr><td>Patrick Brouwers</td><td>patrick@maatwebsite.nl</td><td>Some value</td><td>Some other value</td></tr></tbody></table><p>We can group the values of the Options columns in an array using import concern <code>WithGroupedHeadingRow</code>. Data returned from row will be in format:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;name&#39;</span>    <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Patrick Brouwers&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;email&#39;</span>   <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;patrick@maatwebsite.nl&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;options&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;Some value&#39;</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;Some other value&#39;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,31);function m(g,v){const a=p("router-link");return i(),c("div",null,[u,n("nav",d,[n("ul",null,[n("li",null,[e(a,{to:"#heading-row-on-different-row"},{default:t(()=>[s("Heading row on different row")]),_:1})]),n("li",null,[e(a,{to:"#heading-key-formatting"},{default:t(()=>[s("Heading key formatting")]),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#no-formatting"},{default:t(()=>[s("No formatting")]),_:1})]),n("li",null,[e(a,{to:"#custom-formatter"},{default:t(()=>[s("Custom formatter")]),_:1})])])]),n("li",null,[e(a,{to:"#importing-only-the-heading-row"},{default:t(()=>[s("Importing only the heading row")]),_:1})]),n("li",null,[e(a,{to:"#grouping-values-of-multiple-columns-sharing-same-header"},{default:t(()=>[s("Grouping values of multiple columns sharing same header")]),_:1})])])]),k])}const w=o(r,[["render",m],["__file","heading-row.html.vue"]]);export{w as default};
