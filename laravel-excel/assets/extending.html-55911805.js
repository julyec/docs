import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c as l,b as n,d as a,w as t,e as s,a as u}from"./app-edc8bdf9.js";const r={},d=n("h1",{id:"extending",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#extending","aria-hidden":"true"},"#"),s(" Extending")],-1),k={class:"table-of-contents"},v=u(`<h2 id="events" tabindex="-1"><a class="header-anchor" href="#events" aria-hidden="true">#</a> Events</h2><p>The export process has a few events you can leverage to interact with the underlying classes to add custom behaviour to the export.</p><p>You are able to hook into the parent package by using events. No need to use convenience methods like &quot;query&quot; or &quot;view&quot;, if you need full control over the export.</p><p>The events will be activated by adding the <code>WithEvents</code> concern. Inside the <code>registerEvents</code> method, you will have to return an array of events. The key is the Fully Qualified Name (FQN) of the event and the value is a callable event listener. This can either be a closure, array-callable or invokable class.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Exports</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>WithEvents</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>BeforeExport</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>BeforeWriting</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>BeforeSheet</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">InvoicesExport</span> <span class="token keyword">implements</span> <span class="token class-name">WithEvents</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">array</span></span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">registerEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token comment">// Handle by a closure.</span>
            <span class="token class-name static-context">BeforeExport</span><span class="token operator">::</span><span class="token keyword">class</span> <span class="token operator">=&gt;</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token class-name type-declaration">BeforeExport</span> <span class="token variable">$event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token variable">$event</span><span class="token operator">-&gt;</span><span class="token property">writer</span><span class="token operator">-&gt;</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">setCreator</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Patrick&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            
            <span class="token comment">// Array callable, refering to a static method.</span>
            <span class="token class-name static-context">BeforeWriting</span><span class="token operator">::</span><span class="token keyword">class</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;beforeWriting&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            
            <span class="token comment">// Using a class with an __invoke method.</span>
            <span class="token class-name static-context">BeforeSheet</span><span class="token operator">::</span><span class="token keyword">class</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">BeforeSheetHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">beforeWriting</span><span class="token punctuation">(</span><span class="token class-name type-declaration">BeforeWriting</span> <span class="token variable">$event</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token comment">//</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Do note that using a <code>Closure</code> will not be possible in combination with queued exports, as PHP cannot serialize the closure. In those cases it might be better to use the <code>RegistersEventListeners</code> trait.</p><h3 id="auto-register-event-listeners" tabindex="-1"><a class="header-anchor" href="#auto-register-event-listeners" aria-hidden="true">#</a> Auto register event listeners</h3><p>By using the <code>RegistersEventListeners</code> trait you can auto-register the event listeners, without the need of using the <code>registerEvents</code>. The listener will only be registered if the method is created.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Exports</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>WithEvents</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>RegistersEventListeners</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>BeforeExport</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>BeforeWriting</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>BeforeSheet</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>AfterSheet</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">InvoicesExport</span> <span class="token keyword">implements</span> <span class="token class-name">WithEvents</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">Exportable</span><span class="token punctuation">,</span> RegistersEventListeners<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">beforeExport</span><span class="token punctuation">(</span><span class="token class-name type-declaration">BeforeExport</span> <span class="token variable">$event</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">beforeWriting</span><span class="token punctuation">(</span><span class="token class-name type-declaration">BeforeWriting</span> <span class="token variable">$event</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">beforeSheet</span><span class="token punctuation">(</span><span class="token class-name type-declaration">BeforeSheet</span> <span class="token variable">$event</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">afterSheet</span><span class="token punctuation">(</span><span class="token class-name type-declaration">AfterSheet</span> <span class="token variable">$event</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="global-event-listeners" tabindex="-1"><a class="header-anchor" href="#global-event-listeners" aria-hidden="true">#</a> Global event listeners</h3><p>Event listeners can also be configured globally, if you want to perform the same actions on all exports in your app. You can add them to e.g. your <code>AppServiceProvider</code> in the <code>register()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Writer</span><span class="token operator">::</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name static-context">BeforeExport</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Writer</span><span class="token operator">::</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name static-context">BeforeWriting</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Sheet</span><span class="token operator">::</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name static-context">BeforeSheet</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Sheet</span><span class="token operator">::</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name static-context">AfterSheet</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="available-events" tabindex="-1"><a class="header-anchor" href="#available-events" aria-hidden="true">#</a> Available events</h3><table><thead><tr><th>Event name</th><th>Payload</th><th>Explanation</th></tr></thead><tbody><tr><td><code>Maatwebsite\\Excel\\Events\\BeforeExport</code></td><td><code>$event-&gt;writer : Writer</code></td><td>Event gets raised at the start of the process.</td></tr><tr><td><code>Maatwebsite\\Excel\\Events\\BeforeWriting</code></td><td><code>$event-&gt;writer : Writer</code></td><td>Event gets raised before the download/store starts.</td></tr><tr><td><code>Maatwebsite\\Excel\\Events\\BeforeSheet</code></td><td><code>$event-&gt;sheet : Sheet</code></td><td>Event gets raised just after the sheet is created.</td></tr><tr><td><code>Maatwebsite\\Excel\\Events\\AfterSheet</code></td><td><code>$event-&gt;sheet : Sheet</code></td><td>Event gets raised at the end of the sheet process.</td></tr></tbody></table><h2 id="custom-concerns" tabindex="-1"><a class="header-anchor" href="#custom-concerns" aria-hidden="true">#</a> Custom Concerns</h2><p>You can add custom concerns to your app. This can be useful if you want to share some concerns over a few projects or want to open source your custom concerns.</p><p>Let&#39;s add a <code>WithCustomProperties</code> concern to your app. You could add these concerns to <code>App/Exports/Concerns</code>, but any location will do as long as it can be autoloaded by Composer.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Exports<span class="token punctuation">\\</span>Concerns</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name-definition class-name">WithCustomProperties</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     *
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">string</span></span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">description</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next to this concern we will create a concern handler <code>WithCustomPropertiesHandler</code>. This class can also be added to <code>App/Exports/Concerns</code>, but is again completely free of choice. A concern handler is basically just an invokable class. It receives your exportable object and either a <code>Writer</code> or <code>Sheet</code> object, depending on the chosen event.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Exports<span class="token punctuation">\\</span>Concerns</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Exports<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>WithCustomProperties</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Writer</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">WithCustomPropertiesHandler</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token class-name">WithCustomProperties</span> <span class="token parameter">$exportable</span>
     * <span class="token keyword">@param</span> <span class="token class-name">Writer</span>               <span class="token parameter">$writer</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token class-name type-declaration">WithCustomProperties</span> <span class="token variable">$exportable</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Writer</span> <span class="token variable">$writer</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$writer</span>
            <span class="token operator">-&gt;</span><span class="token function">getDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">setDescription</span><span class="token punctuation">(</span>
                <span class="token variable">$exportable</span><span class="token operator">-&gt;</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We will then register this concern in a service provider. You could use <code>App/Providers/AppServiceProvider</code> for this.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name static-context">Excel</span><span class="token operator">::</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token class-name static-context">WithCustomProperties</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WithCustomPropertiesHandler</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>💡 <code>::extend</code> accepts a callable as second parameter. It&#39;s also possible to pass a closure.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name static-context">Excel</span><span class="token operator">::</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token class-name static-context">WithCustomProperties</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token class-name type-declaration">WithCustomProperties</span> <span class="token variable">$exportable</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Writer</span> <span class="token variable">$writer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$writer</span><span class="token operator">-&gt;</span><span class="token function">getDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token variable">$exportable</span><span class="token operator">-&gt;</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also bind concern handlers to different hooks. By default a concern handler is always bound to the <code>BeforeWriting</code> event. You can easily customize this, by supplying a 3rd parameter.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name static-context">Excel</span><span class="token operator">::</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token class-name static-context">WithCustomProperties</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WithCustomPropertiesHandler</span><span class="token punctuation">,</span> <span class="token class-name static-context">BeforeExport</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="macroable" tabindex="-1"><a class="header-anchor" href="#macroable" aria-hidden="true">#</a> Macroable</h2><p>Both <code>Writer</code> and <code>Sheet</code> are &quot;macroable&quot; which means they can easily be extended to fit your needs. Both Writer and Sheet have a <code>-&gt;getDelegate()</code> method which returns the underlying PhpSpreadsheet class. This will allow you to add custom macros as shortcuts to PhpSpreadsheet methods that are not available in this package.</p><h3 id="writer" tabindex="-1"><a class="header-anchor" href="#writer" aria-hidden="true">#</a> Writer</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package"><span class="token punctuation">\\</span>Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Writer</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Writer</span><span class="token operator">::</span><span class="token function">macro</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;setCreator&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Writer</span> <span class="token variable">$writer</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$creator</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$writer</span><span class="token operator">-&gt;</span><span class="token function">getDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">setCreator</span><span class="token punctuation">(</span><span class="token variable">$creator</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sheet" tabindex="-1"><a class="header-anchor" href="#sheet" aria-hidden="true">#</a> Sheet</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package"><span class="token punctuation">\\</span>Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Sheet</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Sheet</span><span class="token operator">::</span><span class="token function">macro</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;setOrientation&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Sheet</span> <span class="token variable">$sheet</span><span class="token punctuation">,</span> <span class="token variable">$orientation</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$sheet</span><span class="token operator">-&gt;</span><span class="token function">getDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getPageSetup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">setOrientation</span><span class="token punctuation">(</span><span class="token variable">$orientation</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="customize" tabindex="-1"><a class="header-anchor" href="#customize" aria-hidden="true">#</a> Customize</h3><p>You can create your own macro to add custom methods to a spreadsheet instance.</p><p>For example, to add styling to a cell, we first create a macro, let&#39;s call it <code>styleCells</code>:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package"><span class="token punctuation">\\</span>Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Sheet</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Sheet</span><span class="token operator">::</span><span class="token function">macro</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;styleCells&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Sheet</span> <span class="token variable">$sheet</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$cellRange</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$style</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$sheet</span><span class="token operator">-&gt;</span><span class="token function">getDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getStyle</span><span class="token punctuation">(</span><span class="token variable">$cellRange</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">applyFromArray</span><span class="token punctuation">(</span><span class="token variable">$style</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Once the macro is created, it can be used inside the <code>registerEvents()</code> method as such:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Exports</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>WithEvents</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>BeforeExport</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>AfterSheet</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">InvoicesExport</span> <span class="token keyword">implements</span> <span class="token class-name">WithEvents</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">array</span></span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">registerEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token class-name static-context">BeforeExport</span><span class="token operator">::</span><span class="token keyword">class</span>  <span class="token operator">=&gt;</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token class-name type-declaration">BeforeExport</span> <span class="token variable">$event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token variable">$event</span><span class="token operator">-&gt;</span><span class="token property">writer</span><span class="token operator">-&gt;</span><span class="token function">setCreator</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Patrick&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token class-name static-context">AfterSheet</span><span class="token operator">::</span><span class="token keyword">class</span>    <span class="token operator">=&gt;</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token class-name type-declaration">AfterSheet</span> <span class="token variable">$event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token variable">$event</span><span class="token operator">-&gt;</span><span class="token property">sheet</span><span class="token operator">-&gt;</span><span class="token function">setOrientation</span><span class="token punctuation">(</span><span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>PhpOffice<span class="token punctuation">\\</span>PhpSpreadsheet<span class="token punctuation">\\</span>Worksheet<span class="token punctuation">\\</span>PageSetup</span><span class="token operator">::</span><span class="token constant">ORIENTATION_LANDSCAPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token variable">$event</span><span class="token operator">-&gt;</span><span class="token property">sheet</span><span class="token operator">-&gt;</span><span class="token function">styleCells</span><span class="token punctuation">(</span>
                    <span class="token string single-quoted-string">&#39;B2:G8&#39;</span><span class="token punctuation">,</span>
                    <span class="token punctuation">[</span>
                        <span class="token string single-quoted-string">&#39;borders&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
                            <span class="token string single-quoted-string">&#39;outline&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
                                <span class="token string single-quoted-string">&#39;borderStyle&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>PhpOffice<span class="token punctuation">\\</span>PhpSpreadsheet<span class="token punctuation">\\</span>Style<span class="token punctuation">\\</span>Border</span><span class="token operator">::</span><span class="token constant">BORDER_THICK</span><span class="token punctuation">,</span>
                                <span class="token string single-quoted-string">&#39;color&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;argb&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;FFFF0000&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                            <span class="token punctuation">]</span><span class="token punctuation">,</span>
                        <span class="token punctuation">]</span>
                    <span class="token punctuation">]</span>
                <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rtl-right-to-left-sheets" tabindex="-1"><a class="header-anchor" href="#rtl-right-to-left-sheets" aria-hidden="true">#</a> RTL (Right to Left) Sheets</h3><p>To change the Excel sheet direction you can use <code>setRightToLeft(true)</code> as in the below example</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Exports</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>WithEvents</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>BeforeExport</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>AfterSheet</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">InvoicesExport</span> <span class="token keyword">implements</span> <span class="token class-name">WithEvents</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">array</span></span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">registerEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token class-name static-context">AfterSheet</span><span class="token operator">::</span><span class="token keyword">class</span>    <span class="token operator">=&gt;</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token class-name type-declaration">AfterSheet</span> <span class="token variable">$event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token variable">$event</span><span class="token operator">-&gt;</span><span class="token property">sheet</span><span class="token operator">-&gt;</span><span class="token function">getDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">setRightToLeft</span><span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Feel free to use the above macro, or be creative and invent your own!</p>`,42),m={href:"https://phpspreadsheet.readthedocs.io/",target:"_blank",rel:"noopener noreferrer"};function b(h,g){const e=p("router-link"),o=p("ExternalLinkIcon");return i(),l("div",null,[d,n("nav",k,[n("ul",null,[n("li",null,[a(e,{to:"#events"},{default:t(()=>[s("Events")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#auto-register-event-listeners"},{default:t(()=>[s("Auto register event listeners")]),_:1})]),n("li",null,[a(e,{to:"#global-event-listeners"},{default:t(()=>[s("Global event listeners")]),_:1})]),n("li",null,[a(e,{to:"#available-events"},{default:t(()=>[s("Available events")]),_:1})])])]),n("li",null,[a(e,{to:"#custom-concerns"},{default:t(()=>[s("Custom Concerns")]),_:1})]),n("li",null,[a(e,{to:"#macroable"},{default:t(()=>[s("Macroable")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#writer"},{default:t(()=>[s("Writer")]),_:1})]),n("li",null,[a(e,{to:"#sheet"},{default:t(()=>[s("Sheet")]),_:1})]),n("li",null,[a(e,{to:"#customize"},{default:t(()=>[s("Customize")]),_:1})]),n("li",null,[a(e,{to:"#rtl-right-to-left-sheets"},{default:t(()=>[s("RTL (Right to Left) Sheets")]),_:1})])])])])]),v,n("p",null,[s("For PhpSpreadsheet methods, please refer to "),n("a",m,[s("their documentation"),a(o)]),s(".")])])}const w=c(r,[["render",b],["__file","extending.html.vue"]]);export{w as default};
