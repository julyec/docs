import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c as u,b as n,d as a,w as t,e as s,a as c}from"./app-5f6cf456.js";const r={},d=n("h1",{id:"extending",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#extending","aria-hidden":"true"},"#"),s(" Extending")],-1),k={class:"table-of-contents"},v=c(`<h2 id="events" tabindex="-1"><a class="header-anchor" href="#events" aria-hidden="true">#</a> Events</h2><p>The import process has a few events you can leverage to interact with the underlying classes to add custom behaviour to the import.</p><p>You are able to hook into the parent package by using events.</p><p>The events will be activated by adding the <code>WithEvents</code> concern. Inside the <code>registerEvents</code> method, you will have to return an array of events. The key is the Fully Qualified Name (FQN) of the event and the value is a callable event listener. This can either be a closure, array-callable or invokable class.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Imports</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>WithEvents</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>BeforeImport</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>AfterImport</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>AfterSheet</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>BeforeSheet</span><span class="token punctuation">;</span>


<span class="token keyword">class</span> <span class="token class-name-definition class-name">UsersImport</span> <span class="token keyword">implements</span> <span class="token class-name">WithEvents</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">array</span></span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">registerEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token comment">// Handle by a closure.</span>
            <span class="token class-name static-context">BeforeImport</span><span class="token operator">::</span><span class="token keyword">class</span> <span class="token operator">=&gt;</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token class-name type-declaration">BeforeImport</span> <span class="token variable">$event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token variable">$creator</span> <span class="token operator">=</span> <span class="token variable">$event</span><span class="token operator">-&gt;</span><span class="token property">reader</span><span class="token operator">-&gt;</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
			
		   
            <span class="token comment">// Using a class with an __invoke method.</span>
            <span class="token class-name static-context">BeforeSheet</span><span class="token operator">::</span><span class="token keyword">class</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">BeforeSheetHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            
            <span class="token comment">// Array callable, refering to a static method.</span>
            <span class="token class-name static-context">AfterSheet</span><span class="token operator">::</span><span class="token keyword">class</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;afterSheet&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                        
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">afterSheet</span><span class="token punctuation">(</span><span class="token class-name type-declaration">AfterSheet</span> <span class="token variable">$event</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token comment">//</span>
    <span class="token punctuation">}</span>
	
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Do note that using a <code>Closure</code> will not be possible in combination with queued imports, as PHP cannot serialize the closure. In those cases it might be better to use the <code>RegistersEventListeners</code> trait.</p><h3 id="auto-register-event-listeners" tabindex="-1"><a class="header-anchor" href="#auto-register-event-listeners" aria-hidden="true">#</a> Auto register event listeners</h3><p>By using the <code>RegistersEventListeners</code> trait you can auto-register the event listeners, without the need of using the <code>registerEvents</code>. The listener will only be registered if the method is created.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Imports</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>Importable</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>WithEvents</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>RegistersEventListeners</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>BeforeImport</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>AfterImport</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>BeforeSheet</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>AfterSheet</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">UsersImport</span> <span class="token keyword">implements</span> <span class="token class-name">WithEvents</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">Importable</span><span class="token punctuation">,</span> RegistersEventListeners<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">beforeImport</span><span class="token punctuation">(</span><span class="token class-name type-declaration">BeforeImport</span> <span class="token variable">$event</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//</span>
    <span class="token punctuation">}</span>
	
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">afterImport</span><span class="token punctuation">(</span><span class="token class-name type-declaration">AfterImport</span> <span class="token variable">$event</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">beforeSheet</span><span class="token punctuation">(</span><span class="token class-name type-declaration">BeforeSheet</span> <span class="token variable">$event</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// From 3.1.50 onwards the methods do not need to be static, allowing use of $this</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">afterSheet</span><span class="token punctuation">(</span><span class="token class-name type-declaration">AfterSheet</span> <span class="token variable">$event</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//</span>
    <span class="token punctuation">}</span>
	
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="global-event-listeners" tabindex="-1"><a class="header-anchor" href="#global-event-listeners" aria-hidden="true">#</a> Global event listeners</h3><p>Event listeners can also be configured globally, if you want to perform the same actions on all exports in your app. You can add them to e.g. your <code>AppServiceProvider</code> in the <code>register()</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Reader</span><span class="token operator">::</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name static-context">BeforeImport</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Sheet</span><span class="token operator">::</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name static-context">AfterImport</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Sheet</span><span class="token operator">::</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name static-context">BeforeSheet</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Sheet</span><span class="token operator">::</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name static-context">AfterSheet</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="available-events" tabindex="-1"><a class="header-anchor" href="#available-events" aria-hidden="true">#</a> Available events</h3>`,13),m=n("thead",null,[n("tr",null,[n("th",null,"Event name"),n("th",null,"Payload"),n("th",null,"Explanation")])],-1),h=n("tr",null,[n("td",null,[n("code",null,"Maatwebsite\\Excel\\Events\\BeforeImport")]),n("td",null,[n("code",null,"$event->reader : Reader")]),n("td",null,"Event gets raised at the start of the process.")],-1),b=n("tr",null,[n("td",null,[n("code",null,"Maatwebsite\\Excel\\Events\\AfterImport")]),n("td",null,[n("code",null,"$event->reader : Reader")]),n("td",null,"Event gets raised at the end of the process.")],-1),f=n("tr",null,[n("td",null,[n("code",null,"Maatwebsite\\Excel\\Events\\BeforeSheet")]),n("td",null,[n("code",null,"$event->sheet : Sheet")]),n("td",null,"Event gets raised just after the sheet is created.")],-1),g=n("tr",null,[n("td",null,[n("code",null,"Maatwebsite\\Excel\\Events\\AfterSheet")]),n("td",null,[n("code",null,"$event->sheet : Sheet")]),n("td",null,"Event gets raised at the end of the sheet process.")],-1),w=n("td",null,[n("code",null,"Maatwebsite\\Excel\\Events\\AfterChunk")],-1),y=n("td",null,[n("code",null,"$event->sheet : Sheet")],-1),x={href:"https://docs.laravel-excel.com/3.1/imports/chunk-reading.html",target:"_blank",rel:"noopener noreferrer"},E=n("td",null,[n("code",null,"Maatwebsite\\Excel\\Events\\AfterBatch")],-1),_=n("td",null,[n("code",null,"$event->manager : ModelManager")],-1),S={href:"https://docs.laravel-excel.com/3.1/imports/batch-inserts.html",target:"_blank",rel:"noopener noreferrer"},I=c(`<h2 id="macroable" tabindex="-1"><a class="header-anchor" href="#macroable" aria-hidden="true">#</a> Macroable</h2><p>Both <code>Reader</code> and <code>Sheet</code> are &quot;macroable&quot; (which means they can easily be extended to fit your needs). Both Reader and Sheet have a <code>-&gt;getDelegate()</code> method which returns the underlying PhpSpreadsheet class. This will allow you to add custom macros as shortcuts to PhpSpreadsheet methods that are not available in this package.</p><h3 id="reader" tabindex="-1"><a class="header-anchor" href="#reader" aria-hidden="true">#</a> Reader</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package"><span class="token punctuation">\\</span>Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Reader</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Reader</span><span class="token operator">::</span><span class="token function">macro</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;setCreator&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Reader</span> <span class="token variable">$reader</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$creator</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$reader</span><span class="token operator">-&gt;</span><span class="token function">getDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">setCreator</span><span class="token punctuation">(</span><span class="token variable">$creator</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sheet" tabindex="-1"><a class="header-anchor" href="#sheet" aria-hidden="true">#</a> Sheet</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package"><span class="token punctuation">\\</span>Maatwebsite<span class="token punctuation">\\</span>Excel<span class="token punctuation">\\</span>Sheet</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Sheet</span><span class="token operator">::</span><span class="token function">macro</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;setOrientation&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Sheet</span> <span class="token variable">$sheet</span><span class="token punctuation">,</span> <span class="token variable">$orientation</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$sheet</span><span class="token operator">-&gt;</span><span class="token function">getDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getPageSetup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">setOrientation</span><span class="token punctuation">(</span><span class="token variable">$orientation</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),M={href:"https://phpspreadsheet.readthedocs.io/",target:"_blank",rel:"noopener noreferrer"};function $(A,B){const e=o("router-link"),p=o("ExternalLinkIcon");return i(),u("div",null,[d,n("nav",k,[n("ul",null,[n("li",null,[a(e,{to:"#events"},{default:t(()=>[s("Events")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#auto-register-event-listeners"},{default:t(()=>[s("Auto register event listeners")]),_:1})]),n("li",null,[a(e,{to:"#global-event-listeners"},{default:t(()=>[s("Global event listeners")]),_:1})]),n("li",null,[a(e,{to:"#available-events"},{default:t(()=>[s("Available events")]),_:1})])])]),n("li",null,[a(e,{to:"#macroable"},{default:t(()=>[s("Macroable")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#reader"},{default:t(()=>[s("Reader")]),_:1})]),n("li",null,[a(e,{to:"#sheet"},{default:t(()=>[s("Sheet")]),_:1})])])])])]),v,n("table",null,[m,n("tbody",null,[h,b,f,g,n("tr",null,[w,y,n("td",null,[s("Event gets raised after each chunk from the import file has been processed. Only available with "),n("a",x,[s("chunk reading"),a(p)])])]),n("tr",null,[E,_,n("td",null,[s("Event gets raised after each batch of model has been flushed to the database. Only available with "),n("a",S,[s("batch inserts"),a(p)])])])])]),I,n("p",null,[s("For PhpSpreadsheet methods, please refer to "),n("a",M,[s("their documentation"),a(p)]),s(".")])])}const P=l(r,[["render",$],["__file","extending.html.vue"]]);export{P as default};
