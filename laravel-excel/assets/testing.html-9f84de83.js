import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,b as n,d as t,w as e,e as s,a as l}from"./app-edc8bdf9.js";const u={},r=n("h1",{id:"testing",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#testing","aria-hidden":"true"},"#"),s(" Testing")],-1),d={class:"table-of-contents"},k=l(`<p>The Excel facade can be used to swap the exporter to a fake.</p><h2 id="testing-downloads" tabindex="-1"><a class="header-anchor" href="#testing-downloads" aria-hidden="true">#</a> Testing downloads</h2><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token doc-comment comment">/**
* <span class="token keyword">@test</span>
*/</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">user_can_download_invoices_export</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token class-name static-context">Excel</span><span class="token operator">::</span><span class="token function">fake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">actingAs</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">givenUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
         <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/invoices/download/xlsx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name static-context">Excel</span><span class="token operator">::</span><span class="token function">assertDownloaded</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;filename.xlsx&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token class-name type-declaration">InvoicesExport</span> <span class="token variable">$export</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Assert that the correct export is downloaded.</span>
        <span class="token keyword">return</span> <span class="token variable">$export</span><span class="token operator">-&gt;</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;#2018-01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="testing-storing-exports" tabindex="-1"><a class="header-anchor" href="#testing-storing-exports" aria-hidden="true">#</a> Testing storing exports</h2><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token doc-comment comment">/**
* <span class="token keyword">@test</span>
*/</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">user_can_store_invoices_export</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token class-name static-context">Excel</span><span class="token operator">::</span><span class="token function">fake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">actingAs</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">givenUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
         <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/invoices/store/xlsx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name static-context">Excel</span><span class="token operator">::</span><span class="token function">assertStored</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;filename.xlsx&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;diskName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name static-context">Excel</span><span class="token operator">::</span><span class="token function">assertStored</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;filename.xlsx&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;diskName&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token class-name type-declaration">InvoicesExport</span> <span class="token variable">$export</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// When passing the callback as 2nd param, the disk will be the default disk.</span>
    <span class="token class-name static-context">Excel</span><span class="token operator">::</span><span class="token function">assertStored</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;filename.xlsx&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token class-name type-declaration">InvoicesExport</span> <span class="token variable">$export</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="testing-queuing-exports" tabindex="-1"><a class="header-anchor" href="#testing-queuing-exports" aria-hidden="true">#</a> Testing queuing exports</h2><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token doc-comment comment">/**
* <span class="token keyword">@test</span>
*/</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">user_can_queue_invoices_export</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token class-name static-context">Excel</span><span class="token operator">::</span><span class="token function">fake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">actingAs</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">givenUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
         <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/invoices/queue/xlsx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name static-context">Excel</span><span class="token operator">::</span><span class="token function">assertQueued</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;filename.xlsx&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;diskName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name static-context">Excel</span><span class="token operator">::</span><span class="token function">assertQueued</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;filename.xlsx&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;diskName&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token class-name type-declaration">InvoicesExport</span> <span class="token variable">$export</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// When passing the callback as 2nd param, the disk will be the default disk.</span>
    <span class="token class-name static-context">Excel</span><span class="token operator">::</span><span class="token function">assertQueued</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;filename.xlsx&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token class-name type-declaration">InvoicesExport</span> <span class="token variable">$export</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Assert that the export was queued with a specific chain of other jobs.</span>
    <span class="token class-name static-context">Excel</span><span class="token operator">::</span><span class="token function">assertQueuedWithChain</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token keyword">new</span> <span class="token class-name">NotifyUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="testing-exports-with-dynamic-file-name-path" tabindex="-1"><a class="header-anchor" href="#testing-exports-with-dynamic-file-name-path" aria-hidden="true">#</a> Testing exports with dynamic file name/path</h2><p>If you have dynamic naming for files or paths, you can use a regular expression to represent those while testing:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token doc-comment comment">/**
* <span class="token keyword">@test</span>
*/</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">user_can_store_invoices_export</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
   <span class="token class-name static-context">Excel</span><span class="token operator">::</span><span class="token function">fake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   
   <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">actingAs</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">givenUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/invoices/store/xlsx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   
   <span class="token comment">// Tells the mock to use regular expressions</span>
   <span class="token class-name static-context">Excel</span><span class="token operator">::</span><span class="token function">matchByRegex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
   <span class="token comment">// For a given dynamic named file &#39;invoices_2019.xlsx&#39;</span>
   <span class="token class-name static-context">Excel</span><span class="token operator">::</span><span class="token function">assertStored</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/invoices_\\d{4}\\.xlsx/&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;diskName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Please note that your expression must match only one file/path. If more than one match is found, the test will fail.</p>`,11);function v(m,g){const a=o("router-link");return c(),i("div",null,[r,n("nav",d,[n("ul",null,[n("li",null,[t(a,{to:"#testing-downloads"},{default:e(()=>[s("Testing downloads")]),_:1})]),n("li",null,[t(a,{to:"#testing-storing-exports"},{default:e(()=>[s("Testing storing exports")]),_:1})]),n("li",null,[t(a,{to:"#testing-queuing-exports"},{default:e(()=>[s("Testing queuing exports")]),_:1})]),n("li",null,[t(a,{to:"#testing-exports-with-dynamic-file-name-path"},{default:e(()=>[s("Testing exports with dynamic file name/path")]),_:1})])])]),k])}const h=p(u,[["render",v],["__file","testing.html.vue"]]);export{h as default};
