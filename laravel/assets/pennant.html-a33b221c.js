import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c,b as s,d as n,e as t,a}from"./app-06635a3b.js";const l={},u=a('<h1 id="laravel-pennant" tabindex="-1"><a class="header-anchor" href="#laravel-pennant" aria-hidden="true">#</a> Laravel Pennant</h1><ul><li><a href="#introduction">Introduction</a></li><li><a href="#installation">Installation</a></li><li><a href="#configuration">Configuration</a></li><li><a href="#defining-features">Defining Features</a><ul><li><a href="#class-based-features">Class Based Features</a></li></ul></li><li><a href="#checking-features">Checking Features</a><ul><li><a href="#conditional-execution">Conditional Execution</a></li><li><a href="#the-has-features-trait">The <code>HasFeatures</code> Trait</a></li><li><a href="#blade-directive">Blade Directive</a></li><li><a href="#middleware">Middleware</a></li><li><a href="#in-memory-cache">In-Memory Cache</a></li></ul></li><li><a href="#scope">Scope</a><ul><li><a href="#specifying-the-scope">Specifying The Scope</a></li><li><a href="#default-scope">Default Scope</a></li><li><a href="#nullable-scope">Nullable Scope</a></li><li><a href="#identifying-scope">Identifying Scope</a></li><li><a href="#serializing-scope">Serializing Scope</a></li></ul></li><li><a href="#rich-feature-values">Rich Feature Values</a></li><li><a href="#retrieving-multiple-features">Retrieving Multiple Features</a></li><li><a href="#eager-loading">Eager Loading</a></li><li><a href="#updating-values">Updating Values</a><ul><li><a href="#bulk-updates">Bulk Updates</a></li><li><a href="#purging-features">Purging Features</a></li></ul></li><li><a href="#testing">Testing</a></li><li><a href="#adding-custom-pennant-drivers">Adding Custom Pennant Drivers</a><ul><li><a href="#implementing-the-driver">Implementing The Driver</a></li><li><a href="#registering-the-driver">Registering The Driver</a></li></ul></li><li><a href="#events">Events</a></li></ul><p><a name="introduction"></a></p><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2>',4),r={href:"https://github.com/laravel/pennant",target:"_blank",rel:"noopener noreferrer"},d=a(`<p><a name="installation"></a></p><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h2><p>First, install Pennant into your project using the Composer package manager:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">composer</span> require laravel/pennant
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Next, you should publish the Pennant configuration and migration files using the <code>vendor:publish</code> Artisan command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan vendor:publish <span class="token parameter variable">--provider</span><span class="token operator">=</span><span class="token string">&quot;Laravel\\Pennant\\PennantServiceProvider&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Finally, you should run your application&#39;s database migrations. This will create a <code>features</code> table that Pennant uses to power its <code>database</code> driver:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan migrate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="configuration"></a></p><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h2><p>After publishing Pennant&#39;s assets, its configuration file will be located at <code>config/pennant.php</code>. This configuration file allows you to specify the default storage mechanism that will be used by Pennant to store resolved feature flag values.</p><p>Pennant includes support for storing resolved feature flag values in an in-memory array via the <code>array</code> driver. Or, Pennant can store resolved feature flag values persistently in a relational database via the <code>database</code> driver, which is the default storage mechanism used by Pennant.</p><p><a name="defining-features"></a></p><h2 id="defining-features" tabindex="-1"><a class="header-anchor" href="#defining-features" aria-hidden="true">#</a> Defining Features</h2><p>To define a feature, you may use the <code>define</code> method offered by the <code>Feature</code> facade. You will need to provide a name for the feature, as well as a closure that will be invoked to resolve the feature&#39;s initial value.</p><p>Typically, features are defined in a service provider using the <code>Feature</code> facade. The closure will receive the &quot;scope&quot; for the feature check. Most commonly, the scope is the currently authenticated user. In this example, we will define a feature for incrementally rolling out a new API to our application&#39;s users:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Providers</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>User</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Lottery</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>ServiceProvider</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Pennant<span class="token punctuation">\\</span>Feature</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">AppServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceProvider</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * Bootstrap any application services.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
    <span class="token punctuation">{</span>
        <span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;new-api&#39;</span><span class="token punctuation">,</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">User</span> <span class="token variable">$user</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">match</span> <span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">isInternalTeamMember</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>
            <span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">isHighTrafficCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>
            <span class="token keyword">default</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">Lottery</span><span class="token operator">::</span><span class="token function">odds</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, we have the following rules for our feature:</p><ul><li>All internal team members should be using the new API.</li><li>Any high traffic customers should not be using the new API.</li><li>Otherwise, the feature should be randomly assigned to users with a 1 in 100 chance of being active.</li></ul><p>The first time the <code>new-api</code> feature is checked for a given user, the result of the closure will be stored by the storage driver. The next time the feature is checked against the same user, the value will be retrieved from storage and the closure will not be invoked.</p><p>For convenience, if a feature definition only returns a lottery, you may omit the closure completely:</p><pre><code>Feature::define(&#39;site-redesign&#39;, Lottery::odds(1, 1000));
</code></pre><p><a name="class-based-features"></a></p><h3 id="class-based-features" tabindex="-1"><a class="header-anchor" href="#class-based-features" aria-hidden="true">#</a> Class Based Features</h3><p>Pennant also allows you to define class based features. Unlike closure based feature definitions, there is no need to register a class based feature in a service provider. To create a class based feature, you may invoke the <code>pennant:feature</code> Artisan command. By default the feature class will be placed in your application&#39;s <code>app/Features</code> directory:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan pennant:feature NewApi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>When writing a feature class, you only need to define a <code>resolve</code> method, which will be invoked to resolve the feature&#39;s initial value for a given scope. Again, the scope will typically be the currently authenticated user:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Features</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Lottery</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">NewApi</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * Resolve the feature&#39;s initial value.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">resolve</span><span class="token punctuation">(</span><span class="token class-name type-declaration">User</span> <span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">mixed</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">match</span> <span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">isInternalTeamMember</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>
            <span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">isHighTrafficCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>
            <span class="token keyword">default</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">Lottery</span><span class="token operator">::</span><span class="token function">odds</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>Note</strong> Feature classes are resolved via the <a href="./container">container</a>, so you may inject dependencies into the feature class&#39;s constructor when needed.</p></blockquote><p><a name="checking-features"></a></p><h2 id="checking-features" tabindex="-1"><a class="header-anchor" href="#checking-features" aria-hidden="true">#</a> Checking Features</h2><p>To determine if a feature is active, you may use the <code>active</code> method on the <code>Feature</code> facade. By default, features are checked against the currently authenticated user:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Controllers</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Response</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Pennant<span class="token punctuation">\\</span>Feature</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">PodcastController</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * Display a listing of the resource.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Response</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">active</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;new-api&#39;</span><span class="token punctuation">)</span>
                <span class="token operator">?</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">resolveNewApiResponse</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span>
                <span class="token punctuation">:</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">resolveLegacyApiResponse</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Although features are checked against the currently authenticated user by default, you may easily check the feature against another user or <a href="#scope">scope</a>. To accomplish this, use the <code>for</code> method offered by the <code>Feature</code> facade:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">active</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;new-api&#39;</span><span class="token punctuation">)</span>
        <span class="token operator">?</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">resolveNewApiResponse</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span>
        <span class="token punctuation">:</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">resolveLegacyApiResponse</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pennant also offers some additional convenience methods that may prove useful when determining if a feature is active or not:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Determine if all of the given features are active...</span>
<span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">allAreActive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;new-api&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;site-redesign&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Determine if any of the given features are active...</span>
<span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">someAreActive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;new-api&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;site-redesign&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Determine if a feature is inactive...</span>
<span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">inactive</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;new-api&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Determine if all of the given features are inactive...</span>
<span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">allAreInactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;new-api&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;site-redesign&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Determine if any of the given features are inactive...</span>
<span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">someAreInactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;new-api&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;site-redesign&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>Note</strong> When using Pennant outside of an HTTP context, such as in an Artisan command or a queued job, you should typically <a href="#specifying-the-scope">explicitly specify the feature&#39;s scope</a>. Alternatively, you may define a <a href="#default-scope">default scope</a> that accounts for both authenticated HTTP contexts and unauthenticated contexts.</p></blockquote><p><a name="checking-class-based-features"></a></p><h4 id="checking-class-based-features" tabindex="-1"><a class="header-anchor" href="#checking-class-based-features" aria-hidden="true">#</a> Checking Class Based Features</h4><p>For class based features, you should provide the class name when checking the feature:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Controllers</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Features<span class="token punctuation">\\</span>NewApi</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Response</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Pennant<span class="token punctuation">\\</span>Feature</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">PodcastController</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * Display a listing of the resource.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Response</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">active</span><span class="token punctuation">(</span><span class="token class-name static-context">NewApi</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token operator">?</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">resolveNewApiResponse</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span>
                <span class="token punctuation">:</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">resolveLegacyApiResponse</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="conditional-execution"></a></p><h3 id="conditional-execution" tabindex="-1"><a class="header-anchor" href="#conditional-execution" aria-hidden="true">#</a> Conditional Execution</h3><p>The <code>when</code> method may be used to fluently execute a given closure if a feature is active. Additionally, a second closure may be provided and will be executed if the feature is inactive:</p><pre><code>&lt;?php

namespace App\\Http\\Controllers;

use App\\Features\\NewApi;
use Illuminate\\Http\\Request;
use Illuminate\\Http\\Response;
use Laravel\\Pennant\\Feature;

class PodcastController
{
    /**
     * Display a listing of the resource.
     */
    public function index(Request $request): Response
    {
        return Feature::when(NewApi::class,
            fn () =&gt; $this-&gt;resolveNewApiResponse($request),
            fn () =&gt; $this-&gt;resolveLegacyApiResponse($request),
        );
    }

    // ...
}
</code></pre><p>The <code>unless</code> method serves as the inverse of the <code>when</code> method, executing the first closure if the feature is inactive:</p><pre><code>return Feature::unless(NewApi::class,
    fn () =&gt; $this-&gt;resolveLegacyApiResponse($request),
    fn () =&gt; $this-&gt;resolveNewApiResponse($request),
);
</code></pre><p><a name="the-has-features-trait"></a></p><h3 id="the-hasfeatures-trait" tabindex="-1"><a class="header-anchor" href="#the-hasfeatures-trait" aria-hidden="true">#</a> The <code>HasFeatures</code> Trait</h3><p>Pennant&#39;s <code>HasFeatures</code> trait may be added to your application&#39;s <code>User</code> model (or any other model that has features) to provide a fluent, convenient way to check features directly from the model:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Models</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Auth<span class="token punctuation">\\</span>User</span> <span class="token keyword">as</span> Authenticatable<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Pennant<span class="token punctuation">\\</span>Concerns<span class="token punctuation">\\</span>HasFeatures</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Authenticatable</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">HasFeatures</span><span class="token punctuation">;</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Once the trait has been added to your model, you may easily check features by invoking the <code>features</code> method:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">features</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">active</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;new-api&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Of course, the <code>features</code> method provides access to many other convenient methods for interacting with features:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Values...</span>
<span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">features</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;purchase-button&#39;</span><span class="token punctuation">)</span>
<span class="token variable">$values</span> <span class="token operator">=</span> <span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">features</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;new-api&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;purchase-button&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// State...</span>
<span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">features</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">active</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;new-api&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">features</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">allAreActive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;new-api&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;server-api&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">features</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">someAreActive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;new-api&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;server-api&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">features</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">inactive</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;new-api&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">features</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">allAreInactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;new-api&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;server-api&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">features</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">someAreInactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;new-api&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;server-api&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Conditional execution...</span>
<span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">features</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;new-api&#39;</span><span class="token punctuation">,</span>
    <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token comment">/* ... */</span><span class="token punctuation">,</span>
    <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token comment">/* ... */</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">features</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">unless</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;new-api&#39;</span><span class="token punctuation">,</span>
    <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token comment">/* ... */</span><span class="token punctuation">,</span>
    <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token comment">/* ... */</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="blade-directive"></a></p><h3 id="blade-directive" tabindex="-1"><a class="header-anchor" href="#blade-directive" aria-hidden="true">#</a> Blade Directive</h3><p>To make checking features in Blade a seamless experience, Pennant offers a <code>@feature</code> directive:</p><div class="language-blade line-numbers-mode" data-ext="blade"><pre class="language-blade"><code>@feature(&#39;site-redesign&#39;)
    &lt;!-- &#39;site-redesign&#39; is active --&gt;
@else
    &lt;!-- &#39;site-redesign&#39; is inactive --&gt;
@endfeature
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="middleware"></a></p><h3 id="middleware" tabindex="-1"><a class="header-anchor" href="#middleware" aria-hidden="true">#</a> Middleware</h3><p>Pennant also includes a <a href="./middleware">middleware</a> that may be used to verify the currently authenticated user has access to a feature before a route is even invoked. You may assign the middleware to a route and specify the features that are required to access the route. If any of the specified features are inactive for the currently authenticated user, a <code>400 Bad Request</code> HTTP response will be returned by the route. Multiple features may be passed to the static <code>using</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Route</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Pennant<span class="token punctuation">\\</span>Middleware<span class="token punctuation">\\</span>EnsureFeaturesAreActive</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/api/servers&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token class-name static-context">EnsureFeaturesAreActive</span><span class="token operator">::</span><span class="token function">using</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;new-api&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;servers-api&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="customizing-the-response"></a></p><h4 id="customizing-the-response" tabindex="-1"><a class="header-anchor" href="#customizing-the-response" aria-hidden="true">#</a> Customizing The Response</h4><p>If you would like to customize the response that is returned by the middleware when one of the listed features is inactive, you may use the <code>whenInactive</code> method provided by the <code>EnsureFeaturesAreActive</code> middleware. Typically, this method should be invoked within the <code>boot</code> method of one of your application&#39;s service providers:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Response</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Pennant<span class="token punctuation">\\</span>Middleware<span class="token punctuation">\\</span>EnsureFeaturesAreActive</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Bootstrap any application services.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
<span class="token punctuation">{</span>
    <span class="token class-name static-context">EnsureFeaturesAreActive</span><span class="token operator">::</span><span class="token function">whenInactive</span><span class="token punctuation">(</span>
        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$features</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token argument-name">status</span><span class="token punctuation">:</span> <span class="token number">403</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="in-memory-cache"></a></p><h3 id="in-memory-cache" tabindex="-1"><a class="header-anchor" href="#in-memory-cache" aria-hidden="true">#</a> In-Memory Cache</h3><p>When checking a feature, Pennant will create an in-memory cache of the result. If you are using the <code>database</code> driver, this means that re-checking the same feature flag within a single request will not trigger additional database queries. This also ensures that the feature has a consistent result for the duration of the request.</p><p>If you need to manually flush the in-memory cache, you may use the <code>flushCache</code> method offered by the <code>Feature</code> facade:</p><pre><code>Feature::flushCache();
</code></pre><p><a name="scope"></a></p><h2 id="scope" tabindex="-1"><a class="header-anchor" href="#scope" aria-hidden="true">#</a> Scope</h2><p><a name="specifying-the-scope"></a></p><h3 id="specifying-the-scope" tabindex="-1"><a class="header-anchor" href="#specifying-the-scope" aria-hidden="true">#</a> Specifying The Scope</h3><p>As discussed, features are typically checked against the currently authenticated user. However, this may not always suit your needs. Therefore, it is possible to specify the scope you would like to check a given feature against via the <code>Feature</code> facade&#39;s <code>for</code> method:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">active</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;new-api&#39;</span><span class="token punctuation">)</span>
        <span class="token operator">?</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">resolveNewApiResponse</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span>
        <span class="token punctuation">:</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">resolveLegacyApiResponse</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Of course, feature scopes are not limited to &quot;users&quot;. Imagine you have built a new billing experience that you are rolling out to entire teams rather than individual users. Perhaps you would like the oldest teams to have a slower rollout than the newer teams. Your feature resolution closure might look something like the following:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Team</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Carbon<span class="token punctuation">\\</span>Carbon</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Lottery</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Pennant<span class="token punctuation">\\</span>Feature</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;billing-v2&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Team</span> <span class="token variable">$team</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$team</span><span class="token operator">-&gt;</span><span class="token property">created_at</span><span class="token operator">-&gt;</span><span class="token function">isAfter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Carbon</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;1st Jan, 2023&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$team</span><span class="token operator">-&gt;</span><span class="token property">created_at</span><span class="token operator">-&gt;</span><span class="token function">isAfter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Carbon</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;1st Jan, 2019&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name static-context">Lottery</span><span class="token operator">::</span><span class="token function">odds</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token class-name static-context">Lottery</span><span class="token operator">::</span><span class="token function">odds</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You will notice that the closure we have defined is not expecting a <code>User</code>, but is instead expecting a <code>Team</code> model. To determine if this feature is active for a user&#39;s team, you should pass the team to the <code>for</code> method offered by the <code>Feature</code> facade:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token property">team</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">active</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;billing-v2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">redirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/billing/v2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="default-scope"></a></p><h3 id="default-scope" tabindex="-1"><a class="header-anchor" href="#default-scope" aria-hidden="true">#</a> Default Scope</h3><p>It is also possible to customize the default scope Pennant uses to check features. For example, maybe all of your features are checked against the currently authenticated user&#39;s team instead of the user. Instead of having to call <code>Feature::for($user-&gt;team)</code> every time you check a feature, you may instead specify the team as the default scope. Typically, this should be done in one of your application&#39;s service providers:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Providers</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Auth</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>ServiceProvider</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Pennant<span class="token punctuation">\\</span>Feature</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">AppServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceProvider</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * Bootstrap any application services.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
    <span class="token punctuation">{</span>
        <span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">resolveScopeUsing</span><span class="token punctuation">(</span><span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token variable">$driver</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">Auth</span><span class="token operator">::</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?-&gt;</span><span class="token property">team</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If no scope is explicitly provided via the <code>for</code> method, the feature check will now use the currently authenticated user&#39;s team as the default scope:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">active</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;billing-v2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Is now equivalent to...</span>

<span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token property">team</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">active</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;billing-v2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="nullable-scope"></a></p><h3 id="nullable-scope" tabindex="-1"><a class="header-anchor" href="#nullable-scope" aria-hidden="true">#</a> Nullable Scope</h3><p>If the scope you provide when checking a feature is <code>null</code> and the feature&#39;s definition does not support <code>null</code> via a nullable type or by including <code>null</code> in a union type, Pennant will automatically return <code>false</code> as the feature&#39;s result value.</p><p>So, if the scope you are passing to a feature is potentially <code>null</code> and you want the feature&#39;s value resolver to be invoked, you should account for that in your feature&#39;s definition. A <code>null</code> scope may occur if you check a feature within an Artisan command, queued job, or unauthenticated route. Since there is usually not an authenticated user in these contexts, the default scope will be <code>null</code>.</p><p>If you do not always <a href="#specifying-the-scope">explicitly specify your feature scope</a> then you should ensure the scope&#39;s type is &quot;nullable&quot; and handle the <code>null</code> scope value within your feature definition logic:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>User</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Lottery</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Pennant<span class="token punctuation">\\</span>Feature</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;new-api&#39;</span><span class="token punctuation">,</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">User</span> <span class="token variable">$user</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">match</span> <span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// [tl! remove]</span>
<span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;new-api&#39;</span><span class="token punctuation">,</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$user</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">match</span> <span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// [tl! add]</span>
    <span class="token variable">$user</span> <span class="token operator">===</span> <span class="token constant">null</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span><span class="token comment">// [tl! add]</span>
    <span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">isInternalTeamMember</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>
    <span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">isHighTrafficCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>
    <span class="token keyword">default</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">Lottery</span><span class="token operator">::</span><span class="token function">odds</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="identifying-scope"></a></p><h3 id="identifying-scope" tabindex="-1"><a class="header-anchor" href="#identifying-scope" aria-hidden="true">#</a> Identifying Scope</h3><p>Pennant&#39;s built-in <code>array</code> and <code>database</code> storage drivers know how to properly store scope identifiers for all PHP data types as well as Eloquent models. However, if your application utilizes a third-party Pennant driver, that driver may not know how to properly store an identifier for an Eloquent model or other custom types in your application.</p><p>In light of this, Pennant allows you to format scope values for storage by implementing the <code>FeatureScopeable</code> contract on the objects in your application that are used as Pennant scopes.</p><p>For example, imagine you are using two different feature drivers in a single application: the built-in <code>database</code> driver and a third-party &quot;Flag Rocket&quot; driver. The &quot;Flag Rocket&quot; driver does not know how to properly store an Eloquent model. Instead, it requires a <code>FlagRocketUser</code> instance. By implementing the <code>toFeatureIdentifier</code> defined by the <code>FeatureScopeable</code> contract, we can customize the storable scope value provided to each driver used by our application:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Models</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">FlagRocket<span class="token punctuation">\\</span>FlagRocketUser</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Model</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Pennant<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>FeatureScopeable</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token keyword">implements</span> <span class="token class-name">FeatureScopeable</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * Cast the object to a feature scope identifier for the given driver.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">toFeatureIdentifier</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$driver</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">mixed</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">match</span><span class="token punctuation">(</span><span class="token variable">$driver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token string single-quoted-string">&#39;database&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$this</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;flag-rocket&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">FlagRocketUser</span><span class="token operator">::</span><span class="token function">fromId</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">flag_rocket_id</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="serializing-scope"></a></p><h3 id="serializing-scope" tabindex="-1"><a class="header-anchor" href="#serializing-scope" aria-hidden="true">#</a> Serializing Scope</h3><p>By default, Pennant will use a fully qualified class name when storing a feature associated with an Eloquent model. If you are already using an <a href="./eloquent-relationships#custom-polymorphic-types">Eloquent morph map</a>, you may choose to have Pennant also use the morph map to decouple the stored feature from your application structure.</p><p>To achieve this, after defining your Eloquent morph map in a service provider, you may invoke the <code>Feature</code> facade&#39;s <code>useMorphMap</code> method:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Relations<span class="token punctuation">\\</span>Relation</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Pennant<span class="token punctuation">\\</span>Feature</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Relation</span><span class="token operator">::</span><span class="token function">enforceMorphMap</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;post&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;App\\Models\\Post&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;video&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;App\\Models\\Video&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">useMorphMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="rich-feature-values"></a></p><h2 id="rich-feature-values" tabindex="-1"><a class="header-anchor" href="#rich-feature-values" aria-hidden="true">#</a> Rich Feature Values</h2><p>Until now, we have primarily shown features as being in a binary state, meaning they are either &quot;active&quot; or &quot;inactive&quot;, but Pennant also allows you to store rich values as well.</p><p>For example, imagine you are testing three new colors for the &quot;Buy now&quot; button of your application. Instead of returning <code>true</code> or <code>false</code> from the feature definition, you may instead return a string:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Arr</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Pennant<span class="token punctuation">\\</span>Feature</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;purchase-button&#39;</span><span class="token punctuation">,</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">User</span> <span class="token variable">$user</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">Arr</span><span class="token operator">::</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;blue-sapphire&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;seafoam-green&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;tart-orange&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You may retrieve the value of the <code>purchase-button</code> feature using the <code>value</code> method:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$color</span> <span class="token operator">=</span> <span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;purchase-button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Pennant&#39;s included Blade directive also makes it easy to conditionally render content based on the current value of the feature:</p><div class="language-blade line-numbers-mode" data-ext="blade"><pre class="language-blade"><code>@feature(&#39;purchase-button&#39;, &#39;blue-sapphire&#39;)
    &lt;!-- &#39;blue-sapphire&#39; is active --&gt;
@elsefeature(&#39;purchase-button&#39;, &#39;seafoam-green&#39;)
    &lt;!-- &#39;seafoam-green&#39; is active --&gt;
@elsefeature(&#39;purchase-button&#39;, &#39;tart-orange&#39;)
    &lt;!-- &#39;tart-orange&#39; is active --&gt;
@endfeature
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>Note</strong> When using rich values, it is important to know that a feature is considered &quot;active&quot; when it has any value other than <code>false</code>.</p></blockquote><p>When calling the <a href="#conditional-execution">conditional <code>when</code></a> method, the feature&#39;s rich value will be provided to the first closure:</p><pre><code>Feature::when(&#39;purchase-button&#39;,
    fn ($color) =&gt; /* ... */,
    fn () =&gt; /* ... */,
);
</code></pre><p>Likewise, when calling the conditional <code>unless</code> method, the feature&#39;s rich value will be provided to the optional second closure:</p><pre><code>Feature::unless(&#39;purchase-button&#39;,
    fn () =&gt; /* ... */,
    fn ($color) =&gt; /* ... */,
);
</code></pre><p><a name="retrieving-multiple-features"></a></p><h2 id="retrieving-multiple-features" tabindex="-1"><a class="header-anchor" href="#retrieving-multiple-features" aria-hidden="true">#</a> Retrieving Multiple Features</h2><p>The <code>values</code> method allows the retrieval of multiple features for a given scope:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;billing-v2&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;purchase-button&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// [</span>
<span class="token comment">//     &#39;billing-v2&#39; =&gt; false,</span>
<span class="token comment">//     &#39;purchase-button&#39; =&gt; &#39;blue-sapphire&#39;,</span>
<span class="token comment">// ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or, you may use the <code>all</code> method to retrieve the values of all defined features for a given scope:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// [</span>
<span class="token comment">//     &#39;billing-v2&#39; =&gt; false,</span>
<span class="token comment">//     &#39;purchase-button&#39; =&gt; &#39;blue-sapphire&#39;,</span>
<span class="token comment">//     &#39;site-redesign&#39; =&gt; true,</span>
<span class="token comment">// ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, class based features are dynamically registered and are not known by Pennant until they are explicitly checked. This means your application&#39;s class based features may not appear in the results returned by the <code>all</code> method if they have not already been checked during the current request.</p><p>If you would like to ensure that feature classes are always included when using the <code>all</code> method, you may use Pennant&#39;s feature discovery capabilities. To get started, invoke the <code>discover</code> method in one of your application&#39;s service providers:</p><pre><code>&lt;?php

namespace App\\Providers;

use Illuminate\\Support\\ServiceProvider;
use Laravel\\Pennant\\Feature;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        Feature::discover();

        // ...
    }
}
</code></pre><p>The <code>discover</code> method will register all of the feature classes in your application&#39;s <code>app/Features</code> directory. The <code>all</code> method will now include these classes in its results, regardless of whether they have been checked during the current request:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// [</span>
<span class="token comment">//     &#39;App\\Features\\NewApi&#39; =&gt; true,</span>
<span class="token comment">//     &#39;billing-v2&#39; =&gt; false,</span>
<span class="token comment">//     &#39;purchase-button&#39; =&gt; &#39;blue-sapphire&#39;,</span>
<span class="token comment">//     &#39;site-redesign&#39; =&gt; true,</span>
<span class="token comment">// ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="eager-loading"></a></p><h2 id="eager-loading" tabindex="-1"><a class="header-anchor" href="#eager-loading" aria-hidden="true">#</a> Eager Loading</h2><p>Although Pennant keeps an in-memory cache of all resolved features for a single request, it is still possible to encounter performance issues. To alleviate this, Pennant offers the ability to eager load feature values.</p><p>To illustrate this, imagine that we are checking if a feature is active within a loop:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Pennant<span class="token punctuation">\\</span>Feature</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$users</span> <span class="token keyword">as</span> <span class="token variable">$user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">active</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;notifications-beta&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegistrationSuccess</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Assuming we are using the database driver, this code will execute a database query for every user in the loop - executing potentially hundreds of queries. However, using Pennant&#39;s <code>load</code> method, we can remove this potential performance bottleneck by eager loading the feature values for a collection of users or scopes:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token variable">$users</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;notifications-beta&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$users</span> <span class="token keyword">as</span> <span class="token variable">$user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">active</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;notifications-beta&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegistrationSuccess</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To load feature values only when they have not already been loaded, you may use the <code>loadMissing</code> method:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token variable">$users</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">loadMissing</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;new-api&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;purchase-button&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;notifications-beta&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="updating-values"></a></p><h2 id="updating-values" tabindex="-1"><a class="header-anchor" href="#updating-values" aria-hidden="true">#</a> Updating Values</h2><p>When a feature&#39;s value is resolved for the first time, the underlying driver will store the result in storage. This is often necessary to ensure a consistent experience for your users across requests. However, at times, you may want to manually update the feature&#39;s stored value.</p><p>To accomplish this, you may use the <code>activate</code> and <code>deactivate</code> methods to toggle a feature &quot;on&quot; or &quot;off&quot;:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Pennant<span class="token punctuation">\\</span>Feature</span><span class="token punctuation">;</span>

<span class="token comment">// Activate the feature for the default scope...</span>
<span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">activate</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;new-api&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Deactivate the feature for the given scope...</span>
<span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token property">team</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">deactivate</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;billing-v2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It is also possible to manually set a rich value for a feature by providing a second argument to the <code>activate</code> method:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">activate</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;purchase-button&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;seafoam-green&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>To instruct Pennant to forget the stored value for a feature, you may use the <code>forget</code> method. When the feature is checked again, Pennant will resolve the feature&#39;s value from its feature definition:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">forget</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;purchase-button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="bulk-updates"></a></p><h3 id="bulk-updates" tabindex="-1"><a class="header-anchor" href="#bulk-updates" aria-hidden="true">#</a> Bulk Updates</h3><p>To update stored feature values in bulk, you may use the <code>activateForEveryone</code> and <code>deactivateForEveryone</code> methods.</p><p>For example, imagine you are now confident in the <code>new-api</code> feature&#39;s stability and have landed on the best <code>&#39;purchase-button&#39;</code> color for your checkout flow - you can update the stored value for all users accordingly:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Pennant<span class="token punctuation">\\</span>Feature</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">activateForEveryone</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;new-api&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">activateForEveryone</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;purchase-button&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;seafoam-green&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Alternatively, you may deactivate the feature for all users:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">deactivateForEveryone</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;new-api&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><strong>Note</strong> This will only update the resolved feature values that have been stored by Pennant&#39;s storage driver. You will also need to update the feature definition in your application.</p></blockquote><p><a name="purging-features"></a></p><h3 id="purging-features" tabindex="-1"><a class="header-anchor" href="#purging-features" aria-hidden="true">#</a> Purging Features</h3><p>Sometimes, it can be useful to purge an entire feature from storage. This is typically necessary if you have removed the feature from your application or you have made adjustments to the feature&#39;s definition that you would like to rollout to all users.</p><p>You may remove all stored values for a feature using the <code>purge</code> method:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Purging a single feature...</span>
<span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">purge</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;new-api&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Purging multiple features...</span>
<span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">purge</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;new-api&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;purchase-button&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you would like to purge <em>all</em> features from storage, you may invoke the <code>purge</code> method without any arguments:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">purge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>As it can be useful to purge features as part of your application&#39;s deployment pipeline, Pennant includes a <code>pennant:purge</code> Artisan command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan pennant:purge new-api

php artisan pennant:purge new-api purchase-button
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="testing"></a></p><h2 id="testing" tabindex="-1"><a class="header-anchor" href="#testing" aria-hidden="true">#</a> Testing</h2><p>When testing code that interacts with feature flags, the easiest way to control the feature flag&#39;s returned value in your tests is to simply re-define the feature. For example, imagine you have the following feature defined in one of your application&#39;s service provider:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Arr</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Pennant<span class="token punctuation">\\</span>Feature</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;purchase-button&#39;</span><span class="token punctuation">,</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">Arr</span><span class="token operator">::</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;blue-sapphire&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;seafoam-green&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;tart-orange&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To modify the feature&#39;s returned value in your tests, you may re-define the feature at the beginning of the test. The following test will always pass, even though the <code>Arr::random()</code> implementation is still present in the service provider:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Pennant<span class="token punctuation">\\</span>Feature</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test_it_can_control_feature_values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;purchase-button&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;seafoam-green&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertSame</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;seafoam-green&#39;</span><span class="token punctuation">,</span> <span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;purchase-button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The same approach may be used for class based features:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Features<span class="token punctuation">\\</span>NewApi</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Pennant<span class="token punctuation">\\</span>Feature</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test_it_can_control_feature_values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token class-name static-context">NewApi</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token class-name static-context">NewApi</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If your feature is returning a <code>Lottery</code> instance, there are a handful of useful <a href="./helpers#testing-lotteries">testing helpers available</a>.</p><p><a name="store-configuration"></a></p><h4 id="store-configuration" tabindex="-1"><a class="header-anchor" href="#store-configuration" aria-hidden="true">#</a> Store Configuration</h4><p>You may configure the store that Pennant will use during testing by defining the <code>PENNANT_STORE</code> environment variable in your application&#39;s <code>phpunit.xml</code> file:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phpunit</span> <span class="token attr-name">colors</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- ... --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>php</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>env</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>PENNANT_STORE<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>array<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token comment">&lt;!-- ... --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>php</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phpunit</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="adding-custom-pennant-drivers"></a></p><h2 id="adding-custom-pennant-drivers" tabindex="-1"><a class="header-anchor" href="#adding-custom-pennant-drivers" aria-hidden="true">#</a> Adding Custom Pennant Drivers</h2><p><a name="implementing-the-driver"></a></p><h4 id="implementing-the-driver" tabindex="-1"><a class="header-anchor" href="#implementing-the-driver" aria-hidden="true">#</a> Implementing The Driver</h4><p>If none of Pennant&#39;s existing storage drivers fit your application&#39;s needs, you may write your own storage driver. Your custom driver should implement the <code>Laravel\\Pennant\\Contracts\\Driver</code> interface:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Extensions</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Pennant<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Driver</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">RedisFeatureDriver</span> <span class="token keyword">implements</span> <span class="token class-name">Driver</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">define</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$feature</span><span class="token punctuation">,</span> <span class="token keyword type-hint">callable</span> <span class="token variable">$resolver</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">defined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getAll</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$features</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">get</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$feature</span><span class="token punctuation">,</span> <span class="token keyword type-hint">mixed</span> <span class="token variable">$scope</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">mixed</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">set</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$feature</span><span class="token punctuation">,</span> <span class="token keyword type-hint">mixed</span> <span class="token variable">$scope</span><span class="token punctuation">,</span> <span class="token keyword type-hint">mixed</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setForAllScopes</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$feature</span><span class="token punctuation">,</span> <span class="token keyword type-hint">mixed</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">delete</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$feature</span><span class="token punctuation">,</span> <span class="token keyword type-hint">mixed</span> <span class="token variable">$scope</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">purge</span><span class="token punctuation">(</span><span class="token keyword type-declaration">array</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$features</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,185),k=s("code",null,"Laravel\\Pennant\\Drivers\\DatabaseDriver",-1),v={href:"https://github.com/laravel/pennant/blob/1.x/src/Drivers/DatabaseDriver.php",target:"_blank",rel:"noopener noreferrer"},m=a(`<blockquote><p><strong>Note</strong> Laravel does not ship with a directory to contain your extensions. You are free to place them anywhere you like. In this example, we have created an <code>Extensions</code> directory to house the <code>RedisFeatureDriver</code>.</p></blockquote><p><a name="registering-the-driver"></a></p><h4 id="registering-the-driver" tabindex="-1"><a class="header-anchor" href="#registering-the-driver" aria-hidden="true">#</a> Registering The Driver</h4><p>Once your driver has been implemented, you are ready to register it with Laravel. To add additional drivers to Pennant, you may use the <code>extend</code> method provided by the <code>Feature</code> facade. You should call the <code>extend</code> method from the <code>boot</code> method of one of your application&#39;s <a href="./providers">service provider</a>:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Providers</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Extensions<span class="token punctuation">\\</span>RedisFeatureDriver</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Application</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>ServiceProvider</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Pennant<span class="token punctuation">\\</span>Feature</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">AppServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceProvider</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * Register any application services.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Bootstrap any application services.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
    <span class="token punctuation">{</span>
        <span class="token class-name static-context">Feature</span><span class="token operator">::</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;redis&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Application</span> <span class="token variable">$app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RedisFeatureDriver</span><span class="token punctuation">(</span><span class="token variable">$app</span><span class="token operator">-&gt;</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;redis&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$app</span><span class="token operator">-&gt;</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;events&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Once the driver has been registered, you may use the <code>redis</code> driver in your application&#39;s <code>config/pennant.php</code> configuration file:</p><pre><code>&#39;stores&#39; =&gt; [

    &#39;redis&#39; =&gt; [
        &#39;driver&#39; =&gt; &#39;redis&#39;,
        &#39;connection&#39; =&gt; null,
    ],

    // ...

],
</code></pre><p><a name="events"></a></p><h2 id="events" tabindex="-1"><a class="header-anchor" href="#events" aria-hidden="true">#</a> Events</h2><p>Pennant dispatches a variety of events that can be useful when tracking feature flags throughout your application.</p><h3 id="laravel-pennant-events-retrievingknownfeature" tabindex="-1"><a class="header-anchor" href="#laravel-pennant-events-retrievingknownfeature" aria-hidden="true">#</a> <code>Laravel\\Pennant\\Events\\RetrievingKnownFeature</code></h3><p>This event is dispatched the first time a known feature is retrieved during a request for a specific scope. This event can be useful to create and track metrics against the feature flags that are being used throughout your application.</p><h3 id="laravel-pennant-events-retrievingunknownfeature" tabindex="-1"><a class="header-anchor" href="#laravel-pennant-events-retrievingunknownfeature" aria-hidden="true">#</a> <code>Laravel\\Pennant\\Events\\RetrievingUnknownFeature</code></h3><p>This event is dispatched the first time an unknown feature is retrieved during a request for a specific scope. This event can be useful if you have intended to remove a feature flag, but may have accidentally left some stray references to it throughout your application.</p><p>For example, you may find it useful to listen for this event and <code>report</code> or throw an exception when it occurs:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Providers</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Providers<span class="token punctuation">\\</span>EventServiceProvider</span> <span class="token keyword">as</span> ServiceProvider<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Event</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\\</span>Pennant<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>RetrievingUnknownFeature</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">EventServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceProvider</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * Register any other events for your application.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
    <span class="token punctuation">{</span>
        <span class="token class-name static-context">Event</span><span class="token operator">::</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">RetrievingUnknownFeature</span> <span class="token variable">$event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">report</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Resolving unknown feature [<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$event</span><span class="token operator">-&gt;</span><span class="token property">feature</span><span class="token punctuation">}</span></span>].&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="laravel-pennant-events-dynamicallydefiningfeature" tabindex="-1"><a class="header-anchor" href="#laravel-pennant-events-dynamicallydefiningfeature" aria-hidden="true">#</a> <code>Laravel\\Pennant\\Events\\DynamicallyDefiningFeature</code></h3><p>This event is dispatched when a class based feature is being dynamically checked for the first time during a request.</p>`,18);function h(g,b){const e=o("ExternalLinkIcon");return i(),c("div",null,[u,s("p",null,[s("a",r,[n("Laravel Pennant"),t(e)]),n(" is a simple and light-weight feature flag package - without the cruft. Feature flags enable you to incrementally roll out new application features with confidence, A/B test new interface designs, complement a trunk-based development strategy, and much more.")]),d,s("p",null,[n("Now, we just need to implement each of these methods using a Redis connection. For an example of how to implement each of these methods, take a look at the "),k,n(" in the "),s("a",v,[n("Pennant source code"),t(e)])]),m])}const w=p(l,[["render",h],["__file","pennant.html.vue"]]);export{w as default};
