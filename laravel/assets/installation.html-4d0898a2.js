import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as t,c as i,b as e,d as a,e as r,a as s}from"./app-8cdff07c.js";const d={},c=s('<h1 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h1><ul><li><a href="#meet-laravel">认识 Laravel</a><ul><li><a href="#why-laravel">为什么选择 Laravel?</a></li></ul></li><li><a href="#your-first-laravel-project">你的第一个 Laravel 项目</a></li><li><a href="#laravel-and-docker">Laravel &amp; Docker</a><ul><li><a href="#getting-started-on-macos">macOS 入门</a></li><li><a href="#getting-started-on-windows">Windows 入门</a></li><li><a href="#getting-started-on-linux">Linux 入门</a></li><li><a href="#choosing-your-sail-services">选择 Sail 服务</a></li></ul></li><li><a href="#initial-configuration">初始化</a><ul><li><a href="#environment-based-configuration">基于环境的配置</a></li><li><a href="#databases-and-migrations">目录配置</a></li></ul></li><li><a href="#next-steps">下一步</a><ul><li><a href="#laravel-the-fullstack-framework">将 Laravel 用作全栈框架</a></li><li><a href="#laravel-the-api-backend">将 Laravel 用作 API 后端</a></li></ul></li></ul><p><a name="meet-laravel"></a></p><h2 id="认识-laravel" tabindex="-1"><a class="header-anchor" href="#认识-laravel" aria-hidden="true">#</a> 认识 Laravel</h2><p>Laravel 是一个 Web 应用框架， 有着表现力强、语法优雅的特点。Web 框架为创建应用提供了一个结构和起点，你只需要专注于创造，我们来为你处理细节。</p><p>Laravel 致力于提供出色的开发体验，同时提供强大的特性，例如完全的依赖注入，富有表现力的数据库抽象层，队列和计划任务，单元和集成测试等等。</p><p>无论你是刚刚接触 PHP 和 Web 框架的新人，亦或是有着多年经验的老手， Laravel 都是一个可以与你一同成长的框架。我们将帮助你迈出成为 Web 开发者的第一步，或是将你的经验提高到下一个等级。我们迫不及待的想看看你的作品。</p><p><a name="why-laravel"></a></p><h3 id="为什么选择-laravel" tabindex="-1"><a class="header-anchor" href="#为什么选择-laravel" aria-hidden="true">#</a> 为什么选择 Laravel?</h3><p>有非常多的工具和框架可以被用于构建一个 Web 应用。但我们相信 Laravel 是构建现代化、全栈 Web 应用的最佳选择。</p><h4 id="一个渐进式框架" tabindex="-1"><a class="header-anchor" href="#一个渐进式框架" aria-hidden="true">#</a> 一个渐进式框架</h4>',11),p={href:"https://laracasts.com",target:"_blank",rel:"noopener noreferrer"},h=s('<p>如果你是高级开发人员, Laravel 为你提供了强大的工具用于 <a href="./container">依赖注入</a>、 <a href="./testing">单元测试</a>、 <a href="./queues">队列</a>、 <a href="./broadcasting">广播系统</a> 等等。 Laravel 为构建专业的 Web 应用程序进行了微调，并准备好处理企业工作负载。</p><h4 id="一个可扩展的框架" tabindex="-1"><a class="header-anchor" href="#一个可扩展的框架" aria-hidden="true">#</a> 一个可扩展的框架</h4><p>Laravel 具有难以置信的可扩展性。由于 PHP 的灵活性以及 Laravel 对 Redis 等快速分布式缓存系统的内置支持，使用 Laravel 进行扩展是轻而易举的事。事实上，Laravel 应用程序已经很容易扩展到每月处理数亿个请求。</p>',3),v={href:"https://vapor.laravel.com",target:"_blank",rel:"noopener noreferrer"},u=e("h4",{id:"一个社区化的框架",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#一个社区化的框架","aria-hidden":"true"},"#"),a(" 一个社区化的框架")],-1),m={href:"https://github.com/laravel/framework",target:"_blank",rel:"noopener noreferrer"},b=e("h2",{id:"你的第一个-laravel-项目",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#你的第一个-laravel-项目","aria-hidden":"true"},"#"),a(" 你的第一个 Laravel 项目")],-1),_={href:"https://getcomposer.org",target:"_blank",rel:"noopener noreferrer"},g={href:"https://brew.sh/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://nodejs.org",target:"_blank",rel:"noopener noreferrer"},f=s(`<p>安装 PHP 和 Composer 后，你可以通过<code>create-project</code>命令创建一个新的 Laravel 项目：</p><div class="language-nothing line-numbers-mode" data-ext="nothing"><pre class="language-nothing"><code>composer create-project laravel/laravel example-app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者，你可以通过 Laravel 安装器作为全局 Composer 依赖：</p><div class="language-nothing line-numbers-mode" data-ext="nothing"><pre class="language-nothing"><code>composer global require laravel/installer

laravel new example-app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当应用程序创建完成后，你可以通过 Artisan CLI 的<code>serve</code>命令来启动 Laravel 的本地服务：</p><div class="language-nothing line-numbers-mode" data-ext="nothing"><pre class="language-nothing"><code>cd example-app

php artisan serve
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动 Artisan 开发服务器后，你便可在 Web 浏览器中通过<code>http://localhost:8000</code>访问。 接下来，<a href="#next-steps">你已经准备好开始进入 Laravel 生态系统的下一步</a>。 当然， 你也可能需要 <a href="#databases-and-migrations">配置数据库</a>。</p><blockquote><p><strong>技巧</strong> 如果你想在开发Laravel应用程序时领先一步， 可以考虑使用我们的 <a href="./starter-kits">入门套件</a>。 Laravel 的入门套件为你的新 Laravel 应用程序提供后端和前端身份验证脚手架。</p></blockquote><p><a name="laravel-and-docker"></a></p><h2 id="laravel-docker" tabindex="-1"><a class="header-anchor" href="#laravel-docker" aria-hidden="true">#</a> Laravel &amp; Docker</h2>`,10),L=e("a",{href:"./sail"},"Sail",-1),x={href:"https://www.docker.com",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.docker.com/products/docker-desktop",target:"_blank",rel:"noopener noreferrer"},w=e("p",null,"Laravel Sail 是一个轻量级的命令行界面，用于与 Laravel 的默认 Docker 配置进行交互。Sail 为使用 PHP、MySQL 和 Redis 构建 Laravel 应用程序提供了一个很好的起点，而无需之前的 Docker 经验。",-1),q=e("blockquote",null,[e("p",null,[e("strong",null,"技巧"),a(" 已经是 Docker 专家？别担心！关于 Sail 的一切都可以使用 Laravel 附带的文件 "),e("code",null,"docker-compose.yml"),a(" 进行自定义。")])],-1),D=e("p",null,[e("a",{name:"getting-started-on-macos"})],-1),W=e("h3",{id:"macos-入门",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#macos-入门","aria-hidden":"true"},"#"),a(" macOS 入门")],-1),y={href:"https://www.docker.com/products/docker-desktop",target:"_blank",rel:"noopener noreferrer"},P=s(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token string">&quot;https://laravel.build/example-app&quot;</span> <span class="token operator">|</span> <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当然，你可以将此 URL 中的「example-app」更改为你喜欢的任何内容。Laravel 应用程序的目录将在你执行命令的目录中创建。</p><p>创建项目后，你可以导航到应用程序目录并启动 Laravel Sail。Laravel Sail 提供了一个简单的命令行界面，用于与 Laravel 的默认 Docker 配置进行交互：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> example-app

./vendor/bin/sail up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一次运行 Sail <code>up</code> 命令时， Sail 的应用程序容器将在你的机器上构建。这可能需要几分钟。 <strong>不用担心，随后尝试启动 Sail 会快得多。</strong></p><p>启动应用程序的 Docker 容器后，你可以在 Web 浏览器中访问应用程序： http://localhost 。</p><blockquote><p><strong>技巧</strong> 要继续了解有关 Laravel Sail 的更多信息，请查看其 <a href="./sail">完整文档</a>。</p></blockquote><p><a name="getting-started-on-windows"></a></p><h3 id="windows-入门" tabindex="-1"><a class="header-anchor" href="#windows-入门" aria-hidden="true">#</a> Windows 入门</h3>`,9),N={href:"https://www.docker.com/products/docker-desktop",target:"_blank",rel:"noopener noreferrer"},B={href:"https://docs.microsoft.com/en-us/windows/wsl/install-win10",target:"_blank",rel:"noopener noreferrer"},A=e("strong",null,"技巧",-1),C={href:"https://docs.docker.com/docker-for-windows/wsl/",target:"_blank",rel:"noopener noreferrer"},I=s(`<p>接下来，准备创建你的第一个 Laravel 项目，启动 Windows Terminal，为 WSL2 Linux 操作系统打开一个终端。之后，你可以使用简单的命令来新建 Laravel 项目。比如，想要在「example-app」文件夹中新建 Laravel 应用，可以在终端中运行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-s</span> https://laravel.build/example-app <span class="token operator">|</span> <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当然，你可以将此 URL 中的「example-app」更改为你喜欢的任何内容，只需确保应用程序名称仅包含字母数字字符、破折号和下划线 Laravel 应用程序的目录将在你执行命令的目录中创建。</p><p>Sail 安装可能需要几分钟时间，因为 Sail 的应用程序容器是在你的本地计算机上构建的。</p><p>创建项目后，你可以导航到应用程序目录并启动 Laravel Sail。 Laravel Sail 提供了一个简单的命令行界面来与 Laravel 的默认 Docker 配置进行交互：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> example-app

./vendor/bin/sail up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一旦应用的 Docker 容器启动了，你便可在 Web 浏览器中通过 localhost 访问你的应用了。</p><blockquote><p><strong>技巧</strong> 要继续学习更多关于 Laravel Sail 的知识，请参阅 <a href="./sail">详细文档</a>.</p></blockquote><h4 id="使用-wsl2-进行开发" tabindex="-1"><a class="header-anchor" href="#使用-wsl2-进行开发" aria-hidden="true">#</a> 使用 WSL2 进行开发</h4>`,9),O={href:"https://code.visualstudio.com",target:"_blank",rel:"noopener noreferrer"},R={href:"https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack",target:"_blank",rel:"noopener noreferrer"},j=e("p",null,[a("一旦这些工具成功安装，你可以使用 Windows Terminal 在应用根目录执行 "),e("code",null,"code ."),a(" 命令来打开任何 Laravel 项目。")],-1),E=e("p",null,[e("a",{name:"getting-started-on-linux"})],-1),H=e("h3",{id:"在-linux-使用-laravel-sail",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#在-linux-使用-laravel-sail","aria-hidden":"true"},"#"),a(" 在 Linux 使用 Laravel Sail")],-1),M={href:"https://docs.docker.com/compose/install/",target:"_blank",rel:"noopener noreferrer"},Q=s(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-s</span> https://laravel.build/example-app <span class="token operator">|</span> <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当然，你可以将 URL 中的「example-app」替换为任何你喜欢的内容。Laravel 应用程序的目录将在执行命令的目录中创建。</p><p>在项目创建完成后，你可以导航至应用目录和启动 Laravel Sail。Laravel Sail 提供了一个简单的命令行接口，用于与 Laravel 的默认 Docker 配置进行交互：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> example-app

./vendor/bin/sail up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在你首次运行 Sail 的 <code>up</code> 命令的时候，Sail 的应用容器将会在你的机器上进行编译。这个过程将会花费一段时间。<strong>不要担心，以后就会很快了。</strong></p><p>一旦应用的 Docker 容器启动了，你便可在 Web 浏览器中通过 http://localhost 访问你的应用了。</p><blockquote><p><strong>技巧</strong> 要继续学习更多关于 Laravel Sail 的知识，请参阅 <a href="./sail"> 详细文档</a>。</p></blockquote><p><a name="choosing-your-sail-services"></a></p><h3 id="选择-sail-服务" tabindex="-1"><a class="header-anchor" href="#选择-sail-服务" aria-hidden="true">#</a> 选择 Sail 服务</h3><p>通过 Sail 创建 Laravel 程序时，可以使用 <code>with</code> 查询字符串变量来选择程序的 <code>docker-compose.yml</code> 文件配置哪些服务。可用的服务包括 <code>mysql</code>, <code>pgsql</code>, <code>mariadb</code>, <code>redis</code>, <code>memcached</code>, <code>meilisearch</code>, <code>minio</code>, <code>selenium</code>, 和 <code>mailpit</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token string">&quot;https://laravel.build/example-app?with=mysql,redis&quot;</span> <span class="token operator">|</span> <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果不指定配置服务，将使用 <code>mysql</code>, <code>redis</code>, <code>meilisearch</code>, <code>mailpit</code>, 和 <code>selenium</code> 作为默认配置。</p><p>还可以通过 <code>devcontainer</code>参数添加到 URL 来安装默认的 <a href="./sail#using-devcontainers">Devcontainer</a>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token string">&quot;https://laravel.build/example-app?with=mysql,redis&amp;devcontainer&quot;</span> <span class="token operator">|</span> <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="initial-configuration"></a></p><h2 id="安装配置" tabindex="-1"><a class="header-anchor" href="#安装配置" aria-hidden="true">#</a> 安装配置</h2><p>Laravel 框架将所有的配置文件都放在 <code>config</code> 目录中。每个选项都有一个文件，因此可以浏览文件并熟悉可用的选项。</p><p>Laravel 开箱可用，不需要额外配置，你可以自由的开发！然而，你可能希望查看 <code>config/app.php</code> 文件及其文档。它包含几个选项，例如你可能希望根据程序更改 <code>timezone</code> 和 <code>locale</code>。</p><p><a name="environment-based-configuration"></a></p><h3 id="环境配置" tabindex="-1"><a class="header-anchor" href="#环境配置" aria-hidden="true">#</a> 环境配置</h3><p>Laravel 的许多配置选项值可能会根据运行的环境有所不同，因此许多重要的配置选项值是在 <code>.env</code> 文件中定义的。</p><p>你的 <code>.env</code> 文件不应该提交到应用程序的源代码控制中，因为使用你的应用程序的每个开发者/服务器可能需要不同的环境配置。此外，如果入侵者访问了你的源代码仓库，这将成为安全风险，因为任何敏感数据都会被公开。</p><blockquote><p><strong>注意</strong> 若要了解更多关于 <code>.env</code> 文件和基于环境的配置的信息，请查看完整的 <a href="./configuration#environment-configuration">配置文档</a>。</p></blockquote><p><a name="databases-and-migrations"></a></p><h3 id="数据库和迁移" tabindex="-1"><a class="header-anchor" href="#数据库和迁移" aria-hidden="true">#</a> 数据库和迁移</h3>`,25),T=e("code",null,".env",-1),V=e("code",null,"127.0.0.1",-1),U={href:"https://dbngin.com/",target:"_blank",rel:"noopener noreferrer"},z={href:"https://www.sqlite.org/index.html",target:"_blank",rel:"noopener noreferrer"},J=e("code",null,"database",-1),F=s(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">touch</span> database/database.sqlite
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，更新你的 <code>.env</code> 配置文件以使用 Laravel 的 <code>sqlite</code> 数据库驱动程序。你可以删除其他数据库配置选项：</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token key attr-name">DB_CONNECTION</span><span class="token punctuation">=</span><span class="token value attr-value">sqlite # [tl! add]</span>
<span class="token key attr-name">DB_CONNECTION</span><span class="token punctuation">=</span><span class="token value attr-value">mysql # [tl! remove]</span>
<span class="token key attr-name">DB_HOST</span><span class="token punctuation">=</span><span class="token value attr-value">127.0.0.1 # [tl! remove]</span>
<span class="token key attr-name">DB_PORT</span><span class="token punctuation">=</span><span class="token value attr-value">3306 # [tl! remove]</span>
<span class="token key attr-name">DB_DATABASE</span><span class="token punctuation">=</span><span class="token value attr-value">laravel # [tl! remove]</span>
<span class="token key attr-name">DB_USERNAME</span><span class="token punctuation">=</span><span class="token value attr-value">root # [tl! remove]</span>
<span class="token key attr-name">DB_PASSWORD</span><span class="token punctuation">=</span> <span class="token value attr-value"># [tl! remove]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一旦你配置了 SQLite 数据库，你可以运行你的应用程序的 <a href="./migrations">数据库迁移</a>，这将创建你的应用程序的数据库表：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan migrate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="next-steps"></a></p><h2 id="下一步" tabindex="-1"><a class="header-anchor" href="#下一步" aria-hidden="true">#</a> 下一步</h2><p>现在你已经创建了你的 Laravel 项目，你可能在想下一步该学什么。首先，我们强烈建议通过阅读以下文档来了解 Laravel 的工作方式：</p>`,8),G=e("div",{class:"content-list",markdown:"1"},[e("ul",null,[e("li",null,[e("a",{href:"./lifecycle"},"请求生命周期"),e("ul",null,[e("li",null,[e("a",{href:"./configuration"},"配置")]),e("li",null,[e("a",{href:"./structure"},"目录结构")]),e("li",null,[e("a",{href:"./frontend"},"前端")]),e("li",null,[e("a",{href:"./container"},"服务容器")]),e("li",null,[e("a",{href:"./facades"},"门面")])])])])],-1),K=e("p",null,"你如何使用 Laravel 也会决定你的下一步。Laravel 有多种使用方式，下面我们将探索框架的两个主要用例。",-1),X=e("strong",null,"注意",-1),Y={href:"https://bootcamp.laravel.com",target:"_blank",rel:"noopener noreferrer"},Z=e("p",null,[e("a",{name:"laravel-the-fullstack-framework"})],-1),$=e("h3",{id:"laravel-全栈框架",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#laravel-全栈框架","aria-hidden":"true"},"#"),a(" Laravel 全栈框架")],-1),ee=e("a",{href:"./blade"},"Blade 模板",-1),ae={href:"https://inertiajs.com",target:"_blank",rel:"noopener noreferrer"},ne=e("a",{href:"./frontend"},"前端开发文档",-1),re=e("a",{href:"./routing"},"路由文档",-1),se=e("a",{href:"./views"},"视图文档",-1),le=e("a",{href:"./eloquent"},"Eloquent ORM",-1),oe={href:"https://laravel-livewire.com",target:"_blank",rel:"noopener noreferrer"},te={href:"https://inertiajs.com",target:"_blank",rel:"noopener noreferrer"},ie=s('<p>如果你使用 Laravel 作为全栈框架，我们也强烈建议你学习如何使用 <a href="./vite">Vite</a> 编译应用程序的 CSS 和 JavaScript 。</p><blockquote><p>技巧：如果你想尽快构建你的应用程序，请查看我们的官方 <a href="./starter-kits">应用程序入门工具包</a>。</p></blockquote><p><a name="laravel-the-api-backend"></a></p><h3 id="laravel-api-后端" tabindex="-1"><a class="header-anchor" href="#laravel-api-后端" aria-hidden="true">#</a> Laravel API 后端</h3>',4),de={href:"https://nextjs.org",target:"_blank",rel:"noopener noreferrer"},ce=e("a",{href:"./sanctum"},"身份验证",-1),pe=e("p",null,[a("如果这是你计划使用 Laravel 的方式，你可能需要查看我们关于 "),e("a",{href:"./routing"},"路由"),a("，"),e("a",{href:"./sanctum"},"Laravel Sanctum"),a(" 和 "),e("a",{href:"./eloquent"},"Eloquent ORM"),a(" 的文档。")],-1),he=e("a",{href:"./starter-kits#breeze-and-next"},"API 堆栈",-1),ve={href:"https://github.com/laravel/breeze-next",target:"_blank",rel:"noopener noreferrer"};function ue(me,be){const n=o("ExternalLinkIcon");return t(),i("div",null,[c,e("p",null,[a("我们喜欢称 Laravel 是一个「渐进式」框架。意思是 Laravel 将与你一同成长。如果你是首次进入 Web 开发， Laravel 大量的文档、指南和 "),e("a",p,[a("视频教程"),r(n)]),a(" 将帮助你熟悉使用技巧而不至于不知所措。")]),h,e("p",null,[a("需要节省开发费用吗？ "),e("a",v,[a("Laravel Vapor"),r(n)]),a(" 允许你在 AWS 最新的无服务器技术上以几乎无限的规模运行 Laravel 应用程序。")]),u,e("p",null,[a("Laravel 结合了 PHP 生态系统中最好的软件包，提供了最健壮、对开发人员友好的框架。此外，来自世界各地的数千名有才华的开发人员 "),e("a",m,[a("为框架做出了贡献"),r(n)]),a(" 。谁知道呢，也许你就是下一个 Laravel 的贡献者。")]),b,e("p",null,[a("在创建你的第一个Laravel项目之前, 你应该确保你的本地机器上已经安装了 PHP 和 "),e("a",_,[a("Composer"),r(n)]),a(" 。 如果你是在 macOS 上开发， PHP 和 Composer 可以通过 "),e("a",g,[a("Homebrew"),r(n)]),a(" 来安装。 此外, 我们建议你 "),e("a",k,[a("安装 Node 和 NPM"),r(n)]),a("。")]),f,e("p",null,[a("我们希望尽可能轻松地开始使用 Laravel，无论你喜欢哪种操作系统。因此，在本地计算机上开发和运行 Laravel 项目有多种选择。虽然你可能希望稍后探索这些选项，但 Laravel 提供了 "),L,a("，这是一个使用 "),e("a",x,[a("Docker"),r(n)]),a(" 运行 Laravel 项目的内置解决方案。")]),e("p",null,[a("Docker 是一种在小型、轻量级「容器」中运行应用程序和服务的工具，不会干扰本地机器上已安装的软件或配置。这意味着你不必担心在本地机器上配置或设置复杂的开发工具，如 Web 服务器和数据库。要开始，你只需要安装 "),e("a",S,[a("Docker Desktop"),r(n)]),a(".")]),w,q,D,W,e("p",null,[a("如果你在 Mac 上开发并且已经安装了 "),e("a",y,[a("Docker Desktop"),r(n)]),a("，你可以使用一个简单的终端命令来创建一个新的 Laravel 项目。 例如，要在名为「example-app」的目录中创建一个新的 Laravel 应用程序，你可以在终端中运行以下命令：")]),P,e("p",null,[a("在创建 Laravel 应用前，请确保你的 Windows 电脑已经安装了 "),e("a",N,[a("Docker Desktop"),r(n)]),a("。请确保已经安装并启用了适用于 Linux 的 Windows 子系统 2（WSL2），WSL 允许你在 Windows10 上运行 Linux 二进制文件。关于如何安装并启用 WSL2，请参阅微软 "),e("a",B,[a("开发者环境文档"),r(n)])]),e("blockquote",null,[e("p",null,[A,a(" 安装并启用 WSL2 后，请确保 Docker Desktop 已经 "),e("a",C,[a("配置为使用 WSL2 后端"),r(n)]),a(".")])]),I,e("p",null,[a("当然，你需要能够修改在 WSL2 安装中创建的 Laravel 应用程序文件。我们推荐你使用微软的 "),e("a",O,[a("Visual Studio Code"),r(n)]),a(" 编辑器并搭配其 "),e("a",R,[a("Remote Development"),r(n)]),a(" 扩展，它们可以帮助你解决这个问题。")]),j,E,H,e("p",null,[a("如果在 Linux 开发，并且已经安装了 "),e("a",M,[a("Docker Compose"),r(n)]),a(" 你可以使用简单的终端命令来创建一个新的 Laravel 项目。例如，要在「example-app」目录中创建新的 Laravel 应用，你可以在终端中运行如下命令：")]),Q,e("p",null,[a("现在，你已经创建了 Laravel 应用程序，可能想在数据库中存储一些数据。默认情况下，你的应用程序的 "),T,a(" 配置文件指定 Laravel 将与 MySQL 数据库交互，并访问 "),V,a(" 中的数据库。如果你在 macOS 上开发并需要在本地安装 MySQL、Postgres 或 Redis，则可能会发现使用 "),e("a",U,[a("DBngin"),r(n)]),a(" 非常方便。")]),e("p",null,[a("如果你不想在本地机器上安装 MySQL 或 Postgres，你总可以使用 "),e("a",z,[a("SQLite"),r(n)]),a(" 数据库。SQLite 是一个小型、快速、自包含的数据库引擎。要开始使用，只需创建一个空的 SQLite 文件来创建 SQLite 数据库。通常，这个文件将存在于 Laravel 应用程序的 "),J,a(" 目录中：")]),F,G,K,e("blockquote",null,[e("p",null,[X,a(" 是第一次使用 Laravel 吗？请查看 "),e("a",Y,[a("Laravel Bootcamp"),r(n)]),a(" 可让你实际操作 Laravel 框架并带你构建第一个 Laravel 应用程序。")])]),Z,$,e("p",null,[a("Laravel 可以作为一个全栈框架。全栈框架意味着你将使用 Laravel 将请求路由到你的应用程序，并通过 "),ee,a(" 或像 "),e("a",ae,[a("Inertia"),r(n)]),a(" 这样的单页应用混合技术来渲染你的前端。这是使用 Laravel 框架最常见的方式，在我们看来，这也是使用 Laravel 最高效的方式。")]),e("p",null,[a("如果你打算使用 Laravel 进行全栈开发，你可能想查看我们的 "),ne,a("、"),re,a("、"),se,a(" 或 "),le,a("。此外，你可能会对学习像 "),e("a",oe,[a("Livewire"),r(n)]),a(" 和 "),e("a",te,[a("Inertia"),r(n)]),a(" 这样的社区包感兴趣。这些包允许你将 Laravel 用作全栈框架，同时享受单页 JavaScript 应用程序提供的许多 UI 好处。")]),ie,e("p",null,[a("Laravel 也可以作为 JavaScript 单页应用程序或移动应用程序的 API 后端。例如，你可以使用 Laravel 作为 "),e("a",de,[a("Next.js"),r(n)]),a(" 应用程序的 API 后端。在这种情况下，你可以使用 Laravel 为你的应用程序提供 "),ce,a(" 和数据存储/检索，同时还可以利用 Laravel 的强大服务，例如队列、电子邮件、通知等。")]),pe,e("blockquote",null,[e("p",null,[a("技巧：需要抢先搭建 Laravel 后端和 Next.js 前端的脚手架？Laravel Breeze 提供了 "),he,a(" 以及 "),e("a",ve,[a("Next.js 前端实现"),r(n)]),a(" ，因此你可以在几分钟内开始使用。")])])])}const ke=l(d,[["render",ue],["__file","installation.html.vue"]]);export{ke as default};
