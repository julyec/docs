import{_ as r}from"./217328439-d8d983ec-d0fc-4cde-93d9-ae5bccf5df14-57c73a9f.js";import{_ as p}from"./horizon-example-7829a532.js";import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as d,c as u,b as n,e,w as i,d as a,a as t}from"./app-06635a3b.js";const v={},h=n("h1",{id:"发行说明",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#发行说明","aria-hidden":"true"},"#"),a(" 发行说明")],-1),m=n("p",null,[n("a",{name:"versioning-scheme"})],-1),b=n("h2",{id:"版本控制方案",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#版本控制方案","aria-hidden":"true"},"#"),a(" 版本控制方案")],-1),k={href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,[a("当从你的应用程序或软件包引用 Laravel 框架或其组件时，应始终使用类似 "),n("code",null,"^10.0"),a(" 的版本约束，因为 Laravel 的主要版本包含破坏性更改。但是，我们始终努力确保你可以在一天或更短时间内更新到新的主要版本。")],-1),_=n("p",null,[n("a",{name:"named-arguments"})],-1),f=n("h4",{id:"命名参数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#命名参数","aria-hidden":"true"},"#"),a(" 命名参数")],-1),x={href:"https://www.php.net/manual/en/functions.arguments.php#functions.named-arguments",target:"_blank",rel:"noopener noreferrer"},L=t('<p><a name="support-policy"></a></p><h2 id="支持政策" tabindex="-1"><a class="header-anchor" href="#支持政策" aria-hidden="true">#</a> 支持政策</h2><p>对于所有 Laravel 版本，修复错误将提供 18 个月支持，而安全修复将提供 2 年支持。对于所有其他库，包括 Lumen，在更新最新的主要发布版本之前只提供 bug 修复。此外，请查看 <a href="./databasemd/14882#e05dce">Laravel 支持的数据库版本</a>。</p><table><thead><tr><th>版本</th><th>PHP (*)</th><th>发布日期</th><th>Bug 修复截止日期</th><th>安全修复截止日期</th></tr></thead><tbody><tr><td>8</td><td>7.3 - 8.1</td><td>2020 年 9 月 8 日</td><td>2022 年 7 月 26 日</td><td>2023 年 1 月 24 日</td></tr><tr><td>9</td><td>8.0 - 8.2</td><td>2022 年 2 月 8 日</td><td>2023 年 8 月 8 日</td><td>2024 年 2 月 6 日</td></tr><tr><td>10</td><td>8.1 - 8.2</td><td>2023 年 2 月 14 日</td><td>2024 年 8 月 6 日</td><td>2025 年 2 月 4 日</td></tr><tr><td>11</td><td>8.2</td><td>2024 年 Q1</td><td>2025 年 8 月 5 日</td><td>2026 年 2 月 3 日</td></tr></tbody></table><p>(*) 支持的 PHP 版本</p><p><a name="laravel-10"></a></p><h2 id="laravel-10" tabindex="-1"><a class="header-anchor" href="#laravel-10" aria-hidden="true">#</a> Laravel 10</h2><p>正如你可能已经知道的那样，Laravel 在发布 Laravel 8 后转向每年发布一次。之前，每 6 个月发布一个主要版本。这种转变旨在减轻社区的维护负担，并挑战我们的开发团队在不引入破坏性变化的情况下发布令人惊叹、功能强大的新功能。因此，我们为 Laravel 9 提供了许多强大的功能，而不会破坏向后兼容性。</p><p>因此，这种致力于在当前发布期间发布出色新功能的承诺可能会导致未来的「主要」版本主要用于诸如升级上游依赖项之类的「维护」任务，这些可以在这些发布说明中看到。</p><p>Laravel 10 继续在 Laravel 9.x 中所做的改进，通过向所有应用程序骨架方法和所有存根文件引入参数和返回类型，以及向外部进程启动和交互引入了一种新的开发人员友好的抽象层。此外，引入了 Laravel Pennant，为管理你的应用程序的「特性标志」提供了一种奇妙的方法。</p><p><a name="php-8"></a></p><h3 id="php-8-1" tabindex="-1"><a class="header-anchor" href="#php-8-1" aria-hidden="true">#</a> PHP 8.1</h3><p>Laravel 10.x 要求至少使用 PHP 版本 8.1。</p><p><a name="types"></a></p><h3 id="types" tabindex="-1"><a class="header-anchor" href="#types" aria-hidden="true">#</a> Types</h3>',15),P={href:"https://github.com/nunomaduro",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,"在最初发布时，Laravel 利用了 PHP 当时提供的所有类型提示特性。然而，在随后的几年中，PHP 添加了许多新的功能，包括额外的基本类型提示、返回类型和联合类型。",-1),y=n("p",null,"Laravel 10.x 彻底更新了应用程序骨架和框架使用的所有存根，以向所有方法签名引入参数和返回类型。此外，已删除冗余的 「doc block」 类型提示信息。",-1),I=n("p",null,"这个更改完全向后兼容现有应用程序。因此，没有这些类型提示的现有应用程序将继续正常运行。",-1),$=n("p",null,[n("a",{name:"laravel-pennant"})],-1),z=n("h3",{id:"laravel-pennant",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#laravel-pennant","aria-hidden":"true"},"#"),a(" Laravel Pennant")],-1),H={href:"https://github.com/timacdonald",target:"_blank",rel:"noopener noreferrer"},N=t(`<p>发布了一个新的第一方软件包，Laravel Pennant。Laravel Pennant 提供了一种轻量级、简洁的方法来管理应用程序的特性标志。Pennant 出厂时包括一个内存中的 <code>array</code> 驱动程序和一个 <code>database</code> 驱动程序，用于持久化特性存储。</p><p>可以通过 <code>Feature::define</code> 方法轻松地定义特性：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>use Laravel\\Pennant\\Feature;

use Illuminate\\Support\\Lottery;

Feature::define(&#39;new-onboarding-flow&#39;, function () {

return Lottery::odds(1, 10);

});

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义特性后，你可以轻松地确定当前用户是否有访问给定特性的权限：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>if (Feature::active(&#39;new-onboarding-flow&#39;)) {

// ...

}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，为了方便起见，Blade 指令也可用：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@feature(&#39;new-onboarding-flow&#39;)

&lt;div&gt;

&lt;!-- ... --&gt;

&lt;/div&gt;

@endfeature

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pennant 提供了各种更高级的特性和 API。有关更多信息，请参阅 <a href="./pennantmd/14911">详细的 Pennant 文档</a>。</p><p><a name="process"></a></p><h3 id="进程交互" tabindex="-1"><a class="header-anchor" href="#进程交互" aria-hidden="true">#</a> 进程交互</h3>`,10),F={href:"https://github.com/nunomaduro",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github.com/taylorotwell",target:"_blank",rel:"noopener noreferrer"},q=t(`<p>Laravel 10.x 引入了一个美丽的抽象层，用于通过新的 <code>Process</code> 门面启动和与外部进程交互：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Process</span><span class="token punctuation">;</span>

<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ls -la&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">return</span>  <span class="token variable">$result</span><span class="token operator">-&gt;</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>甚至可以在池中启动进程，允许方便地执行和管理并发进程：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Process<span class="token punctuation">\\</span>Pool</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Process</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span><span class="token variable">$first</span><span class="token punctuation">,</span> <span class="token variable">$second</span><span class="token punctuation">,</span> <span class="token variable">$third</span><span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">concurrently</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Pool</span>  <span class="token variable">$pool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token variable">$pool</span><span class="token operator">-&gt;</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;cat first.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$pool</span><span class="token operator">-&gt;</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;cat second.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$pool</span><span class="token operator">-&gt;</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;cat third.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">return</span>  <span class="token variable">$first</span><span class="token operator">-&gt;</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一变化完全向后兼容现有的应用程序。因此，没有这些类型提示的现有应用程序将继续正常运行。</p><p>此外，进程可能会被虚构，以方便测试：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">fake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>

<span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">assertRan</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ls -la&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有关与进程交互的更多信息，请参阅 <a href="./processesmd/14872">详细的进程管理文档</a>。</p><p><a name="test-profiling"></a></p><h3 id="测试分析" tabindex="-1"><a class="header-anchor" href="#测试分析" aria-hidden="true">#</a> 测试分析</h3>`,10),B={href:"https://github.com/nunomaduro",target:"_blank",rel:"noopener noreferrer"},C=t(`<p>Artisan 的 <code>test</code> 命令现在具有一个新的 <code>--profile</code> 选项，使你可以轻松识别应用程序中最慢的测试：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan  <span class="token builtin class-name">test</span>  <span class="token parameter variable">--profile</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>为了方便起见，最慢的测试将直接显示在 CLI 输出中：</p><p align="center"><img width="100%" src="`+r+`"></p><p><a name="pest-scaffolding"></a></p><h3 id="pest-脚手架" tabindex="-1"><a class="header-anchor" href="#pest-脚手架" aria-hidden="true">#</a> Pest 脚手架</h3><p>现在，新的 Laravel 项目可以默认使用 Pest 测试脚手架。要启用此功能，请在通过 Laravel 安装程序创建新应用程序时提供 <code>--pest</code> 标志：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>laravel new  example-application  <span class="token parameter variable">--pest</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="generator-cli-prompts"></a></p><h3 id="生成器-cli-提示" tabindex="-1"><a class="header-anchor" href="#生成器-cli-提示" aria-hidden="true">#</a> 生成器 CLI 提示</h3>`,10),M={href:"https://github.com/jessarcher",target:"_blank",rel:"noopener noreferrer"},S=t(`<p>为了改进框架的开发体验，Laravel 内置的所有 make 命令现在不需要任何输入。如果调用命令时没有输入，你将被提示提供所需的参数：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan  make:controller

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="horizon-telescope-facelift"></a></p><h3 id="horizon-telescope-界面更新" tabindex="-1"><a class="header-anchor" href="#horizon-telescope-界面更新" aria-hidden="true">#</a> Horizon / Telescope 界面更新</h3>`,4),V={href:"https://learnku.com./horizonmd/14906",target:"_blank",rel:"noopener noreferrer"},A={href:"https://learnku.com./telescopemd/14917",target:"_blank",rel:"noopener noreferrer"},E=n("img",{src:p},null,-1);function R(Q,j){const l=o("RouterLink"),s=o("ExternalLinkIcon");return d(),u("div",null,[h,n("ul",null,[n("li",null,[n("p",null,[e(l,{to:"/zh/guide/releases/#versioning-scheme"},{default:i(()=>[a("版本控制方案")]),_:1})])]),n("li",null,[n("p",null,[e(l,{to:"/zh/guide/releases/#support-policy"},{default:i(()=>[a("支持政策")]),_:1}),a(" 测试")])]),n("li",null,[n("p",null,[e(l,{to:"/zh/guide/releases/#laravel-10"},{default:i(()=>[a("Laravel 10")]),_:1})])])]),m,b,n("p",null,[a("Laravel 及其其他第一方软件包遵循 "),n("a",k,[a("语义化版本控制"),e(s)]),a("。主要框架版本释出是每年 (~Q1)，而较小和补丁版本则可能每周释出一次。较小和补丁版本决不能包含破坏性更改。")]),g,_,f,n("p",null,[n("a",x,[a("命名参数"),e(s)]),a(" 未被 Laravel 的向后兼容性指导方针所覆盖。我们可能会在必要时重命名函数参数，以改进 Laravel 代码库。因此，当调用 Laravel 方法时使用命名参数应该谨慎进行，并且要知道参数名称可能会在未来更改。")]),L,n("p",null,[n("em",null,[a("应用程序骨架和存根的类型提示由 "),n("a",P,[a("Nuno Maduro"),e(s)]),a(" 提供。")])]),w,y,I,$,z,n("p",null,[n("em",null,[a("Laravel Pennant 由 "),n("a",H,[a("Tim MacDonald"),e(s)]),a(" 贡献。")])]),N,n("p",null,[n("em",null,[a("进程抽象层由 "),n("a",F,[a("Nuno Maduro"),e(s)]),a(" 和 "),n("a",T,[a("Taylor Otwell"),e(s)]),a(" 贡献。")])]),q,n("p",null,[n("em",null,[a("测试分析由 "),n("a",B,[a("Nuno Maduro"),e(s)]),a(" 贡献。")])]),C,n("p",null,[n("em",null,[a("生成器 CLI 提示由 "),n("a",M,[a("Jess Archer"),e(s)]),a(" 贡献。")])]),S,n("p",null,[n("a",V,[a("Horizon"),e(s)]),a(" 和 "),n("a",A,[a("Telescope"),e(s)]),a(" 已经通过改进版式、间距和设计更新为新的现代外观：")]),E])}const K=c(v,[["render",R],["__file","releases.html.vue"]]);export{K as default};
