import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as l,c as r,b as a,d as e,e as s,a as i}from"./app-06635a3b.js";const d={},c=i('<h1 id="laravel-sail" tabindex="-1"><a class="header-anchor" href="#laravel-sail" aria-hidden="true">#</a> Laravel Sail</h1><ul><li><a href="#introduction">Introduction</a></li><li><a href="#installation">Installation &amp; Setup</a><ul><li><a href="#installing-sail-into-existing-applications">Installing Sail Into Existing Applications</a></li><li><a href="#configuring-a-shell-alias">Configuring A Shell Alias</a></li></ul></li><li><a href="#starting-and-stopping-sail">Starting &amp; Stopping Sail</a></li><li><a href="#executing-sail-commands">Executing Commands</a><ul><li><a href="#executing-php-commands">Executing PHP Commands</a></li><li><a href="#executing-composer-commands">Executing Composer Commands</a></li><li><a href="#executing-artisan-commands">Executing Artisan Commands</a></li><li><a href="#executing-node-npm-commands">Executing Node / NPM Commands</a></li></ul></li><li><a href="#interacting-with-sail-databases">Interacting With Databases</a><ul><li><a href="#mysql">MySQL</a></li><li><a href="#redis">Redis</a></li><li><a href="#meilisearch">Meilisearch</a></li></ul></li><li><a href="#file-storage">File Storage</a></li><li><a href="#running-tests">Running Tests</a><ul><li><a href="#laravel-dusk">Laravel Dusk</a></li></ul></li><li><a href="#previewing-emails">Previewing Emails</a></li><li><a href="#sail-container-cli">Container CLI</a></li><li><a href="#sail-php-versions">PHP Versions</a></li><li><a href="#sail-node-versions">Node Versions</a></li><li><a href="#sharing-your-site">Sharing Your Site</a></li><li><a href="#debugging-with-xdebug">Debugging With Xdebug</a><ul><li><a href="#xdebug-cli-usage">Xdebug CLI Usage</a></li><li><a href="#xdebug-browser-usage">Xdebug Browser Usage</a></li></ul></li><li><a href="#sail-customization">Customization</a></li></ul><p><a name="introduction"></a></p><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2>',4),u={href:"https://github.com/laravel/sail",target:"_blank",rel:"noopener noreferrer"},p=a("p",null,[e("At its heart, Sail is the "),a("code",null,"docker-compose.yml"),e(" file and the "),a("code",null,"sail"),e(" script that is stored at the root of your project. The "),a("code",null,"sail"),e(" script provides a CLI with convenient methods for interacting with the Docker containers defined by the "),a("code",null,"docker-compose.yml"),e(" file.")],-1),h={href:"https://docs.microsoft.com/en-us/windows/wsl/about",target:"_blank",rel:"noopener noreferrer"},m=i(`<p><a name="installation"></a></p><h2 id="installation-setup" tabindex="-1"><a class="header-anchor" href="#installation-setup" aria-hidden="true">#</a> Installation &amp; Setup</h2><p>Laravel Sail is automatically installed with all new Laravel applications so you may start using it immediately. To learn how to create a new Laravel application, please consult Laravel&#39;s <a href="./installation#laravel-and-docker">installation documentation</a> for your operating system. During installation, you will be asked to choose which Sail supported services your application will be interacting with.</p><p><a name="installing-sail-into-existing-applications"></a></p><h3 id="installing-sail-into-existing-applications" tabindex="-1"><a class="header-anchor" href="#installing-sail-into-existing-applications" aria-hidden="true">#</a> Installing Sail Into Existing Applications</h3><p>If you are interested in using Sail with an existing Laravel application, you may simply install Sail using the Composer package manager. Of course, these steps assume that your existing local development environment allows you to install Composer dependencies:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">composer</span> require laravel/sail <span class="token parameter variable">--dev</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>After Sail has been installed, you may run the <code>sail:install</code> Artisan command. This command will publish Sail&#39;s <code>docker-compose.yml</code> file to the root of your application and modify your <code>.env</code> file with the required environment variables in order to connect to the Docker services:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan sail:install
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Finally, you may start Sail. To continue learning how to use Sail, please continue reading the remainder of this documentation:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./vendor/bin/sail up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><strong>Warning</strong> If you are using Docker Desktop for Linux, you should use the <code>default</code> Docker context by executing the following command: <code>docker context use default</code>.</p></blockquote><p><a name="adding-additional-services"></a></p><h4 id="adding-additional-services" tabindex="-1"><a class="header-anchor" href="#adding-additional-services" aria-hidden="true">#</a> Adding Additional Services</h4><p>If you would like to add an additional service to your existing Sail installation, you may run the <code>sail:add</code> Artisan command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan sail:add
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="using-devcontainers"></a></p><h4 id="using-devcontainers" tabindex="-1"><a class="header-anchor" href="#using-devcontainers" aria-hidden="true">#</a> Using Devcontainers</h4>`,18),v={href:"https://code.visualstudio.com/docs/remote/containers",target:"_blank",rel:"noopener noreferrer"},g=a("code",null,"--devcontainer",-1),b=a("code",null,"sail:install",-1),y=a("code",null,"--devcontainer",-1),k=a("code",null,"sail:install",-1),f=a("code",null,".devcontainer/devcontainer.json ",-1),_=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan sail:install <span class="token parameter variable">--devcontainer</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="configuring-a-shell-alias"></a></p><h3 id="configuring-a-shell-alias" tabindex="-1"><a class="header-anchor" href="#configuring-a-shell-alias" aria-hidden="true">#</a> Configuring A Shell Alias</h3><p>By default, Sail commands are invoked using the <code>vendor/bin/sail</code> script that is included with all new Laravel applications:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./vendor/bin/sail up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>However, instead of repeatedly typing <code>vendor/bin/sail</code> to execute Sail commands, you may wish to configure a shell alias that allows you to execute Sail&#39;s commands more easily:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">alias</span> <span class="token assign-left variable">sail</span><span class="token operator">=</span><span class="token string">&#39;[ -f sail ] &amp;&amp; sh sail || sh vendor/bin/sail&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>To make sure this is always available, you may add this to your shell configuration file in your home directory, such as <code>~/.zshrc</code> or <code>~/.bashrc</code>, and then restart your shell.</p><p>Once the shell alias has been configured, you may execute Sail commands by simply typing <code>sail</code>. The remainder of this documentation&#39;s examples will assume that you have configured this alias:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sail up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="starting-and-stopping-sail"></a></p><h2 id="starting-stopping-sail" tabindex="-1"><a class="header-anchor" href="#starting-stopping-sail" aria-hidden="true">#</a> Starting &amp; Stopping Sail</h2><p>Laravel Sail&#39;s <code>docker-compose.yml</code> file defines a variety of Docker containers that work together to help you build Laravel applications. Each of these containers is an entry within the <code>services</code> configuration of your <code>docker-compose.yml</code> file. The <code>laravel.test</code> container is the primary application container that will be serving your application.</p><p>Before starting Sail, you should ensure that no other web servers or databases are running on your local computer. To start all of the Docker containers defined in your application&#39;s <code>docker-compose.yml</code> file, you should execute the <code>up</code> command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sail up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>To start all of the Docker containers in the background, you may start Sail in &quot;detached&quot; mode:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sail up <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Once the application&#39;s containers have been started, you may access the project in your web browser at: http://localhost.</p><p>To stop all of the containers, you may simply press Control + C to stop the container&#39;s execution. Or, if the containers are running in the background, you may use the <code>stop</code> command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sail stop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="executing-sail-commands"></a></p><h2 id="executing-commands" tabindex="-1"><a class="header-anchor" href="#executing-commands" aria-hidden="true">#</a> Executing Commands</h2><p>When using Laravel Sail, your application is executing within a Docker container and is isolated from your local computer. However, Sail provides a convenient way to run various commands against your application such as arbitrary PHP commands, Artisan commands, Composer commands, and Node / NPM commands.</p><p><strong>When reading the Laravel documentation, you will often see references to Composer, Artisan, and Node / NPM commands that do not reference Sail.</strong> Those examples assume that these tools are installed on your local computer. If you are using Sail for your local Laravel development environment, you should execute those commands using Sail:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Running Artisan commands locally...</span>
php artisan queue:work

<span class="token comment"># Running Artisan commands within Laravel Sail...</span>
sail artisan queue:work
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="executing-php-commands"></a></p><h3 id="executing-php-commands" tabindex="-1"><a class="header-anchor" href="#executing-php-commands" aria-hidden="true">#</a> Executing PHP Commands</h3><p>PHP commands may be executed using the <code>php</code> command. Of course, these commands will execute using the PHP version that is configured for your application. To learn more about the PHP versions available to Laravel Sail, consult the <a href="#sail-php-versions">PHP version documentation</a>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sail php <span class="token parameter variable">--version</span>

sail php script.php
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="executing-composer-commands"></a></p><h3 id="executing-composer-commands" tabindex="-1"><a class="header-anchor" href="#executing-composer-commands" aria-hidden="true">#</a> Executing Composer Commands</h3><p>Composer commands may be executed using the <code>composer</code> command. Laravel Sail&#39;s application container includes a Composer 2.x installation:</p><div class="language-nothing line-numbers-mode" data-ext="nothing"><pre class="language-nothing"><code>sail composer require laravel/sanctum
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="installing-composer-dependencies-for-existing-projects"></a></p><h4 id="installing-composer-dependencies-for-existing-applications" tabindex="-1"><a class="header-anchor" href="#installing-composer-dependencies-for-existing-applications" aria-hidden="true">#</a> Installing Composer Dependencies For Existing Applications</h4><p>If you are developing an application with a team, you may not be the one that initially creates the Laravel application. Therefore, none of the application&#39;s Composer dependencies, including Sail, will be installed after you clone the application&#39;s repository to your local computer.</p><p>You may install the application&#39;s dependencies by navigating to the application&#39;s directory and executing the following command. This command uses a small Docker container containing PHP and Composer to install the application&#39;s dependencies:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-u</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-u</span><span class="token variable">)</span></span>:<span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-g</span><span class="token variable">)</span></span>&quot;</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-v</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>:/var/www/html&quot;</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-w</span> /var/www/html <span class="token punctuation">\\</span>
    laravelsail/php82-composer:latest <span class="token punctuation">\\</span>
    <span class="token function">composer</span> <span class="token function">install</span> --ignore-platform-reqs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When using the <code>laravelsail/phpXX-composer</code> image, you should use the same version of PHP that you plan to use for your application (<code>80</code>, <code>81</code>, or <code>82</code>).</p><p><a name="executing-artisan-commands"></a></p><h3 id="executing-artisan-commands" tabindex="-1"><a class="header-anchor" href="#executing-artisan-commands" aria-hidden="true">#</a> Executing Artisan Commands</h3><p>Laravel Artisan commands may be executed using the <code>artisan</code> command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sail artisan queue:work
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="executing-node-npm-commands"></a></p><h3 id="executing-node-npm-commands" tabindex="-1"><a class="header-anchor" href="#executing-node-npm-commands" aria-hidden="true">#</a> Executing Node / NPM Commands</h3><p>Node commands may be executed using the <code>node</code> command while NPM commands may be executed using the <code>npm</code> command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sail <span class="token function">node</span> <span class="token parameter variable">--version</span>

sail <span class="token function">npm</span> run dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you wish, you may use Yarn instead of NPM:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sail <span class="token function">yarn</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="interacting-with-sail-databases"></a></p><h2 id="interacting-with-databases" tabindex="-1"><a class="header-anchor" href="#interacting-with-databases" aria-hidden="true">#</a> Interacting With Databases</h2><p><a name="mysql"></a></p><h3 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql" aria-hidden="true">#</a> MySQL</h3>`,53),x=a("code",null,"docker-compose.yml",-1),w={href:"https://docs.docker.com/storage/volumes/",target:"_blank",rel:"noopener noreferrer"},S=a("p",null,[e("In addition, the first time the MySQL container starts, it will create two databases for you. The first database is named using the value of your "),a("code",null,"DB_DATABASE"),e(" environment variable and is for your local development. The second is a dedicated testing database named "),a("code",null,"testing"),e(" and will ensure that your tests do not interfere with your development data.")],-1),L=a("p",null,[e("Once you have started your containers, you may connect to the MySQL instance within your application by setting your "),a("code",null,"DB_HOST"),e(" environment variable within your application's "),a("code",null,".env"),e(" file to "),a("code",null,"mysql"),e(".")],-1),I={href:"https://tableplus.com",target:"_blank",rel:"noopener noreferrer"},P=a("code",null,"localhost",-1),A=a("code",null,"DB_USERNAME",-1),T=a("code",null,"DB_PASSWORD",-1),D=a("code",null,"root",-1),E=a("code",null,"DB_PASSWORD",-1),C=a("p",null,[a("a",{name:"redis"})],-1),O=a("h3",{id:"redis",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#redis","aria-hidden":"true"},"#"),e(" Redis")],-1),M=a("code",null,"docker-compose.yml",-1),q={href:"https://redis.io",target:"_blank",rel:"noopener noreferrer"},N={href:"https://docs.docker.com/storage/volumes/",target:"_blank",rel:"noopener noreferrer"},R=a("code",null,"REDIS_HOST",-1),H=a("code",null,".env",-1),W=a("code",null,"redis",-1),B={href:"https://tableplus.com",target:"_blank",rel:"noopener noreferrer"},U=a("code",null,"localhost",-1),X=a("p",null,[a("a",{name:"meilisearch"})],-1),z=a("h3",{id:"meilisearch",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#meilisearch","aria-hidden":"true"},"#"),e(" Meilisearch")],-1),F={href:"https://www.meilisearch.com",target:"_blank",rel:"noopener noreferrer"},G=a("code",null,"docker-compose.yml",-1),Y={href:"https://github.com/meilisearch/meilisearch-laravel-scout",target:"_blank",rel:"noopener noreferrer"},V=a("a",{href:"./scout"},"Laravel Scout",-1),Q=a("code",null,"MEILISEARCH_HOST",-1),j=a("code",null,"http://meilisearch:7700",-1),$=a("p",null,[e("From your local machine, you may access Meilisearch's web based administration panel by navigating to "),a("code",null,"http://localhost:7700"),e(" in your web browser.")],-1),K=a("p",null,[a("a",{name:"file-storage"})],-1),J=a("h2",{id:"file-storage",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#file-storage","aria-hidden":"true"},"#"),e(" File Storage")],-1),Z={href:"https://min.io",target:"_blank",rel:"noopener noreferrer"},ee=a("code",null,"s3",-1),ae=a("code",null,"docker-compose.yml",-1),ne=i(`<p>By default, your application&#39;s <code>filesystems</code> configuration file already contains a disk configuration for the <code>s3</code> disk. In addition to using this disk to interact with Amazon S3, you may use it to interact with any S3 compatible file storage service such as MinIO by simply modifying the associated environment variables that control its configuration. For example, when using MinIO, your filesystem environment variable configuration should be defined as follows:</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token key attr-name">FILESYSTEM_DISK</span><span class="token punctuation">=</span><span class="token value attr-value">s3</span>
<span class="token key attr-name">AWS_ACCESS_KEY_ID</span><span class="token punctuation">=</span><span class="token value attr-value">sail</span>
<span class="token key attr-name">AWS_SECRET_ACCESS_KEY</span><span class="token punctuation">=</span><span class="token value attr-value">password</span>
<span class="token key attr-name">AWS_DEFAULT_REGION</span><span class="token punctuation">=</span><span class="token value attr-value">us-east-1</span>
<span class="token key attr-name">AWS_BUCKET</span><span class="token punctuation">=</span><span class="token value attr-value">local</span>
<span class="token key attr-name">AWS_ENDPOINT</span><span class="token punctuation">=</span><span class="token value attr-value">http://minio:9000</span>
<span class="token key attr-name">AWS_USE_PATH_STYLE_ENDPOINT</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In order for Laravel&#39;s Flysystem integration to generate proper URLs when using MinIO, you should define the <code>AWS_URL</code> environment variable so that it matches your application&#39;s local URL and includes the bucket name in the URL path:</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token key attr-name">AWS_URL</span><span class="token punctuation">=</span><span class="token value attr-value">http://localhost:9000/local</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You may create buckets via the MinIO console, which is available at <code>http://localhost:8900</code>. The default username for the MinIO console is <code>sail</code> while the default password is <code>password</code>.</p><blockquote><p><strong>Warning</strong><br> Generating temporary storage URLs via the <code>temporaryUrl</code> method is not supported when using MinIO.</p></blockquote><p><a name="running-tests"></a></p><h2 id="running-tests" tabindex="-1"><a class="header-anchor" href="#running-tests" aria-hidden="true">#</a> Running Tests</h2><p>Laravel provides amazing testing support out of the box, and you may use Sail&#39;s <code>test</code> command to run your applications <a href="./testing">feature and unit tests</a>. Any CLI options that are accepted by PHPUnit may also be passed to the <code>test</code> command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sail <span class="token builtin class-name">test</span>

sail <span class="token builtin class-name">test</span> <span class="token parameter variable">--group</span> orders
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The Sail <code>test</code> command is equivalent to running the <code>test</code> Artisan command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sail artisan <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>By default, Sail will create a dedicated <code>testing</code> database so that your tests do not interfere with the current state of your database. In a default Laravel installation, Sail will also configure your <code>phpunit.xml</code> file to use this database when executing your tests:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>env</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>DB_DATABASE<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>testing<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="laravel-dusk"></a></p><h3 id="laravel-dusk" tabindex="-1"><a class="header-anchor" href="#laravel-dusk" aria-hidden="true">#</a> Laravel Dusk</h3><p><a href="./dusk">Laravel Dusk</a> provides an expressive, easy-to-use browser automation and testing API. Thanks to Sail, you may run these tests without ever installing Selenium or other tools on your local computer. To get started, uncomment the Selenium service in your application&#39;s <code>docker-compose.yml</code> file:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">selenium</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">&#39;selenium/standalone-chrome&#39;</span>
    <span class="token key atrule">extra_hosts</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&#39;host.docker.internal:host-gateway&#39;</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token string">&#39;/dev/shm:/dev/shm&#39;</span>
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> sail
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next, ensure that the <code>laravel.test</code> service in your application&#39;s <code>docker-compose.yml</code> file has a <code>depends_on</code> entry for <code>selenium</code>:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> mysql
    <span class="token punctuation">-</span> redis
    <span class="token punctuation">-</span> selenium
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Finally, you may run your Dusk test suite by starting Sail and running the <code>dusk</code> command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sail dusk
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="selenium-on-apple-silicon"></a></p><h4 id="selenium-on-apple-silicon" tabindex="-1"><a class="header-anchor" href="#selenium-on-apple-silicon" aria-hidden="true">#</a> Selenium On Apple Silicon</h4><p>If your local machine contains an Apple Silicon chip, your <code>selenium</code> service must use the <code>seleniarm/standalone-chromium</code> image:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">selenium</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">&#39;seleniarm/standalone-chromium&#39;</span>
    <span class="token key atrule">extra_hosts</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token string">&#39;host.docker.internal:host-gateway&#39;</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token string">&#39;/dev/shm:/dev/shm&#39;</span>
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> sail
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="previewing-emails"></a></p><h2 id="previewing-emails" tabindex="-1"><a class="header-anchor" href="#previewing-emails" aria-hidden="true">#</a> Previewing Emails</h2>`,28),se=a("code",null,"docker-compose.yml",-1),ie={href:"https://github.com/axllent/mailpit",target:"_blank",rel:"noopener noreferrer"},oe=a("code",null,"mailpit",-1),te=i(`<div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token key attr-name">MAIL_HOST</span><span class="token punctuation">=</span><span class="token value attr-value">mailpit</span>
<span class="token key attr-name">MAIL_PORT</span><span class="token punctuation">=</span><span class="token value attr-value">1025</span>
<span class="token key attr-name">MAIL_ENCRYPTION</span><span class="token punctuation">=</span><span class="token value attr-value">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When Sail is running, you may access the Mailpit web interface at: http://localhost:8025</p><p><a name="sail-container-cli"></a></p><h2 id="container-cli" tabindex="-1"><a class="header-anchor" href="#container-cli" aria-hidden="true">#</a> Container CLI</h2><p>Sometimes you may wish to start a Bash session within your application&#39;s container. You may use the <code>shell</code> command to connect to your application&#39;s container, allowing you to inspect its files and installed services as well execute arbitrary shell commands within the container:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sail shell

sail root-shell
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),le={href:"https://github.com/laravel/tinker",target:"_blank",rel:"noopener noreferrer"},re=a("code",null,"tinker",-1),de=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sail tinker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="sail-php-versions"></a></p><h2 id="php-versions" tabindex="-1"><a class="header-anchor" href="#php-versions" aria-hidden="true">#</a> PHP Versions</h2><p>Sail currently supports serving your application via PHP 8.3, 8.2, 8.1, or PHP 8.0. The default PHP version used by Sail is currently PHP 8.2. To change the PHP version that is used to serve your application, you should update the <code>build</code> definition of the <code>laravel.test</code> container in your application&#39;s <code>docker-compose.yml</code> file:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># PHP 8.3</span>
<span class="token key atrule">context</span><span class="token punctuation">:</span> ./vendor/laravel/sail/runtimes/8.3

<span class="token comment"># PHP 8.2</span>
<span class="token key atrule">context</span><span class="token punctuation">:</span> ./vendor/laravel/sail/runtimes/8.2

<span class="token comment"># PHP 8.1</span>
<span class="token key atrule">context</span><span class="token punctuation">:</span> ./vendor/laravel/sail/runtimes/8.1

<span class="token comment"># PHP 8.0</span>
<span class="token key atrule">context</span><span class="token punctuation">:</span> ./vendor/laravel/sail/runtimes/8.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In addition, you may wish to update your <code>image</code> name to reflect the version of PHP being used by your application. This option is also defined in your application&#39;s <code>docker-compose.yml</code> file:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">image</span><span class="token punctuation">:</span> sail<span class="token punctuation">-</span>8.1/app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>After updating your application&#39;s <code>docker-compose.yml</code> file, you should rebuild your container images:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sail build --no-cache

sail up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="sail-node-versions"></a></p><h2 id="node-versions" tabindex="-1"><a class="header-anchor" href="#node-versions" aria-hidden="true">#</a> Node Versions</h2><p>Sail installs Node 20 by default. To change the Node version that is installed when building your images, you may update the <code>build.args</code> definition of the <code>laravel.test</code> service in your application&#39;s <code>docker-compose.yml</code> file:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">build</span><span class="token punctuation">:</span>
    <span class="token key atrule">args</span><span class="token punctuation">:</span>
        <span class="token key atrule">WWWGROUP</span><span class="token punctuation">:</span> <span class="token string">&#39;\${WWWGROUP}&#39;</span>
        <span class="token key atrule">NODE_VERSION</span><span class="token punctuation">:</span> <span class="token string">&#39;18&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After updating your application&#39;s <code>docker-compose.yml</code> file, you should rebuild your container images:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sail build --no-cache

sail up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="sharing-your-site"></a></p><h2 id="sharing-your-site" tabindex="-1"><a class="header-anchor" href="#sharing-your-site" aria-hidden="true">#</a> Sharing Your Site</h2><p>Sometimes you may need to share your site publicly in order to preview your site for a colleague or to test webhook integrations with your application. To share your site, you may use the <code>share</code> command. After executing this command, you will be issued a random <code>laravel-sail.site</code> URL that you may use to access your application:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sail share
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>When sharing your site via the <code>share</code> command, you should configure your application&#39;s trusted proxies within the <code>TrustProxies</code> middleware. Otherwise, URL generation helpers such as <code>url</code> and <code>route</code> will be unable to determine the correct HTTP host that should be used during URL generation:</p><pre><code>/**
 * The trusted proxies for this application.
 *
 * @var array|string|null
 */
protected $proxies = &#39;*&#39;;
</code></pre><p>If you would like to choose the subdomain for your shared site, you may provide the <code>subdomain</code> option when executing the <code>share</code> command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sail share <span class="token parameter variable">--subdomain</span><span class="token operator">=</span>my-sail-site
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,23),ce=a("strong",null,"Note",-1),ue=a("br",null,null,-1),pe=a("code",null,"share",-1),he={href:"https://github.com/beyondcode/expose",target:"_blank",rel:"noopener noreferrer"},me={href:"https://beyondco.de",target:"_blank",rel:"noopener noreferrer"},ve=a("p",null,[a("a",{name:"debugging-with-xdebug"})],-1),ge=a("h2",{id:"debugging-with-xdebug",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#debugging-with-xdebug","aria-hidden":"true"},"#"),e(" Debugging With Xdebug")],-1),be={href:"https://xdebug.org/",target:"_blank",rel:"noopener noreferrer"},ye=a("code",null,".env",-1),ke={href:"https://xdebug.org/docs/step_debug#mode",target:"_blank",rel:"noopener noreferrer"},fe=i(`<div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token key attr-name">SAIL_XDEBUG_MODE</span><span class="token punctuation">=</span><span class="token value attr-value">develop,debug,coverage</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="linux-host-ip-configuration" tabindex="-1"><a class="header-anchor" href="#linux-host-ip-configuration" aria-hidden="true">#</a> Linux Host IP Configuration</h4><p>Internally, the <code>XDEBUG_CONFIG</code> environment variable is defined as <code>client_host=host.docker.internal</code> so that Xdebug will be properly configured for Mac and Windows (WSL2). If your local machine is running Linux, you should ensure that you are running Docker Engine 17.06.0+ and Compose 1.16.0+. Otherwise, you will need to manually define this environment variable as shown below.</p><p>First, you should determine the correct host IP address to add to the environment variable by running the following command. Typically, the <code>&lt;container-name&gt;</code> should be the name of the container that serves your application and often ends with <code>_laravel.test_1</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> inspect <span class="token parameter variable">-f</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>range.NetworkSettings.Networks<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span>.Gateway<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span>container-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Once you have obtained the correct host IP address, you should define the <code>SAIL_XDEBUG_CONFIG</code> variable within your application&#39;s <code>.env</code> file:</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token key attr-name">SAIL_XDEBUG_CONFIG</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;<span class="token inner-value">client_host=&lt;host-ip-address&gt;</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="xdebug-cli-usage"></a></p><h3 id="xdebug-cli-usage" tabindex="-1"><a class="header-anchor" href="#xdebug-cli-usage" aria-hidden="true">#</a> Xdebug CLI Usage</h3><p>A <code>sail debug</code> command may be used to start a debugging session when running an Artisan command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Run an Artisan command without Xdebug...</span>
sail artisan migrate

<span class="token comment"># Run an Artisan command with Xdebug...</span>
sail debug migrate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="xdebug-browser-usage"></a></p><h3 id="xdebug-browser-usage" tabindex="-1"><a class="header-anchor" href="#xdebug-browser-usage" aria-hidden="true">#</a> Xdebug Browser Usage</h3>`,13),_e={href:"https://xdebug.org/docs/step_debug#web-application",target:"_blank",rel:"noopener noreferrer"},xe={href:"https://www.jetbrains.com/help/phpstorm/zero-configuration-debugging.html",target:"_blank",rel:"noopener noreferrer"},we=i(`<blockquote><p><strong>Warning</strong><br> Laravel Sail relies on <code>artisan serve</code> to serve your application. The <code>artisan serve</code> command only accepts the <code>XDEBUG_CONFIG</code> and <code>XDEBUG_MODE</code> variables as of Laravel version 8.53.0. Older versions of Laravel (8.52.0 and below) do not support these variables and will not accept debug connections.</p></blockquote><p><a name="sail-customization"></a></p><h2 id="customization" tabindex="-1"><a class="header-anchor" href="#customization" aria-hidden="true">#</a> Customization</h2><p>Since Sail is just Docker, you are free to customize nearly everything about it. To publish Sail&#39;s own Dockerfiles, you may execute the <code>sail:publish</code> command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sail artisan sail:publish
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>After running this command, the Dockerfiles and other configuration files used by Laravel Sail will be placed within a <code>docker</code> directory in your application&#39;s root directory. After customizing your Sail installation, you may wish to change the image name for the application container in your application&#39;s <code>docker-compose.yml</code> file. After doing so, rebuild your application&#39;s containers using the <code>build</code> command. Assigning a unique name to the application image is particularly important if you are using Sail to develop multiple Laravel applications on a single machine:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sail build --no-cache
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7);function Se(Le,Ie){const n=t("ExternalLinkIcon");return l(),r("div",null,[c,a("p",null,[a("a",u,[e("Laravel Sail"),s(n)]),e(" is a light-weight command-line interface for interacting with Laravel's default Docker development environment. Sail provides a great starting point for building a Laravel application using PHP, MySQL, and Redis without requiring prior Docker experience.")]),p,a("p",null,[e("Laravel Sail is supported on macOS, Linux, and Windows (via "),a("a",h,[e("WSL2"),s(n)]),e(").")]),m,a("p",null,[e("If you would like to develop within a "),a("a",v,[e("Devcontainer"),s(n)]),e(", you may provide the "),g,e(" option to the "),b,e(" command. The "),y,e(" option will instruct the "),k,e(" command to publish a default "),f,e(" file to the root of your application:")]),_,a("p",null,[e("As you may have noticed, your application's "),x,e(" file contains an entry for a MySQL container. This container uses a "),a("a",w,[e("Docker volume"),s(n)]),e(" so that the data stored in your database is persisted even when stopping and restarting your containers.")]),S,L,a("p",null,[e("To connect to your application's MySQL database from your local machine, you may use a graphical database management application such as "),a("a",I,[e("TablePlus"),s(n)]),e(". By default, the MySQL database is accessible at "),P,e(" port 3306 and the access credentials correspond to the values of your "),A,e(" and "),T,e(" environment variables. Or, you may connect as the "),D,e(" user, which also utilizes the value of your "),E,e(" environment variable as its password.")]),C,O,a("p",null,[e("Your application's "),M,e(" file also contains an entry for a "),a("a",q,[e("Redis"),s(n)]),e(" container. This container uses a "),a("a",N,[e("Docker volume"),s(n)]),e(" so that the data stored in your Redis data is persisted even when stopping and restarting your containers. Once you have started your containers, you may connect to the Redis instance within your application by setting your "),R,e(" environment variable within your application's "),H,e(" file to "),W,e(".")]),a("p",null,[e("To connect to your application's Redis database from your local machine, you may use a graphical database management application such as "),a("a",B,[e("TablePlus"),s(n)]),e(". By default, the Redis database is accessible at "),U,e(" port 6379.")]),X,z,a("p",null,[e("If you chose to install the "),a("a",F,[e("Meilisearch"),s(n)]),e(" service when installing Sail, your application's "),G,e(" file will contain an entry for this powerful search-engine that is "),a("a",Y,[e("compatible"),s(n)]),e(" with "),V,e(". Once you have started your containers, you may connect to the Meilisearch instance within your application by setting your "),Q,e(" environment variable to "),j,e(".")]),$,K,J,a("p",null,[e("If you plan to use Amazon S3 to store files while running your application in its production environment, you may wish to install the "),a("a",Z,[e("MinIO"),s(n)]),e(" service when installing Sail. MinIO provides an S3 compatible API that you may use to develop locally using Laravel's "),ee,e(` file storage driver without creating "test" storage buckets in your production S3 environment. If you choose to install MinIO while installing Sail, a MinIO configuration section will be added to your application's `),ae,e(" file.")]),ne,a("p",null,[e("Laravel Sail's default "),se,e(" file contains a service entry for "),a("a",ie,[e("Mailpit"),s(n)]),e(". Mailpit intercepts emails sent by your application during local development and provides a convenient web interface so that you can preview your email messages in your browser. When using Sail, Mailpit's default host is "),oe,e(" and is available via port 1025:")]),te,a("p",null,[e("To start a new "),a("a",le,[e("Laravel Tinker"),s(n)]),e(" session, you may execute the "),re,e(" command:")]),de,a("blockquote",null,[a("p",null,[ce,ue,e(" The "),pe,e(" command is powered by "),a("a",he,[e("Expose"),s(n)]),e(", an open source tunneling service by "),a("a",me,[e("BeyondCode"),s(n)]),e(".")])]),ve,ge,a("p",null,[e("Laravel Sail's Docker configuration includes support for "),a("a",be,[e("Xdebug"),s(n)]),e(", a popular and powerful debugger for PHP. In order to enable Xdebug, you will need to add a few variables to your application's "),ye,e(" file to "),a("a",ke,[e("configure Xdebug"),s(n)]),e(". To enable Xdebug you must set the appropriate mode(s) before starting Sail:")]),fe,a("p",null,[e("To debug your application while interacting with the application via a web browser, follow the "),a("a",_e,[e("instructions provided by Xdebug"),s(n)]),e(" for initiating an Xdebug session from the web browser.")]),a("p",null,[e("If you're using PhpStorm, please review JetBrain's documentation regarding "),a("a",xe,[e("zero-configuration debugging"),s(n)]),e(".")]),we])}const Te=o(d,[["render",Se],["__file","sail.html.vue"]]);export{Te as default};
