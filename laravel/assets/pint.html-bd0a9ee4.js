import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as l,c as r,b as n,d as e,e as s,a as i}from"./app-8cdff07c.js";const d={},p=i('<h1 id="laravel-pint" tabindex="-1"><a class="header-anchor" href="#laravel-pint" aria-hidden="true">#</a> Laravel Pint</h1><ul><li><a href="#introduction">Introduction</a></li><li><a href="#installation">Installation</a></li><li><a href="#running-pint">Running Pint</a></li><li><a href="#configuring-pint">Configuring Pint</a><ul><li><a href="#presets">Presets</a></li><li><a href="#rules">Rules</a></li><li><a href="#excluding-files-or-folders">Excluding Files / Folders</a></li></ul></li></ul><p><a name="introduction"></a></p><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2>',4),c={href:"https://github.com/laravel/pint",target:"_blank",rel:"noopener noreferrer"},u=i(`<p>Pint is automatically installed with all new Laravel applications so you may start using it immediately. By default, Pint does not require any configuration and will fix code style issues in your code by following the opinionated coding style of Laravel.</p><p><a name="installation"></a></p><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h2><p>Pint is included in recent releases of the Laravel framework, so installation is typically unnecessary. However, for older applications, you may install Laravel Pint via Composer:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">composer</span> require laravel/pint <span class="token parameter variable">--dev</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="running-pint"></a></p><h2 id="running-pint" tabindex="-1"><a class="header-anchor" href="#running-pint" aria-hidden="true">#</a> Running Pint</h2><p>You can instruct Pint to fix code style issues by invoking the <code>pint</code> binary that is available in your project&#39;s <code>vendor/bin</code> directory:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./vendor/bin/pint
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You may also run Pint on specific files or directories:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./vendor/bin/pint app/Models

./vendor/bin/pint app/Models/User.php
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pint will display a thorough list of all of the files that it updates. You can view even more detail about Pint&#39;s changes by providing the <code>-v</code> option when invoking Pint:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./vendor/bin/pint <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If you would like Pint to simply inspect your code for style errors without actually changing the files, you may use the <code>--test</code> option:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./vendor/bin/pint <span class="token parameter variable">--test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If you would like Pint to only modify the files that have uncommitted changes according to Git, you may use the <code>--dirty</code> option:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./vendor/bin/pint <span class="token parameter variable">--dirty</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="configuring-pint"></a></p><h2 id="configuring-pint" tabindex="-1"><a class="header-anchor" href="#configuring-pint" aria-hidden="true">#</a> Configuring Pint</h2><p>As previously mentioned, Pint does not require any configuration. However, if you wish to customize the presets, rules, or inspected folders, you may do so by creating a <code>pint.json</code> file in your project&#39;s root directory:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;preset&quot;</span><span class="token operator">:</span> <span class="token string">&quot;laravel&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In addition, if you wish to use a <code>pint.json</code> from a specific directory, you may provide the <code>--config</code> option when invoking Pint:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pint <span class="token parameter variable">--config</span> vendor/my-company/coding-style/pint.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="presets"></a></p><h3 id="presets" tabindex="-1"><a class="header-anchor" href="#presets" aria-hidden="true">#</a> Presets</h3><p>Presets defines a set of rules that can be used to fix code style issues in your code. By default, Pint uses the <code>laravel</code> preset, which fixes issues by following the opinionated coding style of Laravel. However, you may specify a different preset by providing the <code>--preset</code> option to Pint:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pint <span class="token parameter variable">--preset</span> psr12
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If you wish, you may also set the preset in your project&#39;s <code>pint.json</code> file:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;preset&quot;</span><span class="token operator">:</span> <span class="token string">&quot;psr12&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pint&#39;s currently supported presets are: <code>laravel</code>, <code>per</code>, <code>psr12</code>, and <code>symfony</code>.</p><p><a name="rules"></a></p><h3 id="rules" tabindex="-1"><a class="header-anchor" href="#rules" aria-hidden="true">#</a> Rules</h3><p>Rules are style guidelines that Pint will use to fix code style issues in your code. As mentioned above, presets are predefined groups of rules that should be perfect for most PHP projects, so you typically will not need to worry about the individual rules they contain.</p><p>However, if you wish, you may enable or disable specific rules in your <code>pint.json</code> file:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;preset&quot;</span><span class="token operator">:</span> <span class="token string">&quot;laravel&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;rules&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;simplified_null_return&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token property">&quot;braces&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token property">&quot;new_with_braces&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;anonymous_class&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token property">&quot;named_class&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35),v={href:"https://github.com/FriendsOfPHP/PHP-CS-Fixer",target:"_blank",rel:"noopener noreferrer"},h={href:"https://mlocati.github.io/php-cs-fixer-configurator",target:"_blank",rel:"noopener noreferrer"},m=i(`<p><a name="excluding-files-or-folders"></a></p><h3 id="excluding-files-folders" tabindex="-1"><a class="header-anchor" href="#excluding-files-folders" aria-hidden="true">#</a> Excluding Files / Folders</h3><p>By default, Pint will inspect all <code>.php</code> files in your project except those in the <code>vendor</code> directory. If you wish to exclude more folders, you may do so using the <code>exclude</code> configuration option:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;my-specific/folder&quot;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you wish to exclude all files that contain a given name pattern, you may do so using the <code>notName</code> configuration option:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;notName&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;*-my-file.php&quot;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you would like to exclude a file by providing an exact path to the file, you may do so using the <code>notPath</code> configuration option:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;notPath&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;path/to/excluded-file.php&quot;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function b(g,f){const a=t("ExternalLinkIcon");return l(),r("div",null,[p,n("p",null,[n("a",c,[e("Laravel Pint"),s(a)]),e(" is an opinionated PHP code style fixer for minimalists. Pint is built on top of PHP-CS-Fixer and makes it simple to ensure that your code style stays clean and consistent.")]),u,n("p",null,[e("Pint is built on top of "),n("a",v,[e("PHP-CS-Fixer"),s(a)]),e(". Therefore, you may use any of its rules to fix code style issues in your project: "),n("a",h,[e("PHP-CS-Fixer Configurator"),s(a)]),e(".")]),m])}const x=o(d,[["render",b],["__file","pint.html.vue"]]);export{x as default};
