import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as l,c,b as a,d as e,e as s,a as t}from"./app-8cdff07c.js";const r={},d=t('<h1 id="升级指南" tabindex="-1"><a class="header-anchor" href="#升级指南" aria-hidden="true">#</a> 升级指南</h1><ul><li><a href="#upgrade-10.0">从 9.x 升级到 10.0</a></li></ul><p><a name="high-impact-changes"></a></p><h2 id="高影响变化" tabindex="-1"><a class="header-anchor" href="#高影响变化" aria-hidden="true">#</a> 高影响变化</h2>',4),p=a("div",{class:"content-list",markdown:"1"},[a("ul",null,[a("li",null,[a("a",{href:"#updating-dependencies"},"更新依赖项")]),a("li",null,[a("a",{href:"#updating-minimum-stability"},"更新最小稳定性")])])],-1),u=a("p",null,[a("a",{name:"medium-impact-changes"})],-1),h=a("h2",{id:"中等影响变化",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#中等影响变化","aria-hidden":"true"},"#"),e(" 中等影响变化")],-1),g=a("div",{class:"content-list",markdown:"1"},[a("ul",null,[a("li",null,[a("a",{href:"#database-expressions"},"数据库表达式")]),a("li",null,[a("a",{href:"#model-dates-property"},"模型「日期」属性")]),a("li",null,[a("a",{href:"#monolog-3"},"Monolog 3")]),a("li",null,[a("a",{href:"#redis-cache-tags"},"Redis缓存标签")]),a("li",null,[a("a",{href:"#service-mocking"},"服务模拟")]),a("li",null,[a("a",{href:"#language-directory"},"语言目录")])])],-1),m=a("p",null,[a("a",{name:"low-impact-changes"})],-1),v=a("h2",{id:"较小影响变化",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#较小影响变化","aria-hidden":"true"},"#"),e(" 较小影响变化")],-1),b=a("div",{class:"content-list",markdown:"1"},[a("ul",null,[a("li",null,[a("a",{href:"#closure-validation-rule-messages"},"Closure 验证规则消息")]),a("li",null,[a("a",{href:"#public-path-binding"},"Public 路径绑定")]),a("li",null,[a("a",{href:"#query-exception-constructor"},"Query 异常构造函数")]),a("li",null,[a("a",{href:"#rate-limiter-return-values"},"Rate Limiter 返回值")]),a("li",null,[a("a",{href:"#relation-getbasequery-method"},[e("关系 "),a("code",null,"getBaseQuery"),e(" 方法")])]),a("li",null,[a("a",{href:"#redirect-home"},[a("code",null,"Redirect::home"),e(" 方法")])]),a("li",null,[a("a",{href:"#dispatch-now"},[a("code",null,"Bus::dispatchNow"),e(" 方法")])]),a("li",null,[a("a",{href:"#register-policies"},[a("code",null,"registerPolicies"),e(" 方法")])]),a("li",null,[a("a",{href:"#ulid-columns"},"ULID 列")])])],-1),k=t('<p><a name="upgrade-10.0"></a></p><h2 id="从-9-x-升级到-10-0" tabindex="-1"><a class="header-anchor" href="#从-9-x-升级到-10-0" aria-hidden="true">#</a> 从 9.x 升级到 10.0</h2><p><a name="estimated-upgrade-time-??-minutes"></a></p><h4 id="预计升级时间-10-分钟" tabindex="-1"><a class="header-anchor" href="#预计升级时间-10-分钟" aria-hidden="true">#</a> 预计升级时间：10 分钟</h4>',4),f=a("strong",null,"注意",-1),x={href:"https://laravelshift.com/",target:"_blank",rel:"noopener noreferrer"},_=t('<p><a name="updating-dependencies"></a></p><h3 id="更新依赖项" tabindex="-1"><a class="header-anchor" href="#更新依赖项" aria-hidden="true">#</a> 更新依赖项</h3><p><strong>影响可能性：高</strong></p><h4 id="要求-php-8-1-0" tabindex="-1"><a class="header-anchor" href="#要求-php-8-1-0" aria-hidden="true">#</a> 要求 PHP 8.1.0</h4><p>Laravel 现在要求 PHP 8.1.0 或更高版本。</p><h4 id="要求-composer-2-2-0" tabindex="-1"><a class="header-anchor" href="#要求-composer-2-2-0" aria-hidden="true">#</a> 要求 Composer 2.2.0</h4>',6),y={href:"https://getcomposer.org",target:"_blank",rel:"noopener noreferrer"},w=a("h4",{id:"更新-composer-依赖项",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#更新-composer-依赖项","aria-hidden":"true"},"#"),e(" 更新 Composer 依赖项")],-1),q=a("p",null,[e("你应该在应用程序的 "),a("code",null,"composer.json"),e(" 文件中更新以下依赖项：")],-1),L=a("div",{class:"content-list",markdown:"1"},[a("ul",null,[a("li",null,[a("code",null,"laravel/framework"),e(" 更新到 "),a("code",null,"^10.0")]),a("li",null,[a("code",null,"laravel/sanctum"),e(" 更新到 "),a("code",null,"^3.2")]),a("li",null,[a("code",null,"doctrine/dbal"),e(" 更新到 "),a("code",null,"^3.0")]),a("li",null,[a("code",null,"spatie/laravel-ignition"),e(" 更新到 "),a("code",null,"^2.0")])])],-1),P={href:"https://github.com/laravel/sanctum/blob/3.x/UPGRADE.",target:"_blank",rel:"noopener noreferrer"},$={href:"https://phpunit.de/announcements/phpunit-10.html",target:"_blank",rel:"noopener noreferrer"},B=a("code",null,"phpunit.xml",-1),R=a("code",null,"<coverage>",-1),D=a("code",null,"processUncoveredFiles",-1),S=a("code",null,"composer.json",-1),A=a("div",{class:"content-list",markdown:"1"},[a("ul",null,[a("li",null,[a("code",null,"nunomaduro/collision"),e(" 更新到 "),a("code",null,"^7.0")]),a("li",null,[a("code",null,"phpunit/phpunit"),e(" 更新到 "),a("code",null,"^10.0")])])],-1),E=t(`<p>最后，检查应用程序使用的任何其他第三方包，并验证你正在使用 Laravel 10 支持的适当版本。</p><p><a name="updating-minimum-stability"></a></p><h4 id="最小稳定性" tabindex="-1"><a class="header-anchor" href="#最小稳定性" aria-hidden="true">#</a> 最小稳定性</h4><p>你应该将应用程序的 <code>composer.json</code> 文件中的 <code>minimum-stability</code> 设置更新为 <code>stable</code>：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;minimum-stability&quot;</span><span class="token operator">:</span> <span class="token string">&quot;stable&quot;</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="应用程序" tabindex="-1"><a class="header-anchor" href="#应用程序" aria-hidden="true">#</a> 应用程序</h3><p><a name="public-path-binding"></a></p><h4 id="绑定公共路径" tabindex="-1"><a class="header-anchor" href="#绑定公共路径" aria-hidden="true">#</a> 绑定公共路径</h4><p><strong>影响可能性：低</strong></p><p>如果你的应用程序将通过 <code>path.public</code> 绑定到容器来自定义其「公共路径」，则应该更新你的代码以调用 <code>Illuminate\\Foundation\\Application</code> 对象提供的 <code>usePublicPath</code> 方法：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">usePublicPath</span><span class="token punctuation">(</span><span class="token constant">__DIR__</span><span class="token operator">.</span><span class="token string single-quoted-string">&#39;/public&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="授权" tabindex="-1"><a class="header-anchor" href="#授权" aria-hidden="true">#</a> 授权</h3><p><a name="register-policies"></a></p><h3 id="registerpolicies-方法" tabindex="-1"><a class="header-anchor" href="#registerpolicies-方法" aria-hidden="true">#</a> <code>registerPolicies</code> 方法</h3><p><strong>影响可能性：低</strong></p><p>框架会自动调用 <code>AuthServiceProvider</code> 的 <code>registerPolicies</code> 方法。因此，你可以从应用程序的 <code>AuthServiceProvider</code> 的 <code>boot</code> 方法中删除对此方法的调用。</p><h3 id="缓存" tabindex="-1"><a class="header-anchor" href="#缓存" aria-hidden="true">#</a> 缓存</h3><p><a name="redis-cache-tags"></a></p><h4 id="redis-缓存标签" tabindex="-1"><a class="header-anchor" href="#redis-缓存标签" aria-hidden="true">#</a> Redis 缓存标签</h4><p><strong>影响可能性：中等</strong></p><p>Redis 的 <a href="./cache#cache-tags">缓存标签</a> 支持已被重新编写，以提供更好的性能和存储效率。在 Laravel 之前的版本中，如果使用 Redis 作为应用程序的缓存驱动程序，则会在缓存中累积旧的缓存标签。</p><p>然而，为了正确地删除过时的缓存标记项，Laravel 新的 <code>cache:prune-stale-tags</code> Artisan 命令应该在你的应用程序的 <code>App\\Console\\Kernel</code> 类中 <a href="./scheduling">预定</a>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$schedule-&gt;command(&#39;cache:prune-stale-tags&#39;)-&gt;hourly();

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库" aria-hidden="true">#</a> 数据库</h3><p><a name="database-expressions"></a></p><h4 id="数据库表达式" tabindex="-1"><a class="header-anchor" href="#数据库表达式" aria-hidden="true">#</a> 数据库表达式</h4><p><strong>影响可能性：中等</strong></p><p>Laravel 10.x 重新编写了数据库「表达式」（通常是通过 <code>DB::raw</code> 生成），以便在未来提供额外的功能。需要注意的是，语法的原始字符串值现在必须通过表达式的 <code>getValue(Grammar $grammar)</code> 方法检索。现在不再支持将表达式强制转换为字符串使用 <code>(string)</code> 。</p><p><strong>通常，这不会影响最终用户的应用程序</strong>；但是，如果你的应用程序正在手动将数据库表达式强制转换为字符串使用 <code>(string)</code> 或直接调用表达式的 <code>__toString</code> 方法，则应该更新你的代码以调用 <code>getValue</code> 方法：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>DB</span><span class="token punctuation">;</span>

<span class="token variable">$expression</span> <span class="token operator">=</span> <span class="token class-name static-context">DB</span><span class="token operator">::</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;select 1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$string</span> <span class="token operator">=</span> <span class="token variable">$expression</span><span class="token operator">-&gt;</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name static-context">DB</span><span class="token operator">::</span><span class="token function">connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getQueryGrammar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="query-exception-constructor"></a></p><h4 id="查询异常构造函数" tabindex="-1"><a class="header-anchor" href="#查询异常构造函数" aria-hidden="true">#</a> 查询异常构造函数</h4><p><strong>影响可能性：非常低</strong></p><p><code>Illuminate\\Database\\QueryException</code> 构造函数现在接受一个字符串连接名称作为其第一个参数。如果你的应用程序正在手动抛出此异常，则应相应调整你的代码。</p><p><a name="ulid-columns"></a></p><h4 id="ulid-列" tabindex="-1"><a class="header-anchor" href="#ulid-列" aria-hidden="true">#</a> ULID 列</h4><p><strong>影响可能性：低</strong></p><p>当迁移调用 <code>ulid</code> 方法而没有任何参数时，列现在将被命名为 <code>ulid</code>。在 Laravel 的以前版本中，调用此方法而没有任何参数会创建一个错误命名为 <code>uuid</code> 的列：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$table-&gt;ulid();

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在调用 <code>ulid</code> 方法时显式指定列名，可以将列名传递给该方法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$table-&gt;ulid(&#39;ulid&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="eloquent" tabindex="-1"><a class="header-anchor" href="#eloquent" aria-hidden="true">#</a> Eloquent</h3><p><a name="model-dates-property"></a></p><h4 id="模型「dates」属性" tabindex="-1"><a class="header-anchor" href="#模型「dates」属性" aria-hidden="true">#</a> 模型「Dates」属性</h4><p><strong>影响可能性：中等</strong></p><p>已删除 Eloquent 模型中已过时属性。现在，你的应用程序应该使用<code>$casts</code> 属性：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">protected</span> <span class="token variable">$casts</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;deployed_at&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;datetime&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="relation-getbasequery-method"></a></p><h4 id="关系-getbasequery-方法" tabindex="-1"><a class="header-anchor" href="#关系-getbasequery-方法" aria-hidden="true">#</a> 关系 <code>getBaseQuery</code> 方法</h4><p><strong>影响可能性：非常低</strong></p><p>在 <code>Illuminate\\Database\\Eloquent\\Relations\\Relation</code> 类中的 <code>getBaseQuery</code> 方法已更名为 <code>toBase</code>。</p><h3 id="本地化" tabindex="-1"><a class="header-anchor" href="#本地化" aria-hidden="true">#</a> 本地化</h3><p><a name="language-directory"></a></p><h4 id="语言目录" tabindex="-1"><a class="header-anchor" href="#语言目录" aria-hidden="true">#</a> 语言目录</h4><p><strong>影响可能性：无</strong></p><p>虽然不涉及现有应用程序，但 Laravel 应用程序骨架不再默认包含 <code>lang</code> 目录。相反，在编写新的 Laravel 应用程序时，可以使用 <code>lang:publish</code> Artisan 命令进行发布：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan lang:publish
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="日志" tabindex="-1"><a class="header-anchor" href="#日志" aria-hidden="true">#</a> 日志</h3><p><a name="monolog-3"></a></p><h4 id="monolog-3" tabindex="-1"><a class="header-anchor" href="#monolog-3" aria-hidden="true">#</a> Monolog 3</h4><p><strong>影响可能性：中等</strong></p>`,61),I={href:"https://github.com/Seldaek/monolog/blob/main/UPGRADE.",target:"_blank",rel:"noopener noreferrer"},M=t(`<p>如果你正在使用 BugSnag 或 Rollbar 等第三方日志记录服务，请确保将这些第三方包升级到支持 Monolog 3.x 和 Laravel 10.x 版本的版本。</p><h3 id="队列" tabindex="-1"><a class="header-anchor" href="#队列" aria-hidden="true">#</a> 队列</h3><p><a name="dispatch-now"></a></p><h4 id="bus-dispatchnow-方法" tabindex="-1"><a class="header-anchor" href="#bus-dispatchnow-方法" aria-hidden="true">#</a> <code>Bus::dispatchNow</code> 方法</h4><p><strong>影响可能性：低</strong></p><p>已删除过时的 <code>Bus::dispatchNow</code> 和 <code>dispatch_now</code> 方法。目前你的应用程序应该分别使用 <code>Bus::dispatchSync</code> 和 <code>dispatch_sync</code> 方法。</p><h3 id="路由" tabindex="-1"><a class="header-anchor" href="#路由" aria-hidden="true">#</a> 路由</h3><p><a name="middleware-aliases"></a></p><h4 id="中间件别名" tabindex="-1"><a class="header-anchor" href="#中间件别名" aria-hidden="true">#</a> 中间件别名</h4><p><strong>影响可能性：非强制</strong></p><p>在新的 Laravel 应用程序中，<code>App\\Http\\Kernel</code> 类的 <code>$routeMiddleware</code> 属性已更名为 <code>$middlewareAliases</code>，以更好地反映其用途。你可以在现有应用程序中重命名此属性，但不是强制的。</p><p><a name="rate-limiter-return-values"></a></p><h4 id="限速器返回值" tabindex="-1"><a class="header-anchor" href="#限速器返回值" aria-hidden="true">#</a> 限速器返回值</h4><p><strong>影响可能性: 低</strong></p><p>调用 <code>RateLimiter::attempt</code> 方法时，该方法现在将返回由提供的闭包返回的值。如果没有返回任何值或返回 <code>null</code>，则 <code>attempt</code> 方法将返回 <code>true</code>：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$value</span> <span class="token operator">=</span> <span class="token class-name static-context">RateLimiter</span><span class="token operator">::</span><span class="token function">attempt</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;key&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;example&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$value</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;example&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="redirect-home"></a></p><h4 id="redirect-home-方法" tabindex="-1"><a class="header-anchor" href="#redirect-home-方法" aria-hidden="true">#</a> <code>Redirect::home</code> 方法</h4><p><strong>影响可能性: 非常低</strong></p><p>已删除不推荐使用的 <code>Redirect::home</code> 方法。相反，你的应用程序应该重定向到一个明确命名的路由：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token class-name static-context">Redirect</span><span class="token operator">::</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;home&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h3><p><a name="service-mocking"></a></p><h4 id="服务模拟" tabindex="-1"><a class="header-anchor" href="#服务模拟" aria-hidden="true">#</a> 服务模拟</h4><p><strong>影响可能性: 中等</strong></p><p>已从框架中删除不推荐使用的 <code>MocksApplicationServices</code> 特性。该特性提供了类似于 <code>expectsEvents</code>、<code>expectsJobs</code> 和 <code>expectsNotifications</code> 这样的测试方法。</p><p>如果你的应用程序使用这些方法，我们建议你过渡到 <code>Event::fake</code>、<code>Bus::fake</code> 和 <code>Notification::fake</code>。你可以通过相应组件的文档了解有关模拟的更多信息。</p><h3 id="验证" tabindex="-1"><a class="header-anchor" href="#验证" aria-hidden="true">#</a> 验证</h3><p><a name="closure-validation-rule-messages"></a></p><h4 id="闭包验证规则消息" tabindex="-1"><a class="header-anchor" href="#闭包验证规则消息" aria-hidden="true">#</a> 闭包验证规则消息</h4><p><strong>影响可能性: 非常低</strong></p><p>当编写基于闭包的自定义验证规则时，调用 <code>$fail</code> 回调超过一次，现在会将消息附加到数组中，而不是覆盖先前的消息。通常，这不会影响你的应用程序。</p><p>此外，<code>$fail</code> 回调现在返回一个对象。如果你之前对验证闭包的返回类型进行了类型提示，这可能需要你更新你的类型提示：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">rules</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$attribute</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token variable">$fail</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$fail</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;validation.translation.key&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="miscellaneous"></a></p><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3>`,36),N=a("code",null,"laravel/laravel",-1),H={href:"https://github.com/laravel/laravel",target:"_blank",rel:"noopener noreferrer"},G={href:"https://github.com/laravel/laravel/compare/9.x...10.x",target:"_blank",rel:"noopener noreferrer"};function V(j,C){const n=i("ExternalLinkIcon");return l(),c("div",null,[d,p,u,h,g,m,v,b,k,a("blockquote",null,[a("p",null,[f,e(" 我们试图记录每一个可能的破坏性变更。由于其中一些破坏性变更位于框架的底层部分，因此只有其中一部分变更实际上会影响你的应用程序。想节省时间吗？你可以使用 "),a("a",x,[e("Laravel Shift"),s(n)]),e(" 来帮助自动升级你的应用程序。")])]),_,a("p",null,[e("Laravel 现在要求 "),a("a",y,[e("Composer"),s(n)]),e(" 2.2.0 或更高版本。")]),w,q,L,a("p",null,[e("如果你从 2.x 发布系列升级到 Sanctum 3.x，请参考 "),a("a",P,[e("Sanctum 升级指南"),s(n)]),e("。")]),a("p",null,[e("此外，如果你想使用 "),a("a",$,[e("PHPUnit 10"),s(n)]),e("，则应该从应用程序的 "),B,e(" 配置文件的 "),R,e(" 部分中删除 "),D,e(" 属性。然后，更新应用程序的 "),S,e(" 文件中的以下依赖项：")]),A,E,a("p",null,[e("Laravel 的 Monolog 依赖项已更新为 Monolog 3.x。如果你正在直接与 Monolog 交互，则应该查看 Monolog 的"),a("a",I,[e("升级指南"),s(n)]),e("。")]),M,a("p",null,[e("我们还鼓励你查看 "),N,e(" "),a("a",H,[e("GitHub 存储库"),s(n)]),e(" 中的更改。虽然这些更改中许多都不是必需的，但你可能希望将这些文件与你的应用程序保持同步。本次升级指南将覆盖部分更改，但其他的更改，例如对配置文件或注释的更改，不会被覆盖。")]),a("p",null,[e("你可以使用 "),a("a",G,[e("GitHub 比较工具"),s(n)]),e(" 轻松查看更改，并选择哪些更新对你重要。但是，GitHub 比较工具显示的许多更改都是由于我们的组织采用了 PHP 本地类型。这些更改是向后兼容的，迁移到 Laravel 10 期间采用它们是可选的。")])])}const F=o(r,[["render",V],["__file","upgrade.html.vue"]]);export{F as default};
