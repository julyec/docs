import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o,c as i,b as e,d as a,e as r,a as t}from"./app-8cdff07c.js";const d={},c=t('<h1 id="valet-集成环境" tabindex="-1"><a class="header-anchor" href="#valet-集成环境" aria-hidden="true">#</a> Valet 集成环境</h1><ul><li><a href="#introduction">简介</a></li><li><a href="#installation">安装</a><ul><li><a href="#upgrading-valet">升级</a></li></ul></li><li><a href="#serving-sites">服务站点</a><ul><li><a href="#the-park-command">Park 命令</a></li><li><a href="#the-link-command">Link 命令</a></li><li><a href="#securing-sites">使用 TLS 保护站点</a></li><li><a href="#serving-a-default-site">服务默认站点</a></li><li><a href="#per-site-php-versions">默认 PHP 版本</a></li></ul></li><li><a href="#sharing-sites">共享站点</a><ul><li><a href="#sharing-sites-via-ngrok">通过 Ngrok 共享站点</a></li><li><a href="#sharing-sites-via-expose">通过 Expose 共享站点</a></li><li><a href="#sharing-sites-on-your-local-network">共享本地网络站点</a></li></ul></li><li><a href="#site-specific-environment-variables">网站特定环境变量</a></li><li><a href="#proxying-services">代理服务</a></li><li><a href="#custom-valet-drivers">自定义 Valet 驱动</a><ul><li><a href="#local-drivers">本地驱动</a></li></ul></li><li><a href="#other-valet-commands">其他 Valet 命令</a></li><li><a href="#valet-directories-and-files">Valet 目录和文件</a><ul><li><a href="#disk-access">磁盘访问</a></li></ul></li></ul><p><a name="introduction"></a></p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2>',4),h={href:"https://github.com/laravel/valet",target:"_blank",rel:"noopener noreferrer"},p={href:"https://www.nginx.com/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://en.wikipedia.org/wiki/Dnsmasq",target:"_blank",rel:"noopener noreferrer"},v=e("code",null,"*.test",-1),g=e("p",null,[a("总之，Valet 是一个速度极快的 Laravel 开发环境，仅仅占用了 7 MB 内存。Valet 并不能完全取代 "),e("a",{href:"./sail"},"Sail"),a(" 或 "),e("a",{href:"./homestead"},"Homestead"),a("，只是提供了另外一种使用起来更加灵活、方便、以及内存占用更小的选择。")],-1),m=e("p",null,"开箱即用，Valet 支持但不局限于以下内容：",-1),b={id:"valet-support",markdown:"1"},f={href:"https://laravel.com",target:"_blank",rel:"noopener noreferrer"},_={href:"https://roots.io/bedrock/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://cakephp.org",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.concretecms.com/",target:"_blank",rel:"noopener noreferrer"},P={href:"https://contao.org/en/",target:"_blank",rel:"noopener noreferrer"},V={href:"https://craftcms.com",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.drupal.org/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.expressionengine.com/",target:"_blank",rel:"noopener noreferrer"},$={href:"https://jigsaw.tighten.co",target:"_blank",rel:"noopener noreferrer"},H={href:"https://www.joomla.org/",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/themsaid/katana",target:"_blank",rel:"noopener noreferrer"},L={href:"https://getkirby.com/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://magento.com/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://octobercms.com/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://sculpin.io/",target:"_blank",rel:"noopener noreferrer"},D={href:"https://www.slimframework.com",target:"_blank",rel:"noopener noreferrer"},T={href:"https://statamic.com",target:"_blank",rel:"noopener noreferrer"},E=e("li",null,"Static HTML",-1),M={href:"https://symfony.com",target:"_blank",rel:"noopener noreferrer"},R={href:"https://wordpress.org",target:"_blank",rel:"noopener noreferrer"},F={href:"https://framework.zend.com",target:"_blank",rel:"noopener noreferrer"},j=e("p",null,[a("但是，你可以使用自己的 "),e("a",{href:"#custom-valet-drivers"},"自定义驱动程序"),a(" 扩展 Valet 。 .")],-1),B=e("p",null,[e("a",{name:"installation"})],-1),U=e("h2",{id:"安装",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#安装","aria-hidden":"true"},"#"),a(" 安装")],-1),I={href:"https://brew.sh/",target:"_blank",rel:"noopener noreferrer"},A=t(`<p>首先，你首先需要使用以下 <code>update</code> 命令确保 Homebrew 是最新的：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>brew update
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，你应该使用 Homebrew 安装 PHP:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>brew <span class="token function">install</span> php
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),O={href:"https://getcomposer.org",target:"_blank",rel:"noopener noreferrer"},W=e("code",null,"~/.composer/vendor/bin",-1),X=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">composer</span> global require laravel/valet
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后，你可以执行 Valet 的 <code>install</code> 命令。这将配置并安装 Valet 和 DnsMasq。此外，Valet 依赖的守护程序将配置为在系统启动时启动：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>valet <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装 Valet 后，请尝试使用如 之类的命令 <code>ping foobar.test</code> ping 终端上的任何 <code>*.test</code> 域。 如果 Valet 安装正确，你应该看到该域在 <code>127.0.0.1</code> 上响应。</p><p>每当你的机器启动时，Valet 将自动启动其所需的相关服务。</p><p><a name="php-versions"></a></p><h4 id="php-版本" tabindex="-1"><a class="header-anchor" href="#php-版本" aria-hidden="true">#</a> PHP 版本</h4><blockquote><p>注意：你无需修改全局的 PHP 版本，你可以通过 <code>isolate</code> <a href="#per-site-php-versions">命令</a>指定 Valet 使用每个站点的 PHP 版本</p></blockquote><p>Valet 允许你使用 <code>valet use php@version</code> 命令切换 PHP 版本。如果尚未安装， Valet 将通过 Homebrew 安装指定的 PHP 版本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>valet use php@8.1

valet use php
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你还可以在项目的根目录中创建一个 <code>.valetphprc</code> 文件。 <code>.valetphprc</code> 文件应包含站点应使用的PHP版本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php@8.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建此文件后，你只需执行 <code>valet use</code> 命令，命令将通过读取文件来确定站点的首选PHP版本。</p><blockquote><p><strong>注意</strong><br> Valet一次仅提供一个PHP版本，即使你安装了多个PHP版本。</p></blockquote><p><a name="database"></a></p><h4 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库" aria-hidden="true">#</a> 数据库</h4>`,16),J={href:"https://dbngin.com/",target:"_blank",rel:"noopener noreferrer"},K=e("code",null,"root",-1),Q=e("code",null,"127.0.0.1",-1),z=t(`<p><a name="resetting-your-installation"></a></p><h4 id="重置安装" tabindex="-1"><a class="header-anchor" href="#重置安装" aria-hidden="true">#</a> 重置安装</h4><p>如果你无法使Valet安装正常运行，请执行<code>composer global require laravel/valet</code>命令，然后执行<code>valet install</code>将重置你的安装并可以解决各种问题。在极少数情况下，可能需要通过执行<code>valet uninstall --force</code>，然后执行<code>valet install</code>来进行“硬重置”Valet。</p><p><a name="upgrading-valet"></a></p><h3 id="升级-valet" tabindex="-1"><a class="header-anchor" href="#升级-valet" aria-hidden="true">#</a> 升级 Valet</h3><p>你可以通过在终端中执行<code>composer global require laravel/valet</code>命令来更新Valet安装。升级后，建议运行<code>valet install</code>命令，以便Valet可以根据需要对你的配置文件进行其他升级。</p><p><a name="serving-sites"></a></p><h2 id="运行站点服务" tabindex="-1"><a class="header-anchor" href="#运行站点服务" aria-hidden="true">#</a> 运行站点服务</h2><p>安装Valet后，你可以开始为你的Laravel应用程序提供服务。Valet提供了两个命令来帮助你服务你的应用程序： <code>park</code> 和 <code>link</code> 。</p><p><a name="the-park-command"></a></p><h3 id="park-命令" tabindex="-1"><a class="header-anchor" href="#park-命令" aria-hidden="true">#</a> <code>park</code> 命令</h3><p><code>park</code> 命令在你的电脑上注册一个包含应用程序的目录。 一旦该目录被 Valet「parked」，该目录下所有应用都可以使用 <code>http://文件夹名.test</code> 来访问：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ~/Sites

valet park
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就是所有需要手动的操作。现在，任何你创建在「parked」目录中的应用都可以使用 <code>http://文件夹名.test</code> 域名访问。例如，如果你的「parked」路径下包括一个名为「laravel」的目录，可以使用 <code>http://laravel.test</code> 来访问。此外，Valet 自动允许二级域名访问此站点。 (<code>http://foo.laravel.test</code>)。</p><p><a name="the-link-command"></a></p><h3 id="link-命令" tabindex="-1"><a class="header-anchor" href="#link-命令" aria-hidden="true">#</a> <code>link</code> 命令</h3><p>该 <code>link</code> 命令也可以用来为你的 Laravel 站点提供服务。如果要为目录中的单个站点而不是整个目录提供服务，则此命令非常有用。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ~/Sites/laravel

valet <span class="token function">link</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>link</code> 命令链接一个站点后，你可以使用目录名称来访问。例如，你可以在浏览器中通过 <code>http://laravel.test</code> 访问。另外，Valet 自动添加了站点二级目录的访问功能，例如 (<code>http://foo.laravel.test</code>)。</p><p>如果你想要使用不同的域名来访问相同站点，你可以使用 <code>link</code> 命令来构造站点。例如，你可以使用以下命令来指定域名 <code>http://application.test</code> ：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ~/Sites/laravel

valet <span class="token function">link</span> application
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，你也可以使用 <code>link</code> 命令来设置子域名访问：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>valet <span class="token function">link</span> api.application
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你可以使用 <code>links</code> 命令来查看所有的目录链接：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>valet links
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>unlink</code> 命令可以用来删除目录链接：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ~/Sites/laravel

valet unlink
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="securing-sites"></a></p><h3 id="使用-tls-保护站点" tabindex="-1"><a class="header-anchor" href="#使用-tls-保护站点" aria-hidden="true">#</a> 使用 TLS 保护站点</h3><p>默认情况下，Valet 使用 HTTP 协议提供服务。当然，如果你想使用 HTTP/2 通过 TLS 加密你的站点，你可以使用 <code>secure</code> 命令。例如， 如果你的站点由 <code>laravel.test</code> 域名的 Valet 提供服务，可以使用以下命令为站点实现安全保护功能：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>valet secure laravel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要 「解除保护」并恢复 HTTP 访问 ，请使用 <code>unsecure</code> 命令。像 <code>secure</code> 命令一样，该命令接受你想要解除保护的主机名：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>valet unsecure laravel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="serving-a-default-site"></a></p><h3 id="默认站点" tabindex="-1"><a class="header-anchor" href="#默认站点" aria-hidden="true">#</a> 默认站点</h3><p>有时，当访问未知的 <code>test</code> 域时，你可能希望访问「默认」站点，而不是 <code>404</code> 。要实现这一点，你可以在 <code>~/.config/valet/config.json</code> 配置文件中添加一个 <code>default</code> 选项。 并设置默认站点的路径：</p><pre><code>&quot;default&quot;: &quot;/Users/Sally/Sites/example-site&quot;,
</code></pre><p><a name="per-site-php-versions"></a></p><h3 id="站点-php-版本" tabindex="-1"><a class="header-anchor" href="#站点-php-版本" aria-hidden="true">#</a> 站点 PHP 版本</h3><p>默认情况下，Valet 使用你的全局 PHP 安装来为你的站点提供服务。 但是，如果你需要跨多个站点支持多个 PHP 版本，则可以使用 <code>isolate</code> 命令指定特定站点的 PHP 版本。 <code>isolate</code> 命令将 Valet 配置为当前工作目录的站点使用指定的 PHP 版本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ~/Sites/example-site

valet isolate php@8.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你的站点名称与目录名称不一致，你可以使用 <code>--site</code> 选项指定站点名称：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>valet isolate php@8.0 <span class="token parameter variable">--site</span><span class="token operator">=</span><span class="token string">&quot;site-name&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为方便起见，你可以使用 <code>valet php</code>、<code>composer</code> 和 <code>which-php</code> 命令根据站点配置的 PHP 版本代理对适合的 PHP CLI 或工具的调用：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>valet php
valet <span class="token function">composer</span>
valet which-php
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以执行 <code>isolated</code> 命令来显示所有隔离站点及其 PHP 版本的列表：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>valet isolated
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要将站点恢复为 Valet 全局安装的 PHP 版本，你可以从站点的根目录调用 <code>unisolate</code> 命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>valet unisolate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="sharing-sites"></a></p><h2 id="共享站点" tabindex="-1"><a class="header-anchor" href="#共享站点" aria-hidden="true">#</a> 共享站点</h2><p>Valet 甚至包含了一个与全世界共享你的本地站点的命令，提供了一种在移动设备上测试你的站点或与团队成员和客户共享的简单方法。</p><p><a name="sharing-sites-via-ngrok"></a></p><h3 id="使用-ngrok-共享站点" tabindex="-1"><a class="header-anchor" href="#使用-ngrok-共享站点" aria-hidden="true">#</a> 使用 Ngrok 共享站点</h3><p>要共享站点，请在终端中进到站点目录，并运行 <code>valet share</code> 命令。一个公开可访问的 URL 将会插入到你的剪贴板中，你可以分享给团队成员或在浏览器中打开它:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ~/Sites/laravel

valet share
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,56),Z=e("code",null,"Control + C",-1),G={href:"https://dashboard.ngrok.com/signup",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://dashboard.ngrok.com/get-started/your-authtoken",target:"_blank",rel:"noopener noreferrer"},ee=e("strong",null,"提示",-1),ae=e("code",null,"valet share --region=eu",-1),ne={href:"https://ngrok.com/docs",target:"_blank",rel:"noopener noreferrer"},re=e("p",null,[e("a",{name:"sharing-sites-via-expose"})],-1),te=e("h3",{id:"通过-expose-共享网站",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#通过-expose-共享网站","aria-hidden":"true"},"#"),a(" 通过 Expose 共享网站")],-1),se={href:"https://expose.dev/",target:"_blank",rel:"noopener noreferrer"},le=e("code",null,"expose",-1),oe={href:"https://expose.dev/docs",target:"_blank",rel:"noopener noreferrer"},ie=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ~/Sites/laravel

expose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以按下 <code>Control + C</code> 停止共享网站。</p><p><a name="sharing-sites-on-your-local-network"></a></p><h3 id="在局域网里共享网站" tabindex="-1"><a class="header-anchor" href="#在局域网里共享网站" aria-hidden="true">#</a> 在局域网里共享网站</h3><p>Valet 默认限制本机 <code>127.0.0.1</code> 访问，以便你的开发机器不会受到来自互联网的安全风险。</p><p>如果你想让局域网里的其他设备通过你的局域网 IP 地址访问 Valet 网站（例如：<code>192.168.1.10/application.test</code>），则需要手动编辑该网站的 Nginx 配置文件，删除 <code>listen</code> 指令上的限制。你需要删除端口 80 和 443 的 <code>listen</code> 指令前缀 <code>127.0.0.1：</code>。</p><p>如果你没有在项目上运行 <code>valet secure</code>，则可以通过编辑 <code>/usr/local/etc/nginx/valet/valet.conf</code> 文件来为所有非 HTTPS 网站打开网络访问。但是，如果你通过 HTTPS 提供项目站点（即你已经对站点运行了 <code>valet secure</code>），则应编辑 <code>~/.config/valet/Nginx/app-name.test</code> 文件。</p><p>更新了 Nginx 配置后，需要运行 <code>valet restart</code> 命令让配置更改生效。</p><p><a name="site-specific-environment-variables"></a></p><h2 id="站点特定环境变量" tabindex="-1"><a class="header-anchor" href="#站点特定环境变量" aria-hidden="true">#</a> 站点特定环境变量</h2><p>一些使用其他框架的应用程序可能依赖于服务器环境变量，但不提供在你的项目中配置这些变量的方法。 Valet 允许你通过在项目根目录内添加 <code>.valet-env.php</code> 文件来配置站点特定环境变量。此文件应返回一个站点 / 环境变量对数组，该数组将添加到数组中指定的每个站点的全局 <code>$_SERVER</code> 数组中：</p><pre><code>&lt;?php

return [
    // 将 laravel.test 站点的 $_SERVER[&#39;key&#39;] 设置为 &quot;value&quot;...
    &#39;laravel&#39; =&gt; [
        &#39;key&#39; =&gt; &#39;value&#39;,
    ],

    // 将所有站点的 $_SERVER[&#39;key&#39;] 设置为 &quot;value&quot;...
    &#39;*&#39; =&gt; [
        &#39;key&#39; =&gt; &#39;value&#39;,
    ],
];
</code></pre><p><a name="proxying-services"></a></p><h2 id="代理服务" tabindex="-1"><a class="header-anchor" href="#代理服务" aria-hidden="true">#</a> 代理服务</h2><p>有时你可能希望将 Valet 域名代理到本地计算机上的另一项服务。 例如，你可能偶尔需要运行 Valet，同时在 Docker 中运行单独的站点； 但是， Valet 和 Docker 不能同时绑定到80端口。</p><p>为了解决这个问题，你可以用 <code>proxy</code> 命令去生成一个代理。例如，你可以代理所有流量从 <code>http://elasticsearch.test</code> 到 <code>http://127.0.0.1:9200</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 通过 HTTP 代理...</span>
valet proxy elasticsearch http://127.0.0.1:9200

<span class="token comment"># 通过 TLS + HTTP/2 代理...</span>
valet proxy elasticsearch http://127.0.0.1:9200 <span class="token parameter variable">--secure</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以用 <code>unproxy</code> 命令去删除一个代理：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>valet unproxy elasticsearch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你可以用 <code>proxies</code> 命令列出所有被代理的站点配置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>valet proxies
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="custom-valet-drivers"></a></p><h2 id="定制-valet-驱动" tabindex="-1"><a class="header-anchor" href="#定制-valet-驱动" aria-hidden="true">#</a> 定制 Valet 驱动</h2><p>你可以编写自己的 Valet「驱动」来为在 Valet 本身不支持的框架或 CMS 上运行的 PHP 应用程序提供服务。安装 Valet 时，创建了一个 <code>~/.config/valet/Drivers</code> 目录，其中包含一个 <code>SampleValetDriver.php</code> 文件。该文件包含一个示例驱动程序实现，用于演示如何编写自定义驱动程序。编写驱动只需要你实现三种方法： <code>serves</code> ， <code>isStaticFile</code> ， 和 <code>frontControllerPath</code>。</p><p>这三种方法都接收 <code>$sitePath</code>, <code>$siteName</code>, 和 <code>$uri</code> 值作为其参数。 <code>$sitePath</code> 是你机器上服务的网站的完整的路径， 如 <code>/Users/Lisa/Sites/my-project</code>。 <code>$siteName</code> 是 「host」/「site name」域名的一部分 (<code>my-project</code>)。<code>$uri</code> 是传入的请求 URI (<code>/foo/bar</code>)。</p><p>完成你的自定义 Valet 驱动后，使用 <code>frameworkvaletdriver.php</code> 命名约定将它放在<code>~/.config/valet/Drivers</code> 目录中。 例如，如果你正在为 WordPress 编写自定义 Valet 驱动，则文件名应为 <code>WordPressValetDriver.php</code>。</p><p>我们来看看自定义的 Valet 驱动程序应该实现的每种方法的示例实现。</p><p><a name="the-serves-method"></a></p><h4 id="serves-方法" tabindex="-1"><a class="header-anchor" href="#serves-方法" aria-hidden="true">#</a> <code>serves</code> 方法</h4><p>如果驱动程序应该处理传入的请求，<code>serves</code> 方法应该返回 <code>true</code>。否则，该方法应返回 <code>false</code>。因此，在这个方法中，你应该尝试确定给定的<code>$sitePath</code> 是否包含你试图服务的类型的项目。</p><p>例如，假设我们正在编写一个 <code>WordPressValetDriver</code>。我们的 <code>serves</code> 方法可能看起来如下所示：</p><pre><code>/**
 * 确定驱动程序是否为请求服务。
 *
 * @param  string  $sitePath
 * @param  string  $siteName
 * @param  string  $uri
 * @return bool
 */
public function serves($sitePath, $siteName, $uri)
{
    return is_dir($sitePath.&#39;/wp-admin&#39;);
}
</code></pre><p><a name="the-isstaticfile-method"></a></p><h4 id="isstaticfile-方法" tabindex="-1"><a class="header-anchor" href="#isstaticfile-方法" aria-hidden="true">#</a> <code>isStaticFile</code> 方法</h4><p><code>isStaticFile</code> 应当确定即将到来的请求是否针对一个「静态」文件，比如：图片和样式表。如果文件是静态的，此方法应当返回静态文件在磁盘上的完全限定路径。如果即将到来的请求不是针对一个静态文件，这个方法应当返回 <code>false</code>：</p><pre><code>/**
 * 确定传入请求是否针对静态文件。
 *
 * @param  string  $sitePath
 * @param  string  $siteName
 * @param  string  $uri
 * @return string|false
 */
public function isStaticFile($sitePath, $siteName, $uri)
{
    if (file_exists($staticFilePath = $sitePath.&#39;/public/&#39;.$uri)) {
        return $staticFilePath;
    }

    return false;
}
</code></pre><blockquote><p><strong>注意</strong><br> 仅当 <code>serves</code> 方法对传入请求返回 <code>true</code> 且请求 URI 不是 <code>/</code> 时，才会调用 <code>isStaticFile</code> 方法。</p></blockquote><p><a name="the-frontcontrollerpath-method"></a></p><h4 id="frontcontrollerpath-方法" tabindex="-1"><a class="header-anchor" href="#frontcontrollerpath-方法" aria-hidden="true">#</a> <code>frontControllerPath</code> 方法</h4><p><code>frontControllerPath</code> 方法应该返回你的应用的「前端控制器」的完全限定路径，它通常是 「index.php」 或等效的文件：</p><pre><code>/**
 * 获取应用程序前端控制器的完全解析路径。
 *
 * @param  string  $sitePath
 * @param  string  $siteName
 * @param  string  $uri
 * @return string
 */
public function frontControllerPath($sitePath, $siteName, $uri)
{
    return $sitePath.&#39;/public/index.php&#39;;
}
</code></pre><p><a name="local-drivers"></a></p><h3 id="本地驱动" tabindex="-1"><a class="header-anchor" href="#本地驱动" aria-hidden="true">#</a> 本地驱动</h3><p>如果你想要为单个应用自定义一个 Valet 驱动，请在应用根目录创建一个 <code>LocalValetDriver.php</code> 文件。你的自定义驱动可以继承 <code>ValetDriver</code> 基类或继承现有应用的特定驱动程序，如 <code>LaravelValetDriver</code>：</p><pre><code>use Valet\\Drivers\\LaravelValetDriver;

class LocalValetDriver extends LaravelValetDriver
{
    /**
     * 确定驱动程序是否给请求提供服务。
     *
     * @param  string  $sitePath
     * @param  string  $siteName
     * @param  string  $uri
     * @return bool
     */
    public function serves($sitePath, $siteName, $uri)
    {
        return true;
    }

    /**
     * 获取对应用程序的前端控制器的完全解析路径。
     *
     * @param  string  $sitePath
     * @param  string  $siteName
     * @param  string  $uri
     * @return string
     */
    public function frontControllerPath($sitePath, $siteName, $uri)
    {
        return $sitePath.&#39;/public_html/index.php&#39;;
    }
}
</code></pre><p><a name="other-valet-commands"></a></p><h2 id="其他-valet-命令" tabindex="-1"><a class="header-anchor" href="#其他-valet-命令" aria-hidden="true">#</a> 其他 Valet 命令</h2><div class="overflow-auto"><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>valet list</code></td><td>列出所有 Valet 命令</td></tr><tr><td><code>valet forget</code></td><td>从「驻留」目录运行此命令，将其从驻留目录列表中删除。</td></tr><tr><td><code>valet log</code></td><td>查看 Valet 服务记录的日志列表。</td></tr><tr><td><code>valet paths</code></td><td>查看所有「驻留」的路径。</td></tr><tr><td><code>valet restart</code></td><td>重启 Valet 守护进程。</td></tr><tr><td><code>valet start</code></td><td>启动 Valet 守护进程。</td></tr><tr><td><code>valet stop</code></td><td>停止 Valet 守护进程。</td></tr><tr><td><code>valet trust</code></td><td>为 Brew 和 Valet 添加 sudoers 文件，使 Valet 输入命令的时候不需要输入密码。</td></tr><tr><td><code>valet uninstall</code></td><td>卸载 Valet：显示手动卸载的说明。 传递 <code>--force</code> 选项来主动删除 Valet 的所有资源。</td></tr></tbody></table></div><p><a name="valet-directories-and-files"></a></p><h2 id="valet-目录和文件" tabindex="-1"><a class="header-anchor" href="#valet-目录和文件" aria-hidden="true">#</a> Valet 目录和文件</h2><p>你可能会发现以下目录和文件信息对排查你的 Valet 环境故障问题很有帮助：</p><h4 id="config-valet" tabindex="-1"><a class="header-anchor" href="#config-valet" aria-hidden="true">#</a> <code>~/.config/valet</code></h4><p>包含 Valet 所有的配置，你可能希望对此文件夹进行备份。</p><h4 id="config-valet-dnsmasq-d" tabindex="-1"><a class="header-anchor" href="#config-valet-dnsmasq-d" aria-hidden="true">#</a> <code>~/.config/valet/dnsmasq.d/</code></h4><p>此目录包含 DNSMasq 的配置。</p><h4 id="config-valet-drivers" tabindex="-1"><a class="header-anchor" href="#config-valet-drivers" aria-hidden="true">#</a> <code>~/.config/valet/Drivers/</code></h4><p>此目录包含 Valet 的驱动，驱动判断如何为特定的 framework/CMS 提供服务。</p><h4 id="config-valet-extensions" tabindex="-1"><a class="header-anchor" href="#config-valet-extensions" aria-hidden="true">#</a> <code>~/.config/valet/Extensions/</code></h4><p>此目录包括自定义的 Valet 扩展和指令。</p><h4 id="config-valet-nginx" tabindex="-1"><a class="header-anchor" href="#config-valet-nginx" aria-hidden="true">#</a> <code>~/.config/valet/Nginx/</code></h4><p>此目录包含所有 Valet 的 Nginx 站点配置，当运行 <code>install</code>、<code>secure</code>、<code>tld</code> 指令时会重建这些配置文件。</p><h4 id="config-valet-sites" tabindex="-1"><a class="header-anchor" href="#config-valet-sites" aria-hidden="true">#</a> <code>~/.config/valet/Sites/</code></h4><p>此目录包含所有 <a href="#the-link-command">链接项目</a>的符号链接。</p><h4 id="config-valet-config-json" tabindex="-1"><a class="header-anchor" href="#config-valet-config-json" aria-hidden="true">#</a> <code>~/.config/valet/config.json</code></h4><p>此文件是 Valet 的主要配置文件。</p><h4 id="config-valet-valet-sock" tabindex="-1"><a class="header-anchor" href="#config-valet-valet-sock" aria-hidden="true">#</a> <code>~/.config/valet/valet.sock</code></h4><p>这个文件是 Valet 中 Nginx 安装使用的 PHP-FPM 套接字，只有在 PHP 正常运行的情况下，它才会存在。</p><h4 id="config-valet-log-fpm-php-www-log" tabindex="-1"><a class="header-anchor" href="#config-valet-log-fpm-php-www-log" aria-hidden="true">#</a> <code>~/.config/valet/Log/fpm-php.www.log</code></h4><p>此文件是 PHP 错误的用户日志。</p><h4 id="config-valet-log-nginx-error-log" tabindex="-1"><a class="header-anchor" href="#config-valet-log-nginx-error-log" aria-hidden="true">#</a> <code>~/.config/valet/Log/nginx-error.log</code></h4><p>此文件是 Nginx 错误的用户日志。</p><h4 id="usr-local-var-log-php-fpm-log" tabindex="-1"><a class="header-anchor" href="#usr-local-var-log-php-fpm-log" aria-hidden="true">#</a> <code>/usr/local/var/log/php-fpm.log</code></h4><p>此文件是 PHP-FPM 错误的系统日志。</p><h4 id="usr-local-var-log-nginx" tabindex="-1"><a class="header-anchor" href="#usr-local-var-log-nginx" aria-hidden="true">#</a> <code>/usr/local/var/log/nginx</code></h4><p>此目录包含 Nginx 的访问和错误日志。</p><h4 id="usr-local-etc-php-x-x-conf-d" tabindex="-1"><a class="header-anchor" href="#usr-local-etc-php-x-x-conf-d" aria-hidden="true">#</a> <code>/usr/local/etc/php/X.X/conf.d</code></h4><p>此目录包含用于各种 PHP 配置设置的 <code>*.ini</code> 文件</p><h4 id="usr-local-etc-php-x-x-php-fpm-d-valet-fpm-conf" tabindex="-1"><a class="header-anchor" href="#usr-local-etc-php-x-x-php-fpm-d-valet-fpm-conf" aria-hidden="true">#</a> <code>/usr/local/etc/php/X.X/php-fpm.d/valet-fpm.conf</code></h4><p>此文件是 PHP-FPM 池配置文件。</p><h4 id="composer-vendor-laravel-valet-cli-stubs-secure-valet-conf" tabindex="-1"><a class="header-anchor" href="#composer-vendor-laravel-valet-cli-stubs-secure-valet-conf" aria-hidden="true">#</a> <code>~/.composer/vendor/laravel/valet/cli/stubs/secure.valet.conf</code></h4><p>该文件是默认的 Nginx 配置文件，用来为你的网站生成 SSL 证书。</p><p><a name="disk-access"></a></p><h3 id="磁盘访问权限" tabindex="-1"><a class="header-anchor" href="#磁盘访问权限" aria-hidden="true">#</a> 磁盘访问权限</h3>`,83),de={href:"https://manuals.info.apple.com/MANUALS/1000/MA1902/en_US/apple-platform-security-guide.pdf",target:"_blank",rel:"noopener noreferrer"},ce=e("p",null,[a("尽管如此，如果你希望在上述这些地方里提供网站服务，则要给予 Nginx「完全磁盘访问权限」。否则，Nginx 可能会出现服务器错误或其他不可预知的行为，尤其是访问静态资源时。通常来说，macOS 会自动询问你是否给予 Nginx 对这些地方的完全访问权限。或者，你也可以通过 "),e("code",null,"系统偏好设置"),a(" > "),e("code",null,"安全性与隐私"),a(" > "),e("code",null,"隐私"),a("，然后选择 "),e("code",null,"完全磁盘访问权限"),a(" 手动设置。接下来，在主窗口中启用所有 "),e("code",null,"nginx"),a(" 选项。")],-1);function he(pe,ue){const n=l("ExternalLinkIcon");return o(),i("div",null,[c,e("p",null,[e("a",h,[a("Laravel Valet"),r(n)]),a(" 是一个面向 macOS 极简主义者的 Laravel 开发环境。Laravel Valet 为你的 Mac 设置了开机后始终在后台运行 "),e("a",p,[a("Nginx"),r(n)]),a(" 服务。然后，使用 "),e("a",u,[a("DnsMasq"),r(n)]),a(" 将所有指向安装在本地的计算机站点请求代理到 "),v,a(" 结尾的域名上。")]),g,m,e("div",b,[e("ul",null,[e("li",null,[e("a",f,[a("Laravel"),r(n)])]),e("li",null,[e("a",_,[a("Bedrock"),r(n)])]),e("li",null,[e("a",x,[a("CakePHP 3"),r(n)])]),e("li",null,[e("a",k,[a("ConcreteCMS"),r(n)])]),e("li",null,[e("a",P,[a("Contao"),r(n)])]),e("li",null,[e("a",V,[a("Craft"),r(n)])]),e("li",null,[e("a",w,[a("Drupal"),r(n)])]),e("li",null,[e("a",S,[a("ExpressionEngine"),r(n)])]),e("li",null,[e("a",$,[a("Jigsaw"),r(n)])]),e("li",null,[e("a",H,[a("Joomla"),r(n)])]),e("li",null,[e("a",N,[a("Katana"),r(n)])]),e("li",null,[e("a",L,[a("Kirby"),r(n)])]),e("li",null,[e("a",y,[a("Magento"),r(n)])]),e("li",null,[e("a",q,[a("OctoberCMS"),r(n)])]),e("li",null,[e("a",C,[a("Sculpin"),r(n)])]),e("li",null,[e("a",D,[a("Slim"),r(n)])]),e("li",null,[e("a",T,[a("Statamic"),r(n)])]),E,e("li",null,[e("a",M,[a("Symfony"),r(n)])]),e("li",null,[e("a",R,[a("WordPress"),r(n)])]),e("li",null,[e("a",F,[a("Zend"),r(n)])])])]),j,B,U,e("blockquote",null,[e("p",null,[a("注意：Valet 需要 macOS 和 "),e("a",I,[a("Homebrew"),r(n)]),a(" ，你应该确保没有其他程序 (例如 Apache 或者 Nginx) 占用本地计算机的 80 端口。")])]),A,e("p",null,[a("在安装 PHP 之后，就可以安装 "),e("a",O,[a("Composer 软件包管理器"),r(n)]),a(" 了。 另外，你应该确保 "),W,a(" 目录位于系统的「PATH」 中。安装 Composer 之后，你可以将 Laravel Valet 安装为全局 Composer 软件包：")]),X,e("p",null,[a("如果应用程序需要数据库，请查看"),e("a",J,[a("DBngin"),r(n)]),a("，它提供了一个免费的全合一数据库管理工具，包括MySQL、PostgreSQL和Redis。安装DBngin后，你可以使用"),K,a("用户名和空字符串作为密码连接到你的数据库"),Q,a("。")]),z,e("p",null,[a("要停止共享你的站点，可以按 "),Z,a(" 。使用 Ngrok 共享你的网站需要你 "),e("a",G,[a("创建一个 Ngrok 帐户"),r(n)]),a(" 和 "),e("a",Y,[a("设置身份验证令牌"),r(n)]),a("。")]),e("blockquote",null,[e("p",null,[ee,a(" 你可以向 share 命令传递额外的参数， 如 "),ae,a("。 详细信息，请参考 "),e("a",ne,[a("ngrok 文档"),r(n)]),a("。")])]),re,te,e("p",null,[a("如果你已经安装了 "),e("a",se,[a("Expose"),r(n)]),a("，你可以在终端里进入网站目录运行 "),le,a(" 命令来共享你的网站。可以访问 "),e("a",oe,[a("Expose 文档"),r(n)]),a(" 查看命令行参数说明。共享网站后，Expose 将显示共享 URL，你可以在其他设备或团队成员之间使用它：")]),ie,e("p",null,[a("从 maxOS 10.14 开始，"),e("a",de,[a("访问部分文件和目录默认受限"),r(n)]),a("。这些限制包括桌面，文档，以及下载目录。此外，网络磁盘和可卸载磁盘访问也受限。因此，Valet 推荐你不要将网站目录放在这些受保护的地方。")]),ce])}const me=s(d,[["render",he],["__file","valet.html.vue"]]);export{me as default};
