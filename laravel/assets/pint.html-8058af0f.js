import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as r,c as l,b as e,d as n,e as s,a as i}from"./app-8cdff07c.js";const p={},d=i('<h1 id="laravel-pint" tabindex="-1"><a class="header-anchor" href="#laravel-pint" aria-hidden="true">#</a> Laravel Pint</h1><ul><li><a href="#introduction">介绍</a></li><li><a href="#installation">安装</a></li><li><a href="#running-pint">运行 Pint</a></li><li><a href="#configuring-pint">配置 Pint</a><ul><li><a href="#presets">Presets (预设)</a></li><li><a href="#rules">规则</a></li><li><a href="#excluding-files-or-folders">排除文件/文件夹</a></li></ul></li></ul><p><a name="introduction"></a></p><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2>',4),c={href:"https://github.com/laravel/pint",target:"_blank",rel:"noopener noreferrer"},u=i(`<p>Pint 会随着所有新的 Laravel 应用程序自动安装，所以你可以立即开始使用它。默认情况下，Pint 不需要任何配置，将通过遵循 Laravel 的观点性编码风格来修复你的代码风格问题。</p><p><a name="installation"></a></p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><p>Pint 已包含在 Laravel 框架的最近版本中，所以无需安装。然而，对于旧的应用程序，你可以通过 Composer 安装 Laravel Pint：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">composer</span> require laravel/pint <span class="token parameter variable">--dev</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="running-pint"></a></p><h2 id="运行-pint" tabindex="-1"><a class="header-anchor" href="#运行-pint" aria-hidden="true">#</a> 运行 Pint</h2><p>可以通过调用你项目中的 <code>vendor/bin</code> 目录下的 <code>pint</code> 二进制文件来指示 Pint 修复代码风格问题：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./vendor/bin/pint
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你也可以在特定的文件或目录上运行 Pint：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./vendor/bin/pint app/Models

./vendor/bin/pint app/Models/User.php
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pint 将显示它所更新的所有文件的详细列表。 你可以在调用 Pint 时提供 <code>-v</code> 选项来查看更多关于 Pint 修改的细节。：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./vendor/bin/pint <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你只想 Pint 检查代码中风格是否有错误，而不实际更改文件，则可以使用 <code>--test</code> 选项：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./vendor/bin/pint <span class="token parameter variable">--test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你希望 Pint 根据 Git 仅修改未提交更改的文件，你可以使用 <code>--dirty</code> 选项：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./vendor/bin/pint <span class="token parameter variable">--dirty</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="configuring-pint"></a></p><h2 id="配置-pint" tabindex="-1"><a class="header-anchor" href="#配置-pint" aria-hidden="true">#</a> 配置 Pint</h2><p>如前面所述，Pint 不需要任何配置。但是，如果你希望自定义预设、规则或检查的文件夹，可以在项目的根目录中创建一个 <code>pint.json</code> 文件：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;preset&quot;</span><span class="token operator">:</span> <span class="token string">&quot;laravel&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，如果你希望使用特定目录中的 <code>pint.json</code>，可以在调用 Pint 时提供 <code>--config</code> 选项：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pint <span class="token parameter variable">--config</span> vendor/my-company/coding-style/pint.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="presets"></a></p><h3 id="presets-预设" tabindex="-1"><a class="header-anchor" href="#presets-预设" aria-hidden="true">#</a> Presets(预设)</h3><p>Presets 定义了一组规则，可以用来修复代码风格问题。默认情况下，Pint 使用 laravel preset，通过遵循 <code>Laravel</code> 的固定编码风格来修复问题。但是，你可以通过向 Pint 提供 <code>--preset</code> 选项来指定一个不同的 preset 值：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pint <span class="token parameter variable">--preset</span> psr12
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你愿意，还可以在项目的 <code>pint.json</code> 文件中设置 preset ：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;preset&quot;</span><span class="token operator">:</span> <span class="token string">&quot;psr12&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pint 目前支持的 presets 有：<code>laravel</code>、<code>psr12</code> 和 <code>symfony</code>。</p><p><a name="rules"></a></p><h3 id="规则" tabindex="-1"><a class="header-anchor" href="#规则" aria-hidden="true">#</a> 规则</h3><p>规则是 Pint 用于修复代码风格问题的风格指南。如上所述，presets 是预定义的规则组，适用于大多数 PHP 项目，因此你通常不需要担心它们所包含的单个规则。</p><p>但是，如果你愿意，可以在 <code>pint.json</code> 文件中启用或禁用特定规则：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;preset&quot;</span><span class="token operator">:</span> <span class="token string">&quot;laravel&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;rules&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;simplified_null_return&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token property">&quot;braces&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token property">&quot;new_with_braces&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;anonymous_class&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token property">&quot;named_class&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35),v={href:"https://github.com/FriendsOfPHP/PHP-CS-Fixer",target:"_blank",rel:"noopener noreferrer"},m={href:"https://mlocati.github.io/php-cs-fixer-configurator",target:"_blank",rel:"noopener noreferrer"},b=i(`<p><a name="excluding-files-or-folders"></a></p><h3 id="排除文件-文件夹" tabindex="-1"><a class="header-anchor" href="#排除文件-文件夹" aria-hidden="true">#</a> 排除文件/文件夹</h3><p>默认情况下，Pint将检查项目中除 <code>vendor</code> 目录以外的所有 <code>.php</code> 文件。如果您希望排除更多文件夹，可以使用 <code>exclude</code> 配置选项:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;my-specific/folder&quot;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果您希望排除包含给定名称模式的所有文件，则可以使用 <code>notName</code> 配置选项:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;notName&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;*-my-file.php&quot;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果您想要通过提供文件的完整路径来排除文件，则可以使用 <code>notPath</code> 配置选项:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;notPath&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;path/to/excluded-file.php&quot;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function h(g,k){const a=o("ExternalLinkIcon");return r(),l("div",null,[d,e("p",null,[e("a",c,[n("Laravel Pint"),s(a)]),n(" 是一款面向极简主义者的 PHP 代码风格固定工具。Pint 是建立在 PHP-CS-Fixer 基础上，使保持代码风格的整洁和一致变得简单。")]),u,e("p",null,[n("Pint是基于 "),e("a",v,[n("PHP-CS-Fixer"),s(a)]),n(" 构建的。因此，您可以使用它的任何规则来修复项目中的代码风格问题： "),e("a",m,[n("PHP-CS-Fixer Configurator"),s(a)]),n(".")]),b])}const x=t(p,[["render",h],["__file","pint.html.vue"]]);export{x as default};
