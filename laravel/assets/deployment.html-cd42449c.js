import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as r,c as l,b as e,d as n,e as s,a as o}from"./app-8cdff07c.js";const c={},p=o('<h1 id="deployment" tabindex="-1"><a class="header-anchor" href="#deployment" aria-hidden="true">#</a> Deployment</h1><ul><li><a href="#introduction">Introduction</a></li><li><a href="#server-requirements">Server Requirements</a></li><li><a href="#server-configuration">Server Configuration</a><ul><li><a href="#nginx">Nginx</a></li></ul></li><li><a href="#optimization">Optimization</a><ul><li><a href="#autoloader-optimization">Autoloader Optimization</a></li><li><a href="#optimizing-configuration-loading">Caching Configuration</a></li><li><a href="#caching-events">Caching Events</a></li><li><a href="#optimizing-route-loading">Caching Routes</a></li><li><a href="#optimizing-view-loading">Caching Views</a></li></ul></li><li><a href="#debug-mode">Debug Mode</a></li><li><a href="#deploying-with-forge-or-vapor">Easy Deployment With Forge / Vapor</a></li></ul><p><a name="introduction"></a></p><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>When you&#39;re ready to deploy your Laravel application to production, there are some important things you can do to make sure your application is running as efficiently as possible. In this document, we&#39;ll cover some great starting points for making sure your Laravel application is deployed properly.</p><p><a name="server-requirements"></a></p><h2 id="server-requirements" tabindex="-1"><a class="header-anchor" href="#server-requirements" aria-hidden="true">#</a> Server Requirements</h2><p>The Laravel framework has a few system requirements. You should ensure that your web server has the following minimum PHP version and extensions:</p>',8),d=e("div",{class:"content-list",markdown:"1"},[e("ul",null,[e("li",null,"PHP >= 8.1"),e("li",null,"Ctype PHP Extension"),e("li",null,"cURL PHP Extension"),e("li",null,"DOM PHP Extension"),e("li",null,"Fileinfo PHP Extension"),e("li",null,"Filter PHP Extension"),e("li",null,"Hash PHP Extension"),e("li",null,"Mbstring PHP Extension"),e("li",null,"OpenSSL PHP Extension"),e("li",null,"PCRE PHP Extension"),e("li",null,"PDO PHP Extension"),e("li",null,"Session PHP Extension"),e("li",null,"Tokenizer PHP Extension"),e("li",null,"XML PHP Extension")])],-1),u=o('<p><a name="server-configuration"></a></p><h2 id="server-configuration" tabindex="-1"><a class="header-anchor" href="#server-configuration" aria-hidden="true">#</a> Server Configuration</h2><p><a name="nginx"></a></p><h3 id="nginx" tabindex="-1"><a class="header-anchor" href="#nginx" aria-hidden="true">#</a> Nginx</h3>',4),h={href:"https://forge.laravel.com",target:"_blank",rel:"noopener noreferrer"},v=o(`<p>Please ensure, like the configuration below, your web server directs all requests to your application&#39;s <code>public/index.php</code> file. You should never attempt to move the <code>index.php</code> file to your project&#39;s root, as serving the application from the project root will expose many sensitive configuration files to the public Internet:</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">listen</span> [::]:80</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server_name</span> example.com</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">root</span> /srv/example.com/public</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">add_header</span> X-Frame-Options <span class="token string">&quot;SAMEORIGIN&quot;</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">add_header</span> X-Content-Type-Options <span class="token string">&quot;nosniff&quot;</span></span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">index</span> index.php</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">charset</span> utf-8</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.php?<span class="token variable">$query_string</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token directive"><span class="token keyword">location</span> = /favicon.ico</span> <span class="token punctuation">{</span> <span class="token directive"><span class="token keyword">access_log</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span> <span class="token directive"><span class="token keyword">log_not_found</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token directive"><span class="token keyword">location</span> = /robots.txt</span>  <span class="token punctuation">{</span> <span class="token directive"><span class="token keyword">access_log</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span> <span class="token directive"><span class="token keyword">log_not_found</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">404</span> /index.php</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">location</span> ~ \\.php$</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">fastcgi_pass</span> unix:/var/run/php/php8.2-fpm.sock</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">fastcgi_param</span> SCRIPT_FILENAME <span class="token variable">$realpath_root</span><span class="token variable">$fastcgi_script_name</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">include</span> fastcgi_params</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token directive"><span class="token keyword">location</span> ~ /\\.(?!well-known).*</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">deny</span> all</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="optimization"></a></p><h2 id="optimization" tabindex="-1"><a class="header-anchor" href="#optimization" aria-hidden="true">#</a> Optimization</h2><p><a name="autoloader-optimization"></a></p><h3 id="autoloader-optimization" tabindex="-1"><a class="header-anchor" href="#autoloader-optimization" aria-hidden="true">#</a> Autoloader Optimization</h3><p>When deploying to production, make sure that you are optimizing Composer&#39;s class autoloader map so Composer can quickly find the proper file to load for a given class:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">composer</span> <span class="token function">install</span> --optimize-autoloader --no-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><strong>Note</strong><br> In addition to optimizing the autoloader, you should always be sure to include a <code>composer.lock</code> file in your project&#39;s source control repository. Your project&#39;s dependencies can be installed much faster when a <code>composer.lock</code> file is present.</p></blockquote><p><a name="optimizing-configuration-loading"></a></p><h3 id="caching-configuration" tabindex="-1"><a class="header-anchor" href="#caching-configuration" aria-hidden="true">#</a> Caching Configuration</h3><p>When deploying your application to production, you should make sure that you run the <code>config:cache</code> Artisan command during your deployment process:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan config:cache
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This command will combine all of Laravel&#39;s configuration files into a single, cached file, which greatly reduces the number of trips the framework must make to the filesystem when loading your configuration values.</p><blockquote><p><strong>Warning</strong><br> If you execute the <code>config:cache</code> command during your deployment process, you should be sure that you are only calling the <code>env</code> function from within your configuration files. Once the configuration has been cached, the <code>.env</code> file will not be loaded and all calls to the <code>env</code> function for <code>.env</code> variables will return <code>null</code>.</p></blockquote><p><a name="caching-events"></a></p><h3 id="caching-events" tabindex="-1"><a class="header-anchor" href="#caching-events" aria-hidden="true">#</a> Caching Events</h3><p>If your application is utilizing <a href="./events#event-discovery">event discovery</a>, you should cache your application&#39;s event to listener mappings during your deployment process. This can be accomplished by invoking the <code>event:cache</code> Artisan command during deployment:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan event:cache
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="optimizing-route-loading"></a></p><h3 id="caching-routes" tabindex="-1"><a class="header-anchor" href="#caching-routes" aria-hidden="true">#</a> Caching Routes</h3><p>If you are building a large application with many routes, you should make sure that you are running the <code>route:cache</code> Artisan command during your deployment process:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan route:cache
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This command reduces all of your route registrations into a single method call within a cached file, improving the performance of route registration when registering hundreds of routes.</p><p><a name="optimizing-view-loading"></a></p><h3 id="caching-views" tabindex="-1"><a class="header-anchor" href="#caching-views" aria-hidden="true">#</a> Caching Views</h3><p>When deploying your application to production, you should make sure that you run the <code>view:cache</code> Artisan command during your deployment process:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan view:cache
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This command precompiles all your Blade views so they are not compiled on demand, improving the performance of each request that returns a view.</p><p><a name="debug-mode"></a></p><h2 id="debug-mode" tabindex="-1"><a class="header-anchor" href="#debug-mode" aria-hidden="true">#</a> Debug Mode</h2><p>The debug option in your config/app.php configuration file determines how much information about an error is actually displayed to the user. By default, this option is set to respect the value of the <code>APP_DEBUG</code> environment variable, which is stored in your application&#39;s <code>.env</code> file.</p><blockquote><p><strong>Warning</strong><strong>In your production environment, this value should always be <code>false</code>. If the <code>APP_DEBUG</code> variable is set to <code>true</code> in production, you risk exposing sensitive configuration values to your application&#39;s end users.</strong></p></blockquote><p><a name="deploying-with-forge-or-vapor"></a></p><h2 id="easy-deployment-with-forge-vapor" tabindex="-1"><a class="header-anchor" href="#easy-deployment-with-forge-vapor" aria-hidden="true">#</a> Easy Deployment With Forge / Vapor</h2><p><a name="laravel-forge"></a></p><h4 id="laravel-forge" tabindex="-1"><a class="header-anchor" href="#laravel-forge" aria-hidden="true">#</a> Laravel Forge</h4>`,37),m={href:"https://forge.laravel.com",target:"_blank",rel:"noopener noreferrer"},g=e("p",null,"Laravel Forge can create servers on various infrastructure providers such as DigitalOcean, Linode, AWS, and more. In addition, Forge installs and manages all of the tools needed to build robust Laravel applications, such as Nginx, MySQL, Redis, Memcached, Beanstalk, and more.",-1),f=e("strong",null,"Note",-1),k={href:"https://bootcamp.laravel.com/deploying",target:"_blank",rel:"noopener noreferrer"},y={href:"https://laracasts.com/series/learn-laravel-forge-2022-edition",target:"_blank",rel:"noopener noreferrer"},b=e("p",null,[e("a",{name:"laravel-vapor"})],-1),w=e("h4",{id:"laravel-vapor",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#laravel-vapor","aria-hidden":"true"},"#"),n(" Laravel Vapor")],-1),x={href:"https://vapor.laravel.com",target:"_blank",rel:"noopener noreferrer"};function _(P,L){const a=t("ExternalLinkIcon");return r(),l("div",null,[p,d,u,e("p",null,[n("If you are deploying your application to a server that is running Nginx, you may use the following configuration file as a starting point for configuring your web server. Most likely, this file will need to be customized depending on your server's configuration. "),e("strong",null,[n("If you would like assistance in managing your server, consider using a first-party Laravel server management and deployment service such as "),e("a",h,[n("Laravel Forge"),s(a)]),n(".")])]),v,e("p",null,[n("If you aren't quite ready to manage your own server configuration or aren't comfortable configuring all of the various services needed to run a robust Laravel application, "),e("a",m,[n("Laravel Forge"),s(a)]),n(" is a wonderful alternative.")]),g,e("blockquote",null,[e("p",null,[f,n(" Want a full guide to deploying with Laravel Forge? Check out the "),e("a",k,[n("Laravel Bootcamp"),s(a)]),n(" and the Forge "),e("a",y,[n("video series available on Laracasts"),s(a)]),n(".")])]),b,w,e("p",null,[n("If you would like a totally serverless, auto-scaling deployment platform tuned for Laravel, check out "),e("a",x,[n("Laravel Vapor"),s(a)]),n(". Laravel Vapor is a serverless deployment platform for Laravel, powered by AWS. Launch your Laravel infrastructure on Vapor and fall in love with the scalable simplicity of serverless. Laravel Vapor is fine-tuned by Laravel's creators to work seamlessly with the framework so you can keep writing your Laravel applications exactly like you're used to.")])])}const q=i(c,[["render",_],["__file","deployment.html.vue"]]);export{q as default};
