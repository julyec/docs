import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as l,c as o,b as e,d as a,e as s,a as t}from"./app-8cdff07c.js";const p={},c=t(`<h1 id="前端" tabindex="-1"><a class="header-anchor" href="#前端" aria-hidden="true">#</a> 前端</h1><ul><li><a href="#introduction">介绍</a></li><li><a href="#using-php">使用 PHP</a><ul><li><a href="#php-and-blade">PHP 和 Blade</a></li><li><a href="#livewire">Livewire</a></li><li><a href="#php-starter-kits">入门套件</a></li></ul></li><li><a href="#using-vue-react">使用 Vue / React</a><ul><li><a href="#inertia">Inertia</a></li><li><a href="#inertia-starter-kits">入门套件</a></li></ul></li><li><a href="#bundling-assets">打包资源</a></li></ul><p><a name="introduction"></a></p><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>Laravel 是一个后端框架，提供了构建现代 Web 应用所需的所有功能，例如 <a href="./routing">路由</a>、<a href="./validation">验证</a>、<a href="./cache">缓存</a>、<a href="./queues">队列</a>、<a href="./filesystem">文件存储</a> 等等。然而，我们认为为开发人员提供美观的全栈体验，包括构建应用前端的强大方法，是非常重要的。</p><p>在使用 Laravel 构建应用时，有两种主要的方式来解决前端开发问题，选择哪种方式取决于你是否想通过 PHP 或使用像 Vue 和 React 这样的 JavaScript 框架来构建前端。我们将在下面讨论这两种选项，以便你可以做出有关应用程序前端开发的最佳方法的明智决策。</p><p><a name="using-php"></a></p><h2 id="使用-php" tabindex="-1"><a class="header-anchor" href="#使用-php" aria-hidden="true">#</a> 使用 PHP</h2><p><a name="php-and-blade"></a></p><h3 id="php-和-blade" tabindex="-1"><a class="header-anchor" href="#php-和-blade" aria-hidden="true">#</a> PHP 和 Blade</h3><p>过去，大多数 PHP 应用程序使用简单的 HTML 模板和 PHP <code>echo</code> 语句将数据呈现给浏览器，这些语句在请求期间从数据库检索数据：</p><div class="language-blade line-numbers-mode" data-ext="blade"><pre class="language-blade"><code>&lt;div&gt;
    &lt;?php foreach ($users as $user): ?&gt;
        Hello, &lt;?php echo $user-&gt;name; ?&gt; &lt;br /&gt;
    &lt;?php endforeach; ?&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Laravel 中，仍可以使用 视图 和 Blade 来实现呈现 HTML 的这种方法。Blade 是一种非常轻量级的模板语言，提供方便、简短的语法，用于显示数据、迭代数据等：</p><div class="language-blade line-numbers-mode" data-ext="blade"><pre class="language-blade"><code>&lt;div&gt;
    @foreach ($users as $user)
        Hello, {{ $user-&gt;name }} &lt;br /&gt;
    @endforeach
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当使用这种方法构建应用程序时，表单提交和其他页面交互通常会从服务器接收一个全新的 HTML 文档，整个页面将由浏览器重新渲染。即使今天，许多应用程序也可能非常适合使用简单的 Blade 模板构建其前端。</p><p><a name="growing-expectations"></a></p><h4 id="不断提高的期望" tabindex="-1"><a class="header-anchor" href="#不断提高的期望" aria-hidden="true">#</a> 不断提高的期望</h4><p>然而，随着用户对 Web 应用程序的期望不断提高，许多开发人员发现需要构建更具有互动性和更具现代感的动态前端。为此，一些开发人员选择使用诸如 Vue 和 React 等 JavaScript 框架开始构建应用程序的前端。</p>`,18),d={href:"https://rubyonrails.org/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://turbo.hotwired.dev/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://hotwired.dev/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://stimulus.hotwired.dev/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://laravel-livewire.com/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://alpinejs.dev/",target:"_blank",rel:"noopener noreferrer"},g=e("p",null,[e("a",{name:"livewire"})],-1),b=e("h3",{id:"livewire",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#livewire","aria-hidden":"true"},"#"),a(" Livewire")],-1),m={href:"https://laravel-livewire.com/",target:"_blank",rel:"noopener noreferrer"},f=t(`<p>在使用 Livewire 时，你将创建 Livewire &quot;组件&quot;，这些组件将呈现 UI 的一个离散部分，并公开可以从应用程序的前端调用和互动的方法和数据。例如，一个简单的&quot;计数器&quot;组件可能如下所示：</p><pre><code>&lt;?php

namespace App\\Http\\Livewire;

use Livewire\\Component;

class Counter extends Component
{
    public $count = 0;

    public function increment()
    {
        $this-&gt;count++;
    }

    public function render()
    {
        return view(&#39;livewire.counter&#39;);
    }
}
</code></pre><p>对于计数器，相应的模板将会像这样写：</p><div class="language-blade line-numbers-mode" data-ext="blade"><pre class="language-blade"><code>&lt;div&gt;
    &lt;button wire:click=&quot;increment&quot;&gt;+&lt;/button&gt;
    &lt;h1&gt;{{ $count }}&lt;/h1&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如你所见，Livewire 使你能够编写新的 HTML 属性，例如 <code>wire:click</code>，以连接 Laravel 应用程序的前端和后端。此外，你可以使用简单的 Blade 表达式呈现组件的当前状态。</p>`,5),L={href:"https://alpinejs.dev/",target:"_blank",rel:"noopener noreferrer"},w=e("a",{href:"./views"},"views",-1),x=e("a",{href:"./blade"},"Blade",-1),V={href:"https://laravel-livewire.com/docs",target:"_blank",rel:"noopener noreferrer"},H=e("p",null,[e("a",{name:"php-starter-kits"})],-1),I=e("h3",{id:"入门套件",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#入门套件","aria-hidden":"true"},"#"),a(" 入门套件")],-1),P=e("a",{href:"./starter-kits"},"入门套件",-1),R=e("a",{href:"./blade"},"Blade",-1),q={href:"https://tailwindcss.com/",target:"_blank",rel:"noopener noreferrer"},B=e("p",null,[e("a",{name:"using-vue-react"})],-1),j=e("h2",{id:"使用-vue-react",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#使用-vue-react","aria-hidden":"true"},"#"),a(" 使用 Vue / React")],-1),y=e("p",null,"尽管使用 Laravel 和 Livewire 可以构建现代的前端，但许多开发人员仍然喜欢利用像 Vue 或 React 这样的 JavaScript 框架的强大功能。这使开发人员能够利用通过 NPM 可用的丰富的 JavaScript 包和工具生态系统。",-1),S={href:"https://nuxtjs.org/",target:"_blank",rel:"noopener noreferrer"},$={href:"https://nextjs.org/",target:"_blank",rel:"noopener noreferrer"},C=e("p",null,"此外，开发人员需要维护两个单独的代码存储库，通常需要在两个存储库之间协调维护、发布和部署。虽然这些问题并非不可解决，但我们认为这不是开发应用程序的一种有成效或令人愉快的方式。",-1),J=e("p",null,[e("a",{name:"inertia"})],-1),T=e("h3",{id:"inertia",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inertia","aria-hidden":"true"},"#"),a(" Inertia")],-1),A={href:"https://inertiajs.com/",target:"_blank",rel:"noopener noreferrer"},M=t(`<p>在将 Inertia 安装到你的 Laravel 应用程序后，你将像平常一样编写路由和控制器。但是，你将返回 Inertia 页面而不是从控制器返回 Blade 模板：</p><pre><code>&lt;?php

namespace App\\Http\\Controllers;

use App\\Http\\Controllers\\Controller;
use App\\Models\\User;
use Inertia\\Inertia;
use Inertia\\Response;

class UserController extends Controller {
    /**
     * 显示给定用户的个人资料
     */
    public function show(string $id): Response {
        return Inertia::render(&#39;Users/Profile&#39;, [
            &#39;user&#39; =&gt; User::findOrFail($id)
        ]);
    }
}
</code></pre><p>Inertia 页面对应于 Vue 或 React 组件，通常存储在应用程序的 <code>resources/js/Pages</code> 目录中。通过 <code>Inertia::render</code> 方法传递给页面的数据将用于填充页面组件的 &quot;props&quot;：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> Layout <span class="token keyword">from</span> <span class="token string">&#39;@/Layouts/Authenticated.vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Head <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@inertiajs/vue3&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Head</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>用户资料<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Layout</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#header</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>font-semibold text-xl text-gray-800 leading-tight<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                资料
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>py-12<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            你好，{{ user.name }}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Layout</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如你所看到的，使用 Inertia 可以在构建前端时充分利用 Vue 或 React 的强大功能，同时为 Laravel 驱动的后端和 JavaScript 驱动的前端提供了轻量级的桥梁。</p><h4 id="服务器端渲染" tabindex="-1"><a class="header-anchor" href="#服务器端渲染" aria-hidden="true">#</a> 服务器端渲染</h4>`,6),N={href:"https://inertiajs.com/server-side-rendering",target:"_blank",rel:"noopener noreferrer"},U={href:"https://forge.laravel.com/",target:"_blank",rel:"noopener noreferrer"},z=e("p",null,[e("a",{name:"inertia-starter-kits"})],-1),W=e("h3",{id:"入门套件-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#入门套件-1","aria-hidden":"true"},"#"),a(" 入门套件")],-1),E=e("a",{href:"./starter-kits"},"入门套件",-1),F={href:"https://tailwindcss.com/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://vitejs.dev/",target:"_blank",rel:"noopener noreferrer"},D=e("p",null,[e("a",{name:"bundling-assets"})],-1),G=e("h2",{id:"打包资源",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#打包资源","aria-hidden":"true"},"#"),a(" 打包资源")],-1),K=e("p",null,"无论你选择使用 Blade 和 Livewire 还是 Vue/React 和 Inertia 来开发你的前端，你都可能需要将你的应用程序的 CSS 打包成生产就绪的资源。当然，如果你选择用 Vue 或 React 来构建你的应用程序的前端，你也需要将你的组件打包成浏览器准备好的 JavaScript 资源。",-1),Q={href:"https://vitejs.dev",target:"_blank",rel:"noopener noreferrer"},X=e("a",{href:"./starter-kit"},"入门套件",-1),Y=e("code",null,"vite.config.js",-1),Z=e("p",null,[a("开始使用 Laravel 和 Vite 的最快方法是使用 "),e("a",{href:"./starter-kits#laravel-breeze"},"Laravel Breeze"),a(" 开始你的应用程序的开发，我们最简单的入门套件，通过提供前端和后端的认证支架来启动你的应用程序。")],-1),ee=e("blockquote",null,[e("p",null,[e("strong",null,"注意"),a(" 关于利用 Vite 和 Laravel 的更多详细文档，请看我们的 "),e("a",{href:"./vite"},"关于打包和编译资源的专用文档"),a("。")])],-1);function ae(ne,se){const n=i("ExternalLinkIcon");return l(),o("div",null,[c,e("p",null,[a("其他人则更喜欢使用他们熟悉的后端语言，开发出可利用他们首选的后端语言构建现代 Web 应用程序 UI 的解决方案。例如，在"),e("a",d,[a("Rails"),s(n)]),a("生态系统中，这促使了诸如"),e("a",u,[a("Turbo"),s(n)]),a("、"),e("a",h,[a("Hotwire"),s(n)]),a("和"),e("a",v,[a("Stimulus"),s(n)]),a("等库的创建。")]),e("p",null,[a("在 Laravel 生态系统中，需要主要使用PHP创建现代动态前端已经导致了"),e("a",k,[a("Laravel Livewire"),s(n)]),a("和"),e("a",_,[a("Alpine.js"),s(n)]),a("的创建。")]),g,b,e("p",null,[e("a",m,[a("Laravel Livewire"),s(n)]),a("是一个用于构建 Laravel 前端的框架，具有与使用现代 JavaScript 框架（如 Vue 和 React ）构建的前端一样的动态、现代和生动的感觉。")]),f,e("p",null,[a("对于许多人来说，Livewire 改变了 Laravel 的前端开发方式，使他们可以在 Laravel 的舒适环境下构建现代、动态的 Web 应用程序。通常，使用 Livewire 的开发人员也会利用 "),e("a",L,[a("Alpine.js"),s(n)]),a(' 仅在需要时 "适度地添加" JavaScript 到他们的前端，比如为了渲染对话框窗口。')]),e("p",null,[a("如果你是 Laravel 新手，我们建议你先了解 "),w,a(" 和 "),x,a(" 的基本用法。然后，查阅官方的 "),e("a",V,[a("Laravel Livewire 文档"),s(n)]),a("，学习如何通过交互式 Livewire 组件将你的应用程序提升到新的水平。")]),H,I,e("p",null,[a("如果你想使用 PHP 和 Livewire 构建你的前端，你可以利用我们的 Breeze 或 Jetstream "),P,a(" 来快速启动你的应用程序开发。这两个入门套件都使用 "),R,a(" 和 "),e("a",q,[a("Tailwind"),s(n)]),a(" 构建你的应用程序后端和前端身份验证流程，让你可以轻松开始构建你的下一个大项目。")]),B,j,y,e("p",null,[a("然而，如果没有额外的工具支持，将 Laravel 与 Vue 或 React 配对会遇到各种复杂的问题，例如客户端路由、数据注入和身份验证。使用诸如 "),e("a",S,[a("Nuxt"),s(n)]),a(" 和 "),e("a",$,[a("Next"),s(n)]),a(" 等具有观点的 Vue / React 框架可以简化客户端路由；但是，当将类似 Laravel 这样的后端框架与这些前端框架配对时，数据注入和身份验证仍然是复杂而麻烦的问题。")]),C,J,T,e("p",null,[a("值得庆幸的是，Laravel 提供了两全其美的解决方案。"),e("a",A,[a("Inertia"),s(n)]),a(" 可以桥接你的 Laravel 应用程序和现代 Vue 或 React 前端，使你可以使用 Vue 或 React 构建完整的现代前端，同时利用 Laravel 路由和控制器进行路由、数据注入和身份验证 - 所有这些都在单个代码存储库中完成。使用这种方法，你可以同时享受 Laravel 和 Vue / React 的全部功能，而不会破坏任何一种工具的能力。")]),M,e("p",null,[a("如果你因为应用程序需要服务器端渲染而担心使用 Inertia，不用担心。Inertia 提供了 "),e("a",N,[a("服务器端渲染支持"),s(n)]),a("。并且，在通过 "),e("a",U,[a("Laravel Forge"),s(n)]),a(" 部署应用程序时，轻松确保 Inertia 的服务器端渲染过程始终运行。")]),z,W,e("p",null,[a("如果你想使用 Inertia 和 Vue / React 构建前端，可以利用我们的 Breeze 或 Jetstream "),E,a(" 来加速应用程序的开发。这两个入门套件使用 Inertia、Vue / React、"),e("a",F,[a("Tailwind"),s(n)]),a(" 和 "),e("a",O,[a("Vite"),s(n)]),a(" 构建应用程序的后端和前端身份验证流程，让你可以开始构建下一个大型项目。")]),D,G,K,e("p",null,[a("默认情况下，Laravel 利用 "),e("a",Q,[a("Vite"),s(n)]),a(" 来打包你的资源。Vite 在本地开发过程中提供了闪电般的构建时间和接近即时的热模块替换（HMR）。在所有新的 Laravel 应用程序中，包括那些使用我们的 "),X,a("，你会发现一个 "),Y,a(" 文件，加载我们轻量级的 Laravel Vite 插件，使 Vite 在 Laravel 应用程序中使用起来非常愉快。")]),Z,ee])}const ie=r(p,[["render",ae],["__file","frontend.html.vue"]]);export{ie as default};
