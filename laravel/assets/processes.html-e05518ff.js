import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,b as n,d as s,e as t,a}from"./app-8cdff07c.js";const i={},u=a('<h1 id="进程管理" tabindex="-1"><a class="header-anchor" href="#进程管理" aria-hidden="true">#</a> 进程管理</h1><ul><li><a href="#introduction">介绍</a></li><li><a href="#invoking-processes">调用过程</a><ul><li><a href="#process-options">进程选项</a></li><li><a href="#process-output">进程输出</a></li></ul></li><li><a href="#asynchronous-processes">异步进程</a><ul><li><a href="#process-ids-and-signals">进程 ID 和信号</a></li><li><a href="#asynchronous-process-output">异步进程输出</a></li></ul></li><li><a href="#concurrent-processes">并行进程</a><ul><li><a href="#naming-pool-processes">命名进程池中的进程</a></li><li><a href="#pool-process-ids-and-signals">进程池进程 ID 和信号</a></li></ul></li><li><a href="#testing">测试</a><ul><li><a href="#faking-processes">伪造进程</a></li><li><a href="#faking-specific-processes">伪造指定进程</a></li><li><a href="#faking-process-sequences">伪造进程序列</a></li><li><a href="#faking-asynchronous-process-lifecycles">伪造异步进程的生命周期</a></li><li><a href="#available-assertions">可用的断言</a></li><li><a href="#preventing-stray-processes">防止运行未被伪造的进程</a></li></ul></li></ul><p><a name="introduction"></a></p><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2>',4),r={href:"https://symfony.com/doc/current/components/process.html",target:"_blank",rel:"noopener noreferrer"},d=a(`<p><a name="invoking-processes"></a></p><h2 id="调用过程" tabindex="-1"><a class="header-anchor" href="#调用过程" aria-hidden="true">#</a> 调用过程</h2><p>在调用过程中，你可以使用 <code>进程管理</code> facade 提供的 <code>run</code> 和 <code>start</code> 方法。 <code>run</code> 方法将调用一个进程并等待进程执行完毕，而 <code>start</code> 方法用于异步进程执行。我们将在本文档中探究这两种方法。首先，让我们了解一下如何调用基本的同步进程并检查其结果：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Process</span><span class="token punctuation">;</span>

<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ls -la&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token variable">$result</span><span class="token operator">-&gt;</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，由 <code>run</code> 方法返回的 <code>Illuminate\\Contracts\\Process\\ProcessResult</code> 实例提供了多种有用的方法，用于检查进程处理结果：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ls -la&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$result</span><span class="token operator">-&gt;</span><span class="token function">successful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$result</span><span class="token operator">-&gt;</span><span class="token function">failed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$result</span><span class="token operator">-&gt;</span><span class="token function">exitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$result</span><span class="token operator">-&gt;</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$result</span><span class="token operator">-&gt;</span><span class="token function">errorOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="throwing-exceptions"></a></p><h4 id="抛出异常" tabindex="-1"><a class="header-anchor" href="#抛出异常" aria-hidden="true">#</a> 抛出异常</h4><p>如果你有一个进程结果，并且希望在退出代码大于零（以此表明失败）的情况下抛出<code>Illuminate\\Process\\Exceptions\\ProcessFailedException</code>的一个实例，你可以使用<code>throw</code> 和 <code>throwIf</code> 方法。 如果进程没有失败，将返回进程结果实例：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ls -la&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ls -la&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">throwIf</span><span class="token punctuation">(</span><span class="token variable">$condition</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="process-options"></a></p><h3 id="进程选项" tabindex="-1"><a class="header-anchor" href="#进程选项" aria-hidden="true">#</a> 进程选项</h3><p>当然，你可能需要在调用进程之前自定义进程的行为。幸运的是，Laravel允许你调整各种进程特性，比如工作目录、超时和环境变量。</p><p><a name="working-directory-path"></a></p><h4 id="工作目录路径" tabindex="-1"><a class="header-anchor" href="#工作目录路径" aria-hidden="true">#</a> 工作目录路径</h4><p>你可以使用 <code>path</code> 方法指定进程的工作目录。如果不调用这个方法，进程将继承当前正在执行的PHP脚本的工作目录</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token constant">__DIR__</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ls -la&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="input"></a></p><h4 id="输入" tabindex="-1"><a class="header-anchor" href="#输入" aria-hidden="true">#</a> 输入</h4><p>你可以使用 <code>input</code> 方法通过进程的“标准输入”提供输入：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Hello World&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;cat&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="timeouts"></a></p><h4 id="超时" tabindex="-1"><a class="header-anchor" href="#超时" aria-hidden="true">#</a> 超时</h4><p>默认情况下，进程在执行超过60秒后将抛出<code>Illuminate\\Process\\Exceptions\\ProcessTimedOutException</code> 实例。但是，你可以通过 <code>timeout</code> 方法自定义此行为：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;bash import.sh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者，如果要完全禁用进程超时，你可以调用 <code>forever</code> 方法：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">forever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;bash import.sh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code> idleTimeout</code> 方法可用于指定进程在不返回任何输出的情况下最多运行的秒数：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">idleTimeout</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;bash import.sh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="environment-variables"></a></p><h4 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量" aria-hidden="true">#</a> 环境变量</h4><p>可以通过 <code>env</code> 方法向进程提供环境变量。 调用的进程还将继承系统定义的所有环境变量：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">forever</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">env</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;IMPORT_PATH&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant">__DIR__</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;bash import.sh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你希望从调用的进程中删除继承的环境变量，则可以为该环境变量提供值为 false：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">forever</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">env</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;LOAD_PATH&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;bash import.sh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="tty-mode"></a></p><h4 id="tty-模式" tabindex="-1"><a class="header-anchor" href="#tty-模式" aria-hidden="true">#</a> TTY 模式</h4><p><code>tty</code> 方法可以用于为你的进程启用 TTY 模式。 TTY 模式将进程的输入和输出连接到你的程序的输入和输出，允许你的进程作为一个进程打开编辑器（如 Vim 或 Nano）：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">forever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">tty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;vim&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="process-output"></a></p><h3 id="进程输出" tabindex="-1"><a class="header-anchor" href="#进程输出" aria-hidden="true">#</a> 进程输出</h3><p>如前所述，进程输出可以使用进程结果的 <code> output</code> （标准输出）和 <code> errorOutput</code> （标准错误输出）方法访问：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Process</span><span class="token punctuation">;</span>

<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ls -la&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token operator">-&gt;</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token operator">-&gt;</span><span class="token function">errorOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，通过将闭包作为 <code> run</code> 方法的第二个参数，输出也可以实时收集。闭包将接收两个参数：输出的“类型”（stdout 或 stderr）和输出字符串本身：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ls -la&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$type</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$output</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$output</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Laravel 还提供了 <code>seeInOutput</code> 和 <code>seeInErrorOutput</code>方法，这提供了一种方便的方式来确定进程输出中是否包含给定的字符串：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ls -la&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">seeInOutput</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;laravel&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="disabling-process-output"></a></p><h4 id="禁用进程输出" tabindex="-1"><a class="header-anchor" href="#禁用进程输出" aria-hidden="true">#</a> 禁用进程输出</h4><p>如果你的进程写入了大量你不感兴趣的输出，则可以通过在构建进程时调用 <code>quietly</code> 方法来禁用输出检索。为此，请执行以下操作：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Process</span><span class="token punctuation">;</span>

<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">quietly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;bash import.sh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="asynchronous-processes"></a></p><h2 id="异步进程" tabindex="-1"><a class="header-anchor" href="#异步进程" aria-hidden="true">#</a> 异步进程</h2><p><code>start</code> 方法可以用来异步地调用进程，与之相对的是同步的 <code>run</code> 方法。使用 <code>start</code> 方法可以让进程在后台运行，而不会阻塞应用的其他任务。一旦进程被调用，你可以使用 <code>running</code> 方法来检查进程是否仍在运行：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$process</span> <span class="token operator">=</span> <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;bash import.sh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$process</span><span class="token operator">-&gt;</span><span class="token function">running</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$process</span><span class="token operator">-&gt;</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以使用 <code>wait</code>方法来等待进程执行完毕，并检索进程的执行结果实例：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$process</span> <span class="token operator">=</span> <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;bash import.sh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>

<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$process</span><span class="token operator">-&gt;</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="process-ids-and-signals"></a></p><h3 id="进程-id-和信号" tabindex="-1"><a class="header-anchor" href="#进程-id-和信号" aria-hidden="true">#</a> 进程 ID 和信号</h3><p><code>id</code> 方法可以用来检索正在运行进程的操作系统分配的进程 ID：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$process</span> <span class="token operator">=</span> <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;bash import.sh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token variable">$process</span><span class="token operator">-&gt;</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,61),k=n("code",null,"signal",-1),v={href:"https://www.php.net/manual/en/pcntl.constants.php",target:"_blank",rel:"noopener noreferrer"},m=a(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$process</span><span class="token operator">-&gt;</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token constant">SIGUSR2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="asynchronous-process-output"></a></p><h3 id="异步进程输出" tabindex="-1"><a class="header-anchor" href="#异步进程输出" aria-hidden="true">#</a> 异步进程输出</h3><p>当异步进程在运行时，你可以使用 <code>output</code> 和 <code>errorOutput</code> 方法访问其整个当前输出；但是，你可以使用<code>latestOutput</code> 和 <code>latestErrorOutput</code> 方法访问自上次检索输出以来的进程输出：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$process</span> <span class="token operator">=</span> <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;bash import.sh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$process</span><span class="token operator">-&gt;</span><span class="token function">running</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$process</span><span class="token operator">-&gt;</span><span class="token function">latestOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token variable">$process</span><span class="token operator">-&gt;</span><span class="token function">latestErrorOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与 <code>run</code> 方法一样，也可以通过在 <code>start</code> 方法的第二个参数中传递一个闭包来从异步进程中实时收集输出。闭包将接收两个参数：输出类型（<code>stdout</code> 或 <code>stderr</code>）和输出字符串本身：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$process</span> <span class="token operator">=</span> <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;bash import.sh&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$type</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$output</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$output</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$process</span><span class="token operator">-&gt;</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="concurrent-processes"></a></p><h2 id="并行处理" tabindex="-1"><a class="header-anchor" href="#并行处理" aria-hidden="true">#</a> 并行处理</h2><p>Laravel 还可以轻松地管理一组并发的异步进程，使你能够轻松地同时执行多个任务。要开始，请调用 pool 方法，该方法接受一个闭包，该闭包接收 Illuminate\\Process\\Pool 实例。</p><p>在此闭包中，你可以定义属于该池的进程。一旦通过 <code>start</code> 方法启动了进程池，你可以通过 <code>running</code> 方法访问正在运行的进程 <a href="./collections">集合</a>：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Process<span class="token punctuation">\\</span>Pool</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Process</span><span class="token punctuation">;</span>

<span class="token variable">$pool</span> <span class="token operator">=</span> <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">pool</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Pool</span> <span class="token variable">$pool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$pool</span><span class="token operator">-&gt;</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token constant">__DIR__</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;bash import-1.sh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$pool</span><span class="token operator">-&gt;</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token constant">__DIR__</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;bash import-2.sh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$pool</span><span class="token operator">-&gt;</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token constant">__DIR__</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;bash import-3.sh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$type</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$output</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$pool</span><span class="token operator">-&gt;</span><span class="token function">running</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token variable">$results</span> <span class="token operator">=</span> <span class="token variable">$pool</span><span class="token operator">-&gt;</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，你可以通过 <code>wait</code> 方法等待所有池进程完成执行并解析它们的结果。<code>wait</code> 方法返回一个可访问进程结果实例的数组对象，通过其键可以访问池中每个进程的进程结果实例：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$results</span> <span class="token operator">=</span> <span class="token variable">$pool</span><span class="token operator">-&gt;</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$results</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，为方便起见，可以使用 <code>concurrently</code> 方法启动异步进程池并立即等待其结果。结合 PHP 的数组解构功能，这可以提供特别表达式的语法：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token punctuation">[</span><span class="token variable">$first</span><span class="token punctuation">,</span> <span class="token variable">$second</span><span class="token punctuation">,</span> <span class="token variable">$third</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">concurrently</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Pool</span> <span class="token variable">$pool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$pool</span><span class="token operator">-&gt;</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token constant">__DIR__</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ls -la&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$pool</span><span class="token operator">-&gt;</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token function">app_path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ls -la&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$pool</span><span class="token operator">-&gt;</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token function">storage_path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ls -la&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$first</span><span class="token operator">-&gt;</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="naming-pool-processes"></a></p><h3 id="命名进程池中的进程" tabindex="-1"><a class="header-anchor" href="#命名进程池中的进程" aria-hidden="true">#</a> 命名进程池中的进程</h3><p>通过数字键访问进程池结果不太具有表达性，因此 Laravel 允许你通过 <code>as</code> 方法为进程池中的每个进程分配字符串键。该键也将传递给提供给 <code>start</code> 方法的闭包，使你能够确定输出属于哪个进程：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$pool</span> <span class="token operator">=</span> <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">pool</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Pool</span> <span class="token variable">$pool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$pool</span><span class="token operator">-&gt;</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;first&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;bash import-1.sh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$pool</span><span class="token operator">-&gt;</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;second&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;bash import-2.sh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$pool</span><span class="token operator">-&gt;</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;third&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;bash import-3.sh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$type</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$output</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$results</span> <span class="token operator">=</span> <span class="token variable">$pool</span><span class="token operator">-&gt;</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token variable">$results</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;first&#39;</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="pool-process-ids-and-signals"></a></p><h3 id="进程池进程-id-和信号" tabindex="-1"><a class="header-anchor" href="#进程池进程-id-和信号" aria-hidden="true">#</a> 进程池进程 ID 和信号</h3><p>由于进程池的 <code>running</code> 方法提供了一个包含池中所有已调用进程的集合，因此你可以轻松地访问基础池进程 ID：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$processIds</span> <span class="token operator">=</span> <span class="token variable">$pool</span><span class="token operator">-&gt;</span><span class="token function">running</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token property">each</span><span class="token operator">-&gt;</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了方便起见，你可以在进程池上调用 <code>signal</code> 方法，向池中的每个进程发送信号：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$pool</span><span class="token operator">-&gt;</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token constant">SIGUSR2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="testing"></a></p><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h2><p>许多 Laravel 服务都提供功能，以帮助你轻松、有表达力地编写测试，Laravel 的进程服务也不例外。<code>Process</code> 门面的 <code>fake</code> 方法允许你指示 Laravel 在调用进程时返回存根/伪造结果。</p><p><a name="faking-processes"></a></p><h3 id="伪造进程" tabindex="-1"><a class="header-anchor" href="#伪造进程" aria-hidden="true">#</a> 伪造进程</h3><p>在探索 Laravel 的伪造进程能力时，让我们想象一下调用进程的路由：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Process</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Route</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/import&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;bash import.sh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token string single-quoted-string">&#39;Import complete!&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在测试这个路由时，我们可以通过在 <code>Process</code> 门面上调用无参数的 <code>fake</code> 方法，让 Laravel 返回一个伪造的成功进程结果。此外，我们甚至可以断言某个进程“已运行”：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">Tests<span class="token punctuation">\\</span>Feature</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Process<span class="token punctuation">\\</span>PendingProcess</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Process<span class="token punctuation">\\</span>ProcessResult</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Process</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Tests<span class="token punctuation">\\</span>TestCase</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">ExampleTest</span> <span class="token keyword">extends</span> <span class="token class-name">TestCase</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test_process_is_invoked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
    <span class="token punctuation">{</span>
        <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">fake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 简单的流程断言...</span>
        <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">assertRan</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;bash import.sh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 或者，检查流程配置...</span>
        <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">assertRan</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">PendingProcess</span> <span class="token variable">$process</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">ProcessResult</span> <span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token variable">$process</span><span class="token operator">-&gt;</span><span class="token property">command</span> <span class="token operator">===</span> <span class="token string single-quoted-string">&#39;bash import.sh&#39;</span> <span class="token operator">&amp;&amp;</span>
                   <span class="token variable">$process</span><span class="token operator">-&gt;</span><span class="token property">timeout</span> <span class="token operator">===</span> <span class="token number">60</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如前所述，在 <code>Process</code> 门面上调用 <code>fake</code> 方法将指示 Laravel 始终返回一个没有输出的成功进程结果。但是，你可以使用 <code>Process</code> 门面的 <code>result</code> 方法轻松指定伪造进程的输出和退出码：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">fake</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;*&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">result</span><span class="token punctuation">(</span>
        <span class="token argument-name">output</span><span class="token punctuation">:</span> <span class="token string single-quoted-string">&#39;Test output&#39;</span><span class="token punctuation">,</span>
        <span class="token argument-name">errorOutput</span><span class="token punctuation">:</span> <span class="token string single-quoted-string">&#39;Test error output&#39;</span><span class="token punctuation">,</span>
        <span class="token argument-name">exitCode</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="faking-specific-processes"></a></p><h3 id="伪造指定进程" tabindex="-1"><a class="header-anchor" href="#伪造指定进程" aria-hidden="true">#</a> 伪造指定进程</h3><p>在你测试的过程中，如果要伪造不同的进程执行结果，你可以通过传递一个数组给 <code>fake</code> 方法来实现。</p><p>数组的键应该表示你想伪造的命令模式及其相关结果。星号 <code>*</code> 字符可用作通配符，任何未被伪造的进程命令将会被实际执行。你可以使用 <code>Process</code> Facade的 <code>result</code> 方法为这些命令构建 stub/fake 结果：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">fake</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;cat *&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">result</span><span class="token punctuation">(</span>
        <span class="token argument-name">output</span><span class="token punctuation">:</span> <span class="token string single-quoted-string">&#39;Test &quot;cat&quot; output&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;ls *&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">result</span><span class="token punctuation">(</span>
        <span class="token argument-name">output</span><span class="token punctuation">:</span> <span class="token string single-quoted-string">&#39;Test &quot;ls&quot; output&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不需要自定义伪造进程的退出码或错误输出，你可以更方便地将伪造进程结果指定为简单字符串：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">fake</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;cat *&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Test &quot;cat&quot; output&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;ls *&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Test &quot;ls&quot; output&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="faking-process-sequences"></a></p><h3 id="伪造进程序列" tabindex="-1"><a class="header-anchor" href="#伪造进程序列" aria-hidden="true">#</a> 伪造进程序列</h3><p>如果你测试的代码调用了多个相同命令的进程，你可能希望为每个进程调用分配不同的伪造进程结果。你可以使用 <code>Process</code> Facade 的 <code>sequence</code>方法来实现这一点：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">fake</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;ls *&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">sequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token operator">-&gt;</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;First invocation&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token operator">-&gt;</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Second invocation&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="faking-asynchronous-process-lifecycles"></a></p><h3 id="伪造异步进程的生命周期" tabindex="-1"><a class="header-anchor" href="#伪造异步进程的生命周期" aria-hidden="true">#</a> 伪造异步进程的生命周期</h3><p>到目前为止，我们主要讨论了伪造使用 <code>run</code> 方法同步调用的进程。但是，如果你正在尝试测试与通过 <code>start</code> 调用的异步进程交互的代码，则可能需要更复杂的方法来描述伪造进程。</p><p>例如，让我们想象以下使用异步进程交互的路由：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Log</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Route</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/import&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$process</span> <span class="token operator">=</span> <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;bash import.sh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$process</span><span class="token operator">-&gt;</span><span class="token function">running</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name static-context">Log</span><span class="token operator">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token variable">$process</span><span class="token operator">-&gt;</span><span class="token function">latestOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name static-context">Log</span><span class="token operator">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token variable">$process</span><span class="token operator">-&gt;</span><span class="token function">latestErrorOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token string single-quoted-string">&#39;Done&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了正确地伪造这个进程，我们需要能够描述 <code>running</code> 方法应返回 <code>true</code> 的次数。此外，我们可能想要指定多行顺序返回的输出。为了实现这一点，我们可以使用 <code>Process</code> Facade 的 <code>describe</code> 方法：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">fake</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;bash import.sh&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;First line of standard output&#39;</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">errorOutput</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;First line of error output&#39;</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Second line of standard output&#39;</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">exitCode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">iterations</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们深入研究上面的例子。使用 <code>output</code> 和 <code>errorOutput</code> 方法，我们可以指定顺序返回的多行输出。<code>exitCode</code> 方法可用于指定伪造进程的最终退出码。最后，<code>iterations</code> 方法可用于指定 <code>running</code> 方法应返回 <code>true</code> 的次数。</p><p><a name="available-assertions"></a></p><h3 id="可用的断言" tabindex="-1"><a class="header-anchor" href="#可用的断言" aria-hidden="true">#</a> 可用的断言</h3><p><a href="#faking-processes">如前所述</a>，Laravel 为你的功能测试提供了几个进程断言。我们将在下面讨论每个断言。</p><p><a name="assert-process-ran"></a></p><h4 id="assertran" tabindex="-1"><a class="header-anchor" href="#assertran" aria-hidden="true">#</a> assertRan</h4><p>断言已经执行了给定的进程：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Process</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">assertRan</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ls -la&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>assertRan</code> 方法还接受一个闭包，该闭包将接收一个进程实例和一个进程结果，使你可以检查进程的配置选项。如果此闭包返回 <code>true</code>，则断言将“通过”：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">assertRan</span><span class="token punctuation">(</span><span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token variable">$process</span><span class="token punctuation">,</span> <span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token variable">$process</span><span class="token operator">-&gt;</span><span class="token property">command</span> <span class="token operator">===</span> <span class="token string single-quoted-string">&#39;ls -la&#39;</span> <span class="token operator">&amp;&amp;</span>
    <span class="token variable">$process</span><span class="token operator">-&gt;</span><span class="token property">path</span> <span class="token operator">===</span> <span class="token constant">__DIR__</span> <span class="token operator">&amp;&amp;</span>
    <span class="token variable">$process</span><span class="token operator">-&gt;</span><span class="token property">timeout</span> <span class="token operator">===</span> <span class="token number">60</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>传递给 <code>assertRan</code> 闭包的 <code>$process</code> 是 <code>Illuminate\\Process\\PendingProcess</code> 的实例，而 $result 是 <code>Illuminate\\Contracts\\Process\\ProcessResult</code> 的实例。</p><p><a name="assert-process-didnt-run"></a></p><h4 id="assertdidntrun" tabindex="-1"><a class="header-anchor" href="#assertdidntrun" aria-hidden="true">#</a> assertDidntRun</h4><p>断言给定的进程没有被调用：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Process</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">assertDidntRun</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ls -la&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与 <code>assertRan</code> 方法类似，<code>assertDidntRun</code> 方法也接受一个闭包，该闭包将接收一个进程实例和一个进程结果，允许你检查进程的配置选项。如果此闭包返回 <code>true</code>，则断言将“失败”：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">assertDidntRun</span><span class="token punctuation">(</span><span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">PendingProcess</span> <span class="token variable">$process</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">ProcessResult</span> <span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token variable">$process</span><span class="token operator">-&gt;</span><span class="token property">command</span> <span class="token operator">===</span> <span class="token string single-quoted-string">&#39;ls -la&#39;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="assert-process-ran-times"></a></p><h4 id="assertrantimes" tabindex="-1"><a class="header-anchor" href="#assertrantimes" aria-hidden="true">#</a> assertRanTimes</h4><p>断言给定的进程被调用了指定的次数：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Process</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">assertRanTimes</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ls -la&#39;</span><span class="token punctuation">,</span> <span class="token argument-name">times</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>assertRanTimes</code> 方法也接受一个闭包，该闭包将接收一个进程实例和一个进程结果，允许你检查进程的配置选项。如果此闭包返回 <code>true</code> 并且进程被调用了指定的次数，则断言将“通过”：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Process</span><span class="token operator">::</span><span class="token function">assertRanTimes</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">PendingProcess</span> <span class="token variable">$process</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">ProcessResult</span> <span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$process</span><span class="token operator">-&gt;</span><span class="token property">command</span> <span class="token operator">===</span> <span class="token string single-quoted-string">&#39;ls -la&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token argument-name">times</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="preventing-stray-processes"></a></p><h3 id="防止运行未被伪造的进程" tabindex="-1"><a class="header-anchor" href="#防止运行未被伪造的进程" aria-hidden="true">#</a> 防止运行未被伪造的进程</h3><p>如果你想确保在单个测试或完整的测试套件中，所有被调用的进程都已经被伪造，你可以调用<code>preventStrayProcesses</code> 方法。调用此方法后，任何没有相应的伪造结果的进程都将引发异常，而不是启动实际进程：</p><pre><code>use Illuminate\\Support\\Facades\\Process;

Process::preventStrayProcesses();

Process::fake([
    &#39;ls *&#39; =&gt; &#39;Test output...&#39;,
]);

// 返回假响应...
Process::run(&#39;ls -la&#39;);

// 抛出一个异常...
Process::run(&#39;bash import.sh&#39;);
</code></pre>`,82);function g(b,h){const p=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("Laravel 通过 "),n("a",r,[s("Symfony Process 组件"),t(p)]),s(" 提供了一个小而美的 API，让你可以方便地从 Laravel 应用程序中调用外部进程。 Laravel 的进程管理功能专注于提供最常见的用例和提升开发人员体验。")]),d,n("p",null,[s("你可以使用 "),k,s(" 方法向正在运行的进程发送“信号”。在 "),n("a",v,[s("PHP 文档中可以找到预定义的信号常量列表"),t(p)]),s(":")]),m])}const y=e(i,[["render",g],["__file","processes.html.vue"]]);export{y as default};
