import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c as l,b as s,d as n,e,a as t}from"./app-8cdff07c.js";const c={},r=t('<h1 id="asset-bundling-vite" tabindex="-1"><a class="header-anchor" href="#asset-bundling-vite" aria-hidden="true">#</a> Asset Bundling (Vite)</h1><ul><li><a href="#introduction">Introduction</a></li><li><a href="#installation">Installation &amp; Setup</a><ul><li><a href="#installing-node">Installing Node</a></li><li><a href="#installing-vite-and-laravel-plugin">Installing Vite And The Laravel Plugin</a></li><li><a href="#configuring-vite">Configuring Vite</a></li><li><a href="#loading-your-scripts-and-styles">Loading Your Scripts And Styles</a></li></ul></li><li><a href="#running-vite">Running Vite</a></li><li><a href="#working-with-scripts">Working With JavaScript</a><ul><li><a href="#aliases">Aliases</a></li><li><a href="#vue">Vue</a></li><li><a href="#react">React</a></li><li><a href="#inertia">Inertia</a></li><li><a href="#url-processing">URL Processing</a></li></ul></li><li><a href="#working-with-stylesheets">Working With Stylesheets</a></li><li><a href="#working-with-blade-and-routes">Working With Blade &amp; Routes</a><ul><li><a href="#blade-processing-static-assets">Processing Static Assets With Vite</a></li><li><a href="#blade-refreshing-on-save">Refreshing On Save</a></li><li><a href="#blade-aliases">Aliases</a></li></ul></li><li><a href="#custom-base-urls">Custom Base URLs</a></li><li><a href="#environment-variables">Environment Variables</a></li><li><a href="#disabling-vite-in-tests">Disabling Vite In Tests</a></li><li><a href="#ssr">Server-Side Rendering (SSR)</a></li><li><a href="#script-and-style-attributes">Script &amp; Style Tag Attributes</a><ul><li><a href="#content-security-policy-csp-nonce">Content Security Policy (CSP) Nonce</a></li><li><a href="#subresource-integrity-sri">Subresource Integrity (SRI)</a></li><li><a href="#arbitrary-attributes">Arbitrary Attributes</a></li></ul></li><li><a href="#advanced-customization">Advanced Customization</a><ul><li><a href="#correcting-dev-server-urls">Correcting Dev Server URLs</a></li></ul></li></ul><p><a name="introduction"></a></p><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2>',4),u={href:"https://vitejs.dev",target:"_blank",rel:"noopener noreferrer"},d=s("p",null,"Laravel integrates seamlessly with Vite by providing an official plugin and Blade directive to load your assets for development and production.",-1),v=s("strong",null,"Note",-1),k=s("br",null,null,-1),m={href:"https://laravel-mix.com/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/laravel/vite-plugin/blob/main/UPGRADE.md#migrating-from-laravel-mix-to-vite",target:"_blank",rel:"noopener noreferrer"},g=s("p",null,[s("a",{name:"vite-or-mix"})],-1),b=s("h4",{id:"choosing-between-vite-and-laravel-mix",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#choosing-between-vite-and-laravel-mix","aria-hidden":"true"},"#"),n(" Choosing Between Vite And Laravel Mix")],-1),y={href:"https://laravel-mix.com/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://webpack.js.org/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://inertiajs.com",target:"_blank",rel:"noopener noreferrer"},_={href:"https://livewire.laravel.com",target:"_blank",rel:"noopener noreferrer"},x=s("p",null,[s("a",{name:"migrating-back-to-mix"})],-1),S=s("h4",{id:"migrating-back-to-mix",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#migrating-back-to-mix","aria-hidden":"true"},"#"),n(" Migrating Back To Mix")],-1),j={href:"https://github.com/laravel/vite-plugin/blob/main/UPGRADE.md#migrating-from-vite-to-laravel-mix",target:"_blank",rel:"noopener noreferrer"},V=t(`<p><a name="installation"></a></p><h2 id="installation-setup" tabindex="-1"><a class="header-anchor" href="#installation-setup" aria-hidden="true">#</a> Installation &amp; Setup</h2><blockquote><p><strong>Note</strong><br> The following documentation discusses how to manually install and configure the Laravel Vite plugin. However, Laravel&#39;s <a href="./starter-kits">starter kits</a> already include all of this scaffolding and are the fastest way to get started with Laravel and Vite.</p></blockquote><p><a name="installing-node"></a></p><h3 id="installing-node" tabindex="-1"><a class="header-anchor" href="#installing-node" aria-hidden="true">#</a> Installing Node</h3><p>You must ensure that Node.js (16+) and NPM are installed before running Vite and the Laravel plugin:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">node</span> <span class="token parameter variable">-v</span>
<span class="token function">npm</span> <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,7),L={href:"https://nodejs.org/en/download/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://laravel.com./sail",target:"_blank",rel:"noopener noreferrer"},q=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./vendor/bin/sail <span class="token function">node</span> <span class="token parameter variable">-v</span>
./vendor/bin/sail <span class="token function">npm</span> <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="installing-vite-and-laravel-plugin"></a></p><h3 id="installing-vite-and-the-laravel-plugin" tabindex="-1"><a class="header-anchor" href="#installing-vite-and-the-laravel-plugin" aria-hidden="true">#</a> Installing Vite And The Laravel Plugin</h3><p>Within a fresh installation of Laravel, you will find a <code>package.json</code> file in the root of your application&#39;s directory structure. The default <code>package.json</code> file already includes everything you need to get started using Vite and the Laravel plugin. You may install your application&#39;s frontend dependencies via NPM:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="configuring-vite"></a></p><h3 id="configuring-vite" tabindex="-1"><a class="header-anchor" href="#configuring-vite" aria-hidden="true">#</a> Configuring Vite</h3><p>Vite is configured via a <code>vite.config.js</code> file in the root of your project. You are free to customize this file based on your needs, and you may also install any other plugins your application requires, such as <code>@vitejs/plugin-vue</code> or <code>@vitejs/plugin-react</code>.</p><p>The Laravel Vite plugin requires you to specify the entry points for your application. These may be JavaScript or CSS files, and include preprocessed languages such as TypeScript, JSX, TSX, and Sass.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> laravel <span class="token keyword">from</span> <span class="token string">&#39;laravel-vite-plugin&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token function">laravel</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token string">&#39;resources/css/app.css&#39;</span><span class="token punctuation">,</span>
            <span class="token string">&#39;resources/js/app.js&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you are building an SPA, including applications built using Inertia, Vite works best without CSS entry points:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> laravel <span class="token keyword">from</span> <span class="token string">&#39;laravel-vite-plugin&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token function">laravel</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token string">&#39;resources/css/app.css&#39;</span><span class="token punctuation">,</span> <span class="token comment">// [tl! remove]</span>
            <span class="token string">&#39;resources/js/app.js&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Instead, you should import your CSS via JavaScript. Typically, this would be done in your application&#39;s <code>resources/js/app.js</code> file:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&#39;./bootstrap&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&#39;../css/app.css&#39;</span><span class="token punctuation">;</span> <span class="token comment">// [tl! add]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The Laravel plugin also supports multiple entry points and advanced configuration options such as <a href="#ssr">SSR entry points</a>.</p><p><a name="working-with-a-secure-development-server"></a></p><h4 id="working-with-a-secure-development-server" tabindex="-1"><a class="header-anchor" href="#working-with-a-secure-development-server" aria-hidden="true">#</a> Working With A Secure Development Server</h4><p>If your local development web server is serving your application via HTTPS, you may run into issues connecting to the Vite development server.</p>`,18),I={href:"https://herd.laravel.com",target:"_blank",rel:"noopener noreferrer"},T=s("a",{href:"./valet"},"Laravel Valet",-1),R=s("a",{href:"./valet#securing-sites"},"secure command",-1),A=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> laravel <span class="token keyword">from</span> <span class="token string">&#39;laravel-vite-plugin&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token function">laravel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token comment">// ...</span>
            <span class="token literal-property property">detectTls</span><span class="token operator">:</span> <span class="token string">&#39;my-app.test&#39;</span><span class="token punctuation">,</span> <span class="token comment">// [tl! add]</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When using another web server, you should generate a trusted certificate and manually configure Vite to use the generated certificates:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...</span>
<span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span><span class="token punctuation">;</span> <span class="token comment">// [tl! add]</span>

<span class="token keyword">const</span> host <span class="token operator">=</span> <span class="token string">&#39;my-app.test&#39;</span><span class="token punctuation">;</span> <span class="token comment">// [tl! add]</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token literal-property property">server</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// [tl! add]</span>
        host<span class="token punctuation">,</span> <span class="token comment">// [tl! add]</span>
        <span class="token literal-property property">hmr</span><span class="token operator">:</span> <span class="token punctuation">{</span> host <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// [tl! add]</span>
        <span class="token literal-property property">https</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// [tl! add]</span>
            <span class="token literal-property property">key</span><span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/path/to/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>host<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.key</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// [tl! add]</span>
            <span class="token literal-property property">cert</span><span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/path/to/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>host<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.crt</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// [tl! add]</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// [tl! add]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// [tl! add]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),P={href:"https://github.com/vitejs/vite-plugin-basic-ssl",target:"_blank",rel:"noopener noreferrer"},U=s("code",null,"@vitejs/plugin-basic-ssl",-1),N=s("code",null,"npm run dev",-1),W=t(`<p><a name="configuring-hmr-in-sail-on-wsl2"></a></p><h4 id="running-the-development-server-in-sail-on-wsl2" tabindex="-1"><a class="header-anchor" href="#running-the-development-server-in-sail-on-wsl2" aria-hidden="true">#</a> Running The Development Server In Sail On WSL2</h4><p>When running the Vite development server within <a href="./sail">Laravel Sail</a> on Windows Subsystem for Linux 2 (WSL2), you should add the following configuration to your <code>vite.config.js</code> file to ensure the browser can communicate with the development server:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token literal-property property">server</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// [tl! add:start]</span>
        <span class="token literal-property property">hmr</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// [tl! add:end]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),B={href:"https://vitejs.dev/config/server-options.html#server-watch",target:"_blank",rel:"noopener noreferrer"},z=s("code",null,"server.watch.usePolling",-1),$=t(`<p><a name="loading-your-scripts-and-styles"></a></p><h3 id="loading-your-scripts-and-styles" tabindex="-1"><a class="header-anchor" href="#loading-your-scripts-and-styles" aria-hidden="true">#</a> Loading Your Scripts And Styles</h3><p>With your Vite entry points configured, you may now reference them in a <code>@vite()</code> Blade directive that you add to the <code>&lt;head&gt;</code> of your application&#39;s root template:</p><div class="language-blade line-numbers-mode" data-ext="blade"><pre class="language-blade"><code>&lt;!doctype html&gt;
&lt;head&gt;
    {{-- ... --}}

    @vite([&#39;resources/css/app.css&#39;, &#39;resources/js/app.js&#39;])
&lt;/head&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you&#39;re importing your CSS via JavaScript, you only need to include the JavaScript entry point:</p><div class="language-blade line-numbers-mode" data-ext="blade"><pre class="language-blade"><code>&lt;!doctype html&gt;
&lt;head&gt;
    {{-- ... --}}

    @vite(&#39;resources/js/app.js&#39;)
&lt;/head&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>@vite</code> directive will automatically detect the Vite development server and inject the Vite client to enable Hot Module Replacement. In build mode, the directive will load your compiled and versioned assets, including any imported CSS.</p><p>If needed, you may also specify the build path of your compiled assets when invoking the <code>@vite</code> directive:</p><div class="language-blade line-numbers-mode" data-ext="blade"><pre class="language-blade"><code>&lt;!doctype html&gt;
&lt;head&gt;
    {{-- Given build path is relative to public path. --}}

    @vite(&#39;resources/js/app.js&#39;, &#39;vendor/courier/build&#39;)
&lt;/head&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="inline-assets"></a></p><h4 id="inline-assets" tabindex="-1"><a class="header-anchor" href="#inline-assets" aria-hidden="true">#</a> Inline Assets</h4><p>Sometimes it may be necessary to include the raw content of assets rather than linking to the versioned URL of the asset. For example, you may need to include asset content directly into your page when passing HTML content to a PDF generator. You may output the content of Vite assets using the <code>content</code> method provided by the <code>Vite</code> facade:</p><div class="language-blade line-numbers-mode" data-ext="blade"><pre class="language-blade"><code>@php
use Illuminate\\Support\\Facades\\Vite;
@endphp

&lt;!doctype html&gt;
&lt;head&gt;
    {{-- ... --}}

    &lt;style&gt;
        {!! Vite::content(&#39;resources/css/app.css&#39;) !!}
    &lt;/style&gt;
    &lt;script&gt;
        {!! Vite::content(&#39;resources/js/app.js&#39;) !!}
    &lt;/script&gt;
&lt;/head&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="running-vite"></a></p><h2 id="running-vite" tabindex="-1"><a class="header-anchor" href="#running-vite" aria-hidden="true">#</a> Running Vite</h2><p>There are two ways you can run Vite. You may run the development server via the <code>dev</code> command, which is useful while developing locally. The development server will automatically detect changes to your files and instantly reflect them in any open browser windows.</p><p>Or, running the <code>build</code> command will version and bundle your application&#39;s assets and get them ready for you to deploy to production:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Run the Vite development server...</span>
<span class="token function">npm</span> run dev

<span class="token comment"># Build and version the assets for production...</span>
<span class="token function">npm</span> run build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you are running the development server in <a href="./sail">Sail</a> on WSL2, you may need some <a href="#configuring-hmr-in-sail-on-wsl2">additional configuration</a> options.</p><p><a name="working-with-scripts"></a></p><h2 id="working-with-javascript" tabindex="-1"><a class="header-anchor" href="#working-with-javascript" aria-hidden="true">#</a> Working With JavaScript</h2><p><a name="aliases"></a></p><h3 id="aliases" tabindex="-1"><a class="header-anchor" href="#aliases" aria-hidden="true">#</a> Aliases</h3><p>By default, The Laravel plugin provides a common alias to help you hit the ground running and conveniently import your application&#39;s assets:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token string">&#39;@&#39;</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;/resources/js&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You may overwrite the <code>&#39;@&#39;</code> alias by adding your own to the <code>vite.config.js</code> configuration file:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> laravel <span class="token keyword">from</span> <span class="token string">&#39;laravel-vite-plugin&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token function">laravel</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;resources/ts/app.tsx&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string-property property">&#39;@&#39;</span><span class="token operator">:</span> <span class="token string">&#39;/resources/ts&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="vue"></a></p><h3 id="vue" tabindex="-1"><a class="header-anchor" href="#vue" aria-hidden="true">#</a> Vue</h3>`,29),M={href:"https://vuejs.org/",target:"_blank",rel:"noopener noreferrer"},F=s("code",null,"@vitejs/plugin-vue",-1),H=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev @vitejs/plugin-vue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You may then include the plugin in your <code>vite.config.js</code> configuration file. There are a few additional options you will need when using the Vue plugin with Laravel:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> laravel <span class="token keyword">from</span> <span class="token string">&#39;laravel-vite-plugin&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">&#39;@vitejs/plugin-vue&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token function">laravel</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;resources/js/app.js&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">transformAssetUrls</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token comment">// The Vue plugin will re-write asset URLs, when referenced</span>
                    <span class="token comment">// in Single File Components, to point to the Laravel web</span>
                    <span class="token comment">// server. Setting this to \`null\` allows the Laravel plugin</span>
                    <span class="token comment">// to instead re-write asset URLs to point to the Vite</span>
                    <span class="token comment">// server instead.</span>
                    <span class="token literal-property property">base</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>

                    <span class="token comment">// The Vue plugin will parse absolute URLs and treat them</span>
                    <span class="token comment">// as absolute paths to files on disk. Setting this to</span>
                    <span class="token comment">// \`false\` will leave absolute URLs un-touched so they can</span>
                    <span class="token comment">// reference assets in the public directory as expected.</span>
                    <span class="token literal-property property">includeAbsolute</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>Note</strong><br> Laravel&#39;s <a href="./starter-kits">starter kits</a> already include the proper Laravel, Vue, and Vite configuration. Check out <a href="./starter-kits#breeze-and-inertia">Laravel Breeze</a> for the fastest way to get started with Laravel, Vue, and Vite.</p></blockquote><p><a name="react"></a></p><h3 id="react" tabindex="-1"><a class="header-anchor" href="#react" aria-hidden="true">#</a> React</h3>`,6),Y={href:"https://reactjs.org/",target:"_blank",rel:"noopener noreferrer"},E=s("code",null,"@vitejs/plugin-react",-1),J=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev @vitejs/plugin-react
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You may then include the plugin in your <code>vite.config.js</code> configuration file:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> laravel <span class="token keyword">from</span> <span class="token string">&#39;laravel-vite-plugin&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> react <span class="token keyword">from</span> <span class="token string">&#39;@vitejs/plugin-react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token function">laravel</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;resources/js/app.jsx&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">react</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You will need to ensure that any files containing JSX have a <code>.jsx</code> or <code>.tsx</code> extension, remembering to update your entry point, if required, as <a href="#configuring-vite">shown above</a>.</p><p>You will also need to include the additional <code>@viteReactRefresh</code> Blade directive alongside your existing <code>@vite</code> directive.</p><div class="language-blade line-numbers-mode" data-ext="blade"><pre class="language-blade"><code>@viteReactRefresh
@vite(&#39;resources/js/app.jsx&#39;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>@viteReactRefresh</code> directive must be called before the <code>@vite</code> directive.</p><blockquote><p><strong>Note</strong><br> Laravel&#39;s <a href="./starter-kits">starter kits</a> already include the proper Laravel, React, and Vite configuration. Check out <a href="./starter-kits#breeze-and-inertia">Laravel Breeze</a> for the fastest way to get started with Laravel, React, and Vite.</p></blockquote><p><a name="inertia"></a></p><h3 id="inertia" tabindex="-1"><a class="header-anchor" href="#inertia" aria-hidden="true">#</a> Inertia</h3><p>The Laravel Vite plugin provides a convenient <code>resolvePageComponent</code> function to help you resolve your Inertia page components. Below is an example of the helper in use with Vue 3; however, you may also utilize the function in other frameworks such as React:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp<span class="token punctuation">,</span> h <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createInertiaApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@inertiajs/vue3&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> resolvePageComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;laravel-vite-plugin/inertia-helpers&#39;</span><span class="token punctuation">;</span>

<span class="token function">createInertiaApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">resolve</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolvePageComponent</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">./Pages/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.vue</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">&#39;./Pages/**/*.vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> el<span class="token punctuation">,</span> App<span class="token punctuation">,</span> props<span class="token punctuation">,</span> plugin <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">,</span> props<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>Note</strong><br> Laravel&#39;s <a href="./starter-kits">starter kits</a> already include the proper Laravel, Inertia, and Vite configuration. Check out <a href="./starter-kits#breeze-and-inertia">Laravel Breeze</a> for the fastest way to get started with Laravel, Inertia, and Vite.</p></blockquote><p><a name="url-processing"></a></p><h3 id="url-processing" tabindex="-1"><a class="header-anchor" href="#url-processing" aria-hidden="true">#</a> URL Processing</h3><p>When using Vite and referencing assets in your application&#39;s HTML, CSS, or JS, there are a couple of caveats to consider. First, if you reference assets with an absolute path, Vite will not include the asset in the build; therefore, you should ensure that the asset is available in your public directory.</p><p>When referencing relative asset paths, you should remember that the paths are relative to the file where they are referenced. Any assets referenced via a relative path will be re-written, versioned, and bundled by Vite.</p><p>Consider the following project structure:</p><div class="language-nothing line-numbers-mode" data-ext="nothing"><pre class="language-nothing"><code>public/
  taylor.png
resources/
  js/
    Pages/
      Welcome.vue
  images/
    abigail.png
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The following example demonstrates how Vite will treat relative and absolute URLs:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- This asset is not handled by Vite and will not be included in the build --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/taylor.png<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- This asset will be re-written, versioned, and bundled by Vite --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../../images/abigail.png<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="working-with-stylesheets"></a></p><h2 id="working-with-stylesheets" tabindex="-1"><a class="header-anchor" href="#working-with-stylesheets" aria-hidden="true">#</a> Working With Stylesheets</h2>`,23),D={href:"https://vitejs.dev/guide/features.html#css",target:"_blank",rel:"noopener noreferrer"},O={href:"https://tailwindcss.com",target:"_blank",rel:"noopener noreferrer"},G=s("code",null,"postcss.config.js",-1),K=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">tailwindcss</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">autoprefixer</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),X=s("strong",null,"Note",-1),Z=s("a",{href:"./starter-kits"},"starter kits",-1),Q={href:"https://tailwindcss.com/docs/guides/laravel",target:"_blank",rel:"noopener noreferrer"},nn=t(`<p><a name="working-with-blade-and-routes"></a></p><h2 id="working-with-blade-routes" tabindex="-1"><a class="header-anchor" href="#working-with-blade-routes" aria-hidden="true">#</a> Working With Blade &amp; Routes</h2><p><a name="blade-processing-static-assets"></a></p><h3 id="processing-static-assets-with-vite" tabindex="-1"><a class="header-anchor" href="#processing-static-assets-with-vite" aria-hidden="true">#</a> Processing Static Assets With Vite</h3><p>When referencing assets in your JavaScript or CSS, Vite automatically processes and versions them. In addition, when building Blade based applications, Vite can also process and version static assets that you reference solely in Blade templates.</p><p>However, in order to accomplish this, you need to make Vite aware of your assets by importing the static assets into the application&#39;s entry point. For example, if you want to process and version all images stored in <code>resources/images</code> and all fonts stored in <code>resources/fonts</code>, you should add the following in your application&#39;s <code>resources/js/app.js</code> entry point:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token string">&#39;../images/**&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;../fonts/**&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>These assets will now be processed by Vite when running <code>npm run build</code>. You can then reference these assets in Blade templates using the <code>Vite::asset</code> method, which will return the versioned URL for a given asset:</p><div class="language-blade line-numbers-mode" data-ext="blade"><pre class="language-blade"><code>&lt;img src=&quot;{{ Vite::asset(&#39;resources/images/logo.png&#39;) }}&quot;&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="blade-refreshing-on-save"></a></p><h3 id="refreshing-on-save" tabindex="-1"><a class="header-anchor" href="#refreshing-on-save" aria-hidden="true">#</a> Refreshing On Save</h3><p>When your application is built using traditional server-side rendering with Blade, Vite can improve your development workflow by automatically refreshing the browser when you make changes to view files in your application. To get started, you can simply specify the <code>refresh</code> option as <code>true</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> laravel <span class="token keyword">from</span> <span class="token string">&#39;laravel-vite-plugin&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token function">laravel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token comment">// ...</span>
            <span class="token literal-property property">refresh</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When the <code>refresh</code> option is <code>true</code>, saving files in the following directories will trigger the browser to perform a full page refresh while you are running <code>npm run dev</code>:</p><ul><li><code>app/View/Components/**</code></li><li><code>lang/**</code></li><li><code>resources/lang/**</code></li><li><code>resources/views/**</code></li><li><code>routes/**</code></li></ul>`,15),sn=s("code",null,"routes/**",-1),an={href:"https://github.com/tighten/ziggy",target:"_blank",rel:"noopener noreferrer"},en=t(`<p>If these default paths do not suit your needs, you can specify your own list of paths to watch:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> laravel <span class="token keyword">from</span> <span class="token string">&#39;laravel-vite-plugin&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token function">laravel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token comment">// ...</span>
            <span class="token literal-property property">refresh</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;resources/views/**&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),tn={href:"https://github.com/ElMassimo/vite-plugin-full-reload",target:"_blank",rel:"noopener noreferrer"},on=s("code",null,"vite-plugin-full-reload",-1),pn=s("code",null,"config",-1),ln=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> laravel <span class="token keyword">from</span> <span class="token string">&#39;laravel-vite-plugin&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token function">laravel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token comment">// ...</span>
            <span class="token literal-property property">refresh</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
                <span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;path/to/watch/**&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token literal-property property">config</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token number">300</span> <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="blade-aliases"></a></p><h3 id="aliases-1" tabindex="-1"><a class="header-anchor" href="#aliases-1" aria-hidden="true">#</a> Aliases</h3><p>It is common in JavaScript applications to <a href="#aliases">create aliases</a> to regularly referenced directories. But, you may also create aliases to use in Blade by using the <code>macro</code> method on the <code>Illuminate\\Support\\Facades\\Vite</code> class. Typically, &quot;macros&quot; should be defined within the <code>boot</code> method of a <a href="./providers">service provider</a>:</p><pre><code>/**
 * Bootstrap any application services.
 */
public function boot(): void
{
    Vite::macro(&#39;image&#39;, fn (string $asset) =&gt; $this-&gt;asset(&quot;resources/images/{$asset}&quot;));
}
</code></pre><p>Once a macro has been defined, it can be invoked within your templates. For example, we can use the <code>image</code> macro defined above to reference an asset located at <code>resources/images/logo.png</code>:</p><div class="language-blade line-numbers-mode" data-ext="blade"><pre class="language-blade"><code>&lt;img src=&quot;{{ Vite::image(&#39;logo.png&#39;) }}&quot; alt=&quot;Laravel Logo&quot;&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="custom-base-urls"></a></p><h2 id="custom-base-urls" tabindex="-1"><a class="header-anchor" href="#custom-base-urls" aria-hidden="true">#</a> Custom Base URLs</h2><p>If your Vite compiled assets are deployed to a domain separate from your application, such as via a CDN, you must specify the <code>ASSET_URL</code> environment variable within your application&#39;s <code>.env</code> file:</p><div class="language-env line-numbers-mode" data-ext="env"><pre class="language-env"><code>ASSET_URL=https://cdn.example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>After configuring the asset URL, all re-written URLs to your assets will be prefixed with the configured value:</p><div class="language-nothing line-numbers-mode" data-ext="nothing"><pre class="language-nothing"><code>https://cdn.example.com/build/assets/app.9dce8d17.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Remember that <a href="#url-processing">absolute URLs are not re-written by Vite</a>, so they will not be prefixed.</p><p><a name="environment-variables"></a></p><h2 id="environment-variables" tabindex="-1"><a class="header-anchor" href="#environment-variables" aria-hidden="true">#</a> Environment Variables</h2><p>You may inject environment variables into your JavaScript by prefixing them with <code>VITE_</code> in your application&#39;s <code>.env</code> file:</p><div class="language-env line-numbers-mode" data-ext="env"><pre class="language-env"><code>VITE_SENTRY_DSN_PUBLIC=http://example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You may access injected environment variables via the <code>i<wbr>mport.meta.env</code> object:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VITE_SENTRY_DSN_PUBLIC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="disabling-vite-in-tests"></a></p><h2 id="disabling-vite-in-tests" tabindex="-1"><a class="header-anchor" href="#disabling-vite-in-tests" aria-hidden="true">#</a> Disabling Vite In Tests</h2><p>Laravel&#39;s Vite integration will attempt to resolve your assets while running your tests, which requires you to either run the Vite development server or build your assets.</p><p>If you would prefer to mock Vite during testing, you may call the <code>withoutVite</code> method, which is is available for any tests that extend Laravel&#39;s <code>TestCase</code> class:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Tests<span class="token punctuation">\\</span>TestCase</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">ExampleTest</span> <span class="token keyword">extends</span> <span class="token class-name">TestCase</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test_without_vite_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">withoutVite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you would like to disable Vite for all tests, you may call the <code>withoutVite</code> method from the <code>setUp</code> method on your base <code>TestCase</code> class:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">Tests</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>TestCase</span> <span class="token keyword">as</span> BaseTestCase<span class="token punctuation">;</span>

<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">TestCase</span> <span class="token keyword">extends</span> <span class="token class-name">BaseTestCase</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">CreatesApplication</span><span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span><span class="token comment">// [tl! add:start]</span>
    <span class="token punctuation">{</span>
        <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">withoutVite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token comment">// [tl! add:end]</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="ssr"></a></p><h2 id="server-side-rendering-ssr" tabindex="-1"><a class="header-anchor" href="#server-side-rendering-ssr" aria-hidden="true">#</a> Server-Side Rendering (SSR)</h2><p>The Laravel Vite plugin makes it painless to set up server-side rendering with Vite. To get started, create an SSR entry point at <code>resources/js/ssr.js</code> and specify the entry point by passing a configuration option to the Laravel plugin:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> laravel <span class="token keyword">from</span> <span class="token string">&#39;laravel-vite-plugin&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token function">laravel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&#39;resources/js/app.js&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">ssr</span><span class="token operator">:</span> <span class="token string">&#39;resources/js/ssr.js&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To ensure you don&#39;t forget to rebuild the SSR entry point, we recommend augmenting the &quot;build&quot; script in your application&#39;s <code>package.json</code> to create your SSR build:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
     <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite&quot;</span><span class="token punctuation">,</span>
     <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite build&quot;</span> <span class="token comment">// [tl! remove]</span>
     <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite build &amp;&amp; vite build --ssr&quot;</span> <span class="token comment">// [tl! add]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, to build and start the SSR server, you may run the following commands:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run build
<span class="token function">node</span> bootstrap/ssr/ssr.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,35),cn={href:"https://inertiajs.com/server-side-rendering",target:"_blank",rel:"noopener noreferrer"},rn=s("code",null,"inertia:start-ssr",-1),un=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan inertia:start-ssr
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><strong>Note</strong><br> Laravel&#39;s <a href="./starter-kits">starter kits</a> already include the proper Laravel, Inertia SSR, and Vite configuration. Check out <a href="./starter-kits#breeze-and-inertia">Laravel Breeze</a> for the fastest way to get started with Laravel, Inertia SSR, and Vite.</p></blockquote><p><a name="script-and-style-attributes"></a></p><h2 id="script-style-tag-attributes" tabindex="-1"><a class="header-anchor" href="#script-style-tag-attributes" aria-hidden="true">#</a> Script &amp; Style Tag Attributes</h2><p><a name="content-security-policy-csp-nonce"></a></p><h3 id="content-security-policy-csp-nonce" tabindex="-1"><a class="header-anchor" href="#content-security-policy-csp-nonce" aria-hidden="true">#</a> Content Security Policy (CSP) Nonce</h3>`,6),dn={href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce",target:"_blank",rel:"noopener noreferrer"},vn=s("code",null,"nonce",-1),kn={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP",target:"_blank",rel:"noopener noreferrer"},mn=s("code",null,"useCspNonce",-1),hn=s("a",{href:"./middleware"},"middleware",-1),gn=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Middleware</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Closure</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Vite</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>HttpFoundation<span class="token punctuation">\\</span>Response</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">AddContentSecurityPolicyHeaders</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * Handle an incoming request.
     *
     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">\\</span>Closure</span>(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">handle</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Closure</span> <span class="token variable">$next</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Response</span>
    <span class="token punctuation">{</span>
        <span class="token class-name static-context">Vite</span><span class="token operator">::</span><span class="token function">useCspNonce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token variable">$next</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">withHeaders</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;Content-Security-Policy&#39;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;script-src &#39;nonce-&quot;</span><span class="token operator">.</span><span class="token class-name static-context">Vite</span><span class="token operator">::</span><span class="token function">cspNonce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">&quot;&#39;&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After invoking the <code>useCspNonce</code> method, Laravel will automatically include the <code>nonce</code> attributes on all generated script and style tags.</p>`,2),bn={href:"https://github.com/tighten/ziggy#using-routes-with-a-content-security-policy",target:"_blank",rel:"noopener noreferrer"},yn=s("code",null,"@route",-1),fn=s("a",{href:"./starter-kits"},"starter kits",-1),wn=s("code",null,"cspNonce",-1),_n=t(`<div class="language-blade line-numbers-mode" data-ext="blade"><pre class="language-blade"><code>@routes(nonce: Vite::cspNonce())
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If you already have a nonce that you would like to instruct Laravel to use, you may pass the nonce to the <code>useCspNonce</code> method:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Vite</span><span class="token operator">::</span><span class="token function">useCspNonce</span><span class="token punctuation">(</span><span class="token variable">$nonce</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="subresource-integrity-sri"></a></p><h3 id="subresource-integrity-sri" tabindex="-1"><a class="header-anchor" href="#subresource-integrity-sri" aria-hidden="true">#</a> Subresource Integrity (SRI)</h3>`,5),xn=s("code",null,"integrity",-1),Sn=s("code",null,"integrity",-1),jn={href:"https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity",target:"_blank",rel:"noopener noreferrer"},Vn=s("code",null,"integrity",-1),Ln={href:"https://www.npmjs.com/package/vite-plugin-manifest-sri",target:"_blank",rel:"noopener noreferrer"},Cn=s("code",null,"vite-plugin-manifest-sri",-1),qn=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev vite-plugin-manifest-sri
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You may then enable this plugin in your <code>vite.config.js</code> file:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> laravel <span class="token keyword">from</span> <span class="token string">&#39;laravel-vite-plugin&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> manifestSRI <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-manifest-sri&#39;</span><span class="token punctuation">;</span><span class="token comment">// [tl! add]</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token function">laravel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token comment">// ...</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">manifestSRI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">// [tl! add]</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If required, you may also customize the manifest key where the integrity hash can be found:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Vite</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Vite</span><span class="token operator">::</span><span class="token function">useIntegrityKey</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;custom-integrity-key&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you would like to disable this auto-detection completely, you may pass <code>false</code> to the <code>useIntegrityKey</code> method:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Vite</span><span class="token operator">::</span><span class="token function">useIntegrityKey</span><span class="token punctuation">(</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="arbitrary-attributes"></a></p><h3 id="arbitrary-attributes" tabindex="-1"><a class="header-anchor" href="#arbitrary-attributes" aria-hidden="true">#</a> Arbitrary Attributes</h3>`,9),In={href:"https://turbo.hotwired.dev/handbook/drive#reloading-when-assets-change",target:"_blank",rel:"noopener noreferrer"},Tn=s("code",null,"data-turbo-track",-1),Rn=s("code",null,"useScriptTagAttributes",-1),An=s("code",null,"useStyleTagAttributes",-1),Pn=s("a",{href:"./providers"},"service provider",-1),Un=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Vite</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Vite</span><span class="token operator">::</span><span class="token function">useScriptTagAttributes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;data-turbo-track&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;reload&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Specify a value for the attribute...</span>
    <span class="token string single-quoted-string">&#39;async&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// Specify an attribute without a value...</span>
    <span class="token string single-quoted-string">&#39;integrity&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// Exclude an attribute that would otherwise be included...</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Vite</span><span class="token operator">::</span><span class="token function">useStyleTagAttributes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;data-turbo-track&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;reload&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you need to conditionally add attributes, you may pass a callback that will receive the asset source path, its URL, its manifest chunk, and the entire manifest:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Vite</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Vite</span><span class="token operator">::</span><span class="token function">useScriptTagAttributes</span><span class="token punctuation">(</span><span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$src</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$url</span><span class="token punctuation">,</span> <span class="token keyword type-declaration">array</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$chunk</span><span class="token punctuation">,</span> <span class="token keyword type-declaration">array</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$manifest</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;data-turbo-track&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$src</span> <span class="token operator">===</span> <span class="token string single-quoted-string">&#39;resources/js/app.js&#39;</span> <span class="token operator">?</span> <span class="token string single-quoted-string">&#39;reload&#39;</span> <span class="token punctuation">:</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Vite</span><span class="token operator">::</span><span class="token function">useStyleTagAttributes</span><span class="token punctuation">(</span><span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$src</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$url</span><span class="token punctuation">,</span> <span class="token keyword type-declaration">array</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$chunk</span><span class="token punctuation">,</span> <span class="token keyword type-declaration">array</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$manifest</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;data-turbo-track&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$chunk</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$chunk</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;isEntry&#39;</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token string single-quoted-string">&#39;reload&#39;</span> <span class="token punctuation">:</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>Warning</strong><br> The <code>$chunk</code> and <code>$manifest</code> arguments will be <code>null</code> while the Vite development server is running.</p></blockquote><p><a name="advanced-customization"></a></p><h2 id="advanced-customization" tabindex="-1"><a class="header-anchor" href="#advanced-customization" aria-hidden="true">#</a> Advanced Customization</h2><p>Out of the box, Laravel&#39;s Vite plugin uses sensible conventions that should work for the majority of applications; however, sometimes you may need to customize Vite&#39;s behavior. To enable additional customization options, we offer the following methods and options which can be used in place of the <code>@vite</code> Blade directive:</p><div class="language-blade line-numbers-mode" data-ext="blade"><pre class="language-blade"><code>&lt;!doctype html&gt;
&lt;head&gt;
    {{-- ... --}}

    {{
        Vite::useHotFile(storage_path(&#39;vite.hot&#39;)) // Customize the &quot;hot&quot; file...
            -&gt;useBuildDirectory(&#39;bundle&#39;) // Customize the build directory...
            -&gt;useManifestFilename(&#39;assets.json&#39;) // Customize the manifest filename...
            -&gt;withEntryPoints([&#39;resources/js/app.js&#39;]) // Specify the entry points...
    }}
&lt;/head&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Within the <code>vite.config.js</code> file, you should then specify the same configuration:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> laravel <span class="token keyword">from</span> <span class="token string">&#39;laravel-vite-plugin&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token function">laravel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">hotFile</span><span class="token operator">:</span> <span class="token string">&#39;storage/vite.hot&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Customize the &quot;hot&quot; file...</span>
            <span class="token literal-property property">buildDirectory</span><span class="token operator">:</span> <span class="token string">&#39;bundle&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Customize the build directory...</span>
            <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;resources/js/app.js&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// Specify the entry points...</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">build</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">manifest</span><span class="token operator">:</span> <span class="token string">&#39;assets.json&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Customize the manifest filename...</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="correcting-dev-server-urls"></a></p><h3 id="correcting-dev-server-urls" tabindex="-1"><a class="header-anchor" href="#correcting-dev-server-urls" aria-hidden="true">#</a> Correcting Dev Server URLs</h3><p>Some plugins within the Vite ecosystem assume that URLs which begin with a forward-slash will always point to the Vite dev server. However, due to the nature of the Laravel integration, this is not the case.</p><p>For example, the <code>vite-imagetools</code> plugin outputs URLs like the following while Vite is serving your assets:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/@imagetools/f0b2f404b13f052c604e632f2fb60381bf61a520<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The <code>vite-imagetools</code> plugin is expecting that the output URL will be intercepted by Vite and the plugin may then handle all URLs that start with <code>/@imagetools</code>. If you are using plugins that are expecting this behaviour, you will need to manually correct the URLs. You can do this in your <code>vite.config.js</code> file by using the <code>transformOnServe</code> option.</p><p>In this particular example, we will prepend the dev server URL to all occurrences of <code>/@imagetools</code> within the generated code:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> laravel <span class="token keyword">from</span> <span class="token string">&#39;laravel-vite-plugin&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> imagetools <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite-imagetools&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token function">laravel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token comment">// ...</span>
            <span class="token function-variable function">transformOnServe</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> devServerUrl</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> code<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&#39;/@imagetools&#39;</span><span class="token punctuation">,</span> devServerUrl<span class="token operator">+</span><span class="token string">&#39;/@imagetools&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">imagetools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, while Vite is serving Assets, it will output URLs that point to the Vite dev server:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>- <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/@imagetools/f0b2f404b13f052c604e632f2fb60381bf61a520<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- [tl! remove] --&gt;</span>
+ <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://[::1]:5173/@imagetools/f0b2f404b13f052c604e632f2fb60381bf61a520<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- [tl! add] --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,20);function Nn(Wn,Bn){const a=o("ExternalLinkIcon");return p(),l("div",null,[r,s("p",null,[s("a",u,[n("Vite"),e(a)]),n(" is a modern frontend build tool that provides an extremely fast development environment and bundles your code for production. When building applications with Laravel, you will typically use Vite to bundle your application's CSS and JavaScript files into production ready assets.")]),d,s("blockquote",null,[s("p",null,[v,k,n(" Are you running Laravel Mix? Vite has replaced Laravel Mix in new Laravel installations. For Mix documentation, please visit the "),s("a",m,[n("Laravel Mix"),e(a)]),n(" website. If you would like to switch to Vite, please see our "),s("a",h,[n("migration guide"),e(a)]),n(".")])]),g,b,s("p",null,[n("Before transitioning to Vite, new Laravel applications utilized "),s("a",y,[n("Mix"),e(a)]),n(", which is powered by "),s("a",f,[n("webpack"),e(a)]),n(", when bundling assets. Vite focuses on providing a faster and more productive experience when building rich JavaScript applications. If you are developing a Single Page Application (SPA), including those developed with tools like "),s("a",w,[n("Inertia"),e(a)]),n(", Vite will be the perfect fit.")]),s("p",null,[n('Vite also works well with traditional server-side rendered applications with JavaScript "sprinkles", including those using '),s("a",_,[n("Livewire"),e(a)]),n(". However, it lacks some features that Laravel Mix supports, such as the ability to copy arbitrary assets into the build that are not referenced directly in your JavaScript application.")]),x,S,s("p",null,[n("Have you started a new Laravel application using our Vite scaffolding but need to move back to Laravel Mix and webpack? No problem. Please consult our "),s("a",j,[n("official guide on migrating from Vite to Mix"),e(a)]),n(".")]),V,s("p",null,[n("You can easily install the latest version of Node and NPM using simple graphical installers from "),s("a",L,[n("the official Node website"),e(a)]),n(". Or, if you are using "),s("a",C,[n("Laravel Sail"),e(a)]),n(", you may invoke Node and NPM through Sail:")]),q,s("p",null,[n("If you are using "),s("a",I,[n("Laravel Herd"),e(a)]),n(" and have secured the site or you are using "),T,n(" and have run the "),R,n(" against your application, you may configure the Vite development server to automatically use the generated TLS certificates:")]),A,s("p",null,[n("If you are unable to generate a trusted certificate for your system, you may install and configure the "),s("a",P,[U,n(" plugin"),e(a)]),n(`. When using untrusted certificates, you will need to accept the certificate warning for Vite's development server in your browser by following the "Local" link in your console when running the `),N,n(" command.")]),W,s("p",null,[n("If your file changes are not being reflected in the browser while the development server is running, you may also need to configure Vite's "),s("a",B,[z,n(" option"),e(a)]),n(".")]),$,s("p",null,[n("If you would like to build your frontend using the "),s("a",M,[n("Vue"),e(a)]),n(" framework, then you will also need to install the "),F,n(" plugin:")]),H,s("p",null,[n("If you would like to build your frontend using the "),s("a",Y,[n("React"),e(a)]),n(" framework, then you will also need to install the "),E,n(" plugin:")]),J,s("p",null,[n("You can learn more about Vite's CSS support within the "),s("a",D,[n("Vite documentation"),e(a)]),n(". If you are using PostCSS plugins such as "),s("a",O,[n("Tailwind"),e(a)]),n(", you may create a "),G,n(" file in the root of your project and Vite will automatically apply it:")]),K,s("blockquote",null,[s("p",null,[X,n(" Laravel's "),Z,n(" already include the proper Tailwind, PostCSS, and Vite configuration. Or, if you would like to use Tailwind and Laravel without using one of our starter kits, check out "),s("a",Q,[n("Tailwind's installation guide for Laravel"),e(a)]),n(".")])]),nn,s("p",null,[n("Watching the "),sn,n(" directory is useful if you are utilizing "),s("a",an,[n("Ziggy"),e(a)]),n(" to generate route links within your application's frontend.")]),en,s("p",null,[n("Under the hood, the Laravel Vite plugin uses the "),s("a",tn,[on,e(a)]),n(" package, which offers some advanced configuration options to fine-tune this feature's behavior. If you need this level of customization, you may provide a "),pn,n(" definition:")]),ln,s("p",null,[n("If you are using "),s("a",cn,[n("SSR with Inertia"),e(a)]),n(", you may instead use the "),rn,n(" Artisan command to start the SSR server:")]),un,s("p",null,[n("If you wish to include a "),s("a",dn,[vn,n(" attribute"),e(a)]),n(" on your script and style tags as part of your "),s("a",kn,[n("Content Security Policy"),e(a)]),n(", you may generate or specify a nonce using the "),mn,n(" method within a custom "),hn,n(":")]),gn,s("p",null,[n("If you need to specify the nonce elsewhere, including the "),s("a",bn,[n("Ziggy "),yn,n(" directive"),e(a)]),n(" included with Laravel's "),fn,n(", you may retrieve it using the "),wn,n(" method:")]),_n,s("p",null,[n("If your Vite manifest includes "),xn,n(" hashes for your assets, Laravel will automatically add the "),Sn,n(" attribute on any script and style tags it generates in order to enforce "),s("a",jn,[n("Subresource Integrity"),e(a)]),n(". By default, Vite does not include the "),Vn,n(" hash in its manifest, but you may enable it by installing the "),s("a",Ln,[Cn,e(a)]),n(" NPM plugin:")]),qn,s("p",null,[n("If you need to include additional attributes on your script and style tags, such as the "),s("a",In,[Tn,e(a)]),n(" attribute, you may specify them via the "),Rn,n(" and "),An,n(" methods. Typically, this methods should be invoked from a "),Pn,n(":")]),Un])}const Mn=i(c,[["render",Nn],["__file","vite.html.vue"]]);export{Mn as default};
