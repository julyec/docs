import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-c17653d8.js";const e="/dcat/assets/jwHjbKP9PL-42ce00b5.png",o="/dcat/assets/KwSIti7bs5-e0fc18f4.png",p="/dcat/assets/aO6OS0sOyv-f423d18d.png",c="/dcat/assets/755BUms334-390f495d.png",i="/dcat/assets/MejvctX1V7-0b1811aa.png",l={},u=t('<h1 id="json-format-field-handling" tabindex="-1"><a class="header-anchor" href="#json-format-field-handling" aria-hidden="true">#</a> JSON format field handling</h1><p>The <code>dcat-admin</code> form provides the following components to handle <code>JSON</code> formatted fields, which are convenient for handling <code>JOSN</code> formatted objects, 1D arrays, 2D arrays, etc.</p><h2 id="keyvalue-object-keyvalue" tabindex="-1"><a class="header-anchor" href="#keyvalue-object-keyvalue" aria-hidden="true">#</a> KeyValue object (keyValue)</h2><p><img src="'+e+`" alt="" loading="lazy"></p><p>If your field stores a variable <code>key</code> in the <code>{&quot;field&quot;: &quot;value&quot;}</code> format, you can use the <code>keyValue</code> component:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$form</span><span class="token operator">-&gt;</span><span class="token function">keyValue</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column_name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Set the validation rule</span>
<span class="token variable">$form</span><span class="token operator">-&gt;</span><span class="token function">keyValue</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column_name&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">rules</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;required|min:5&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Custom key names and translations of key titles</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$form</span><span class="token operator">-&gt;</span><span class="token function">keyValue</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span><span class="token function">setKeyLabel</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;KeyName&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">setValueLabel</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;KeyValue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="fixed-key-value-objects-embeds" tabindex="-1"><a class="header-anchor" href="#fixed-key-value-objects-embeds" aria-hidden="true">#</a> Fixed key-value objects (embeds)</h2><p><img src="`+o+`" alt="" loading="lazy"></p><p>Used to process <code>mysql</code>&#39;s <code>JSON</code> type field data or <code>mongodb</code>&#39;s <code>object</code> type data, or store multiple <code>field</code> data values as <code>JSON</code> strings in <code>mysql</code>&#39;s string type fields.</p><p>Applies to fields of type <code>JSON</code> with a fixed key value</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$form</span><span class="token operator">-&gt;</span><span class="token function">embeds</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column_name&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$form</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token variable">$form</span><span class="token operator">-&gt;</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;key1&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$form</span><span class="token operator">-&gt;</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;key2&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$form</span><span class="token operator">-&gt;</span><span class="token function">datetime</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;key3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$form</span><span class="token operator">-&gt;</span><span class="token function">dateRange</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;key4&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;key5&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;scope&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">rules</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;required&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">saving</span><span class="token punctuation">(</span><span class="token function">funtion</span> <span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Converted to json format for storage</span>
    <span class="token keyword">return</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Custom TITLE</span>
<span class="token variable">$form</span><span class="token operator">-&gt;</span><span class="token function">embeds</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column_name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Field TITLE&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$form</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The method calls for building form elements inside the callback function are the same as outside.</p><h2 id="one-dimensional-array-list" tabindex="-1"><a class="header-anchor" href="#one-dimensional-array-list" aria-hidden="true">#</a> one-dimensional array (list)</h2><p><img src="`+p+`" alt="" loading="lazy"></p><p>If your field is used to store a one-dimensional array of <code>[&quot;foo&quot;, &quot;Bar&quot;]</code> format, you can use the <code>list</code> component:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$form</span><span class="token operator">-&gt;</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column_name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Setting the validation rule</span>
<span class="token variable">$form</span><span class="token operator">-&gt;</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column_name&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">rules</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;required|min:5&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Set the maximum and minimum number of elements</span>
<span class="token variable">$form</span><span class="token operator">-&gt;</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column_name&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="two-dimensional-array-table" tabindex="-1"><a class="header-anchor" href="#two-dimensional-array-table" aria-hidden="true">#</a> Two-dimensional array (table)</h2><p><img src="`+c+`" alt="" loading="lazy"></p><p>If a field stores a two-dimensional array in <code>json</code> format, the <code>table</code> form component can be used for fast editing:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$form</span><span class="token operator">-&gt;</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column_name&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$table</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;key&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">textarea</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;desc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">saving</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This component is similar to the <code>hasMany</code> component, but is used to handle the case of a single field, for simple two-dimensional data.</p><h2 id="two-dimensional-arrays-array" tabindex="-1"><a class="header-anchor" href="#two-dimensional-arrays-array" aria-hidden="true">#</a> Two-dimensional arrays (array)</h2><p><img src="`+i+`" alt="" loading="lazy"></p><p>If a field stores a two-dimensional array in <code>json</code> format, and there are more fields, you can use the <code>array</code> form component for fast editing:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$form</span><span class="token operator">-&gt;</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column_name&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$table</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;key&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">textarea</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;desc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">saveAsJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27),r=[u];function d(k,m){return s(),a("div",null,r)}const b=n(l,[["render",d],["__file","model-json.html.vue"]]);export{b as default};
