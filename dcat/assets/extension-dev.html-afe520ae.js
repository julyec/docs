import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as l,c as r,b as s,d as n,e as a,w as t,a as o}from"./app-98225aba.js";const d="/dcat/assets/zRBcsCFn88-2e54edaf.png",u="/dcat/assets/ikrmZD1DWm-c4e9871f.png",k={},m=o('<h1 id="developing-extensions" tabindex="-1"><a class="header-anchor" href="#developing-extensions" aria-hidden="true">#</a> Developing extensions</h1><p><code>Dcat Admin</code> supports the installation of extensions to help enrich your backend functionality.</p><blockquote><p>It should be noted that the original extensions for <code>Laravel Admin</code> cannot be used directly in <code>Dcat Admin</code>, but most of them can be used with a few minor tweaks and can be migrated.</p></blockquote><p>If you want to add your own features or components to <code>Dcat Admin</code>, you can make a <code>Dcat Admin</code> extension to help other users of <code>Dcat Admin</code>, and improve the quality of the extension in the feedback from others.</p>',4),g={href:"https://github.com/dcat-admin/operation-log",target:"_blank",rel:"noopener noreferrer"},v=o(`<h1 id="before-you-start" tabindex="-1"><a class="header-anchor" href="#before-you-start" aria-hidden="true">#</a> Before you start</h1><p>Before you start developing extensions, if you are in a <code>linux</code> environment, please create a <code>dcat-admin-extensions</code> directory in the project root directory manually and set readable <strong>writeable</strong> permissions, the extensions will be installed in the <code>dcat-admin-extensions</code> directory.</p><ol><li><code>ProjectDirectory/dcat-admin-extensions</code> extension installation directory, which can be changed according to the configuration parameter <code>admin.extensions.dir</code></li><li><code>public/vendor</code> extends the static resource distribution directory</li><li><code>resources/lang</code> language package directory</li></ol><h2 id="_1-create-extensions" tabindex="-1"><a class="header-anchor" href="#_1-create-extensions" aria-hidden="true">#</a> 1. Create extensions</h2><p>The <code>Dcat Admin</code> extension is a standard <code>composer</code> extension package that can be installed via <code>composer</code> or directly via the system&#39;s internal <code>local installation</code> feature. We can create a new extension by command or by interface.</p><ol><li>Create extensions by command</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan admin:ext-make ExtensionPackageName <span class="token parameter variable">--namespace</span><span class="token operator">=</span>namespace <span class="token parameter variable">--theme</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Command parameter description</p><ul><li><code>name</code> extension package name, the extension name is a standard <code>composer</code> package name, please uniformly use ** lowercase letters** + ** centerline (-)** style naming, standard format such as <code>dcat-admin/operation-log</code>, the first part can be a personal name, the second part can be to the extension package General words for the function</li><li><code>--namespace=</code> Extended package namespace, automatically generated by default according to the package name, e.g. your package name is <code>jiangqh/operation-log</code>, then the default namespace is <code>Jiangqh/OperationLog</code>.</li><li><code>--theme</code> whether it is a theme extension or not</li></ul><p>So in the current example we run the command to generate the extensions</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment"># \`--namespace\`</span>
php artisan admin<span class="token punctuation">:</span>ext<span class="token operator">-</span>make dcat<span class="token operator">-</span>admin<span class="token operator">/</span>operation<span class="token operator">-</span>log <span class="token operator">--</span><span class="token keyword">namespace</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;Dcat\\Admin\\OperationLog&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Create extensions from the administration page</li></ol><p>Open the extension management page <code>http://localhost/admin/auth/extensions</code>, then click on the table below the first line of the ** quickly create **, and then enter the extension package name and namespace can be, in the actual development is also more recommended to use the interface to create extensions, so more convenient!</p><p>After the extension is created, you can see an additional directory <code>dcat-admin/extensions/dcat-admin/operation-log</code> in the extension folder:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>├── <span class="token constant">README</span><span class="token operator">.</span>md
├── composer<span class="token operator">.</span>json <span class="token comment"># composer configuration file</span>
├── version<span class="token operator">.</span>php   <span class="token comment"># Extension Package Version Management Document</span>
├── logo<span class="token operator">.</span>png      <span class="token comment"># logo</span>
├── updates       <span class="token comment"># Table migration files for each version of the extension package</span>
├── resources 
│   ├── lang    <span class="token comment"># language pack</span>
│   ├── assets  <span class="token comment"># static resource</span>
│   │   ├── css
│   │   │   └── index<span class="token operator">.</span>css <span class="token comment"># css sample file</span>
│   │   └── js
│   │       └── index<span class="token operator">.</span>js  <span class="token comment"># js sample file</span>
│   └── views
│       └── index<span class="token operator">.</span>blade<span class="token operator">.</span>php <span class="token comment"># View sample file</span>
└── src
    ├── OperationLogServiceProvider<span class="token operator">.</span>php <span class="token comment"># Extension package service provider</span>
    ├── Setting<span class="token operator">.</span>php  <span class="token comment"># Extension Settings Form</span>
    ├── Models  <span class="token comment"># Model Directory</span>
    └── Http
        ├── routes<span class="token operator">.</span>php  <span class="token comment"># Extension Routing File</span>
        ├── Middleware  <span class="token comment"># Extensions Middleware Directory</span>
        └── Controllers <span class="token comment"># Extensions Controller Directory</span>
            └── OperationLogController<span class="token operator">.</span>php
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then you can also set the extension&#39;s <code>logo</code> and the extension name, which will be displayed on the extension management page after you set it, making your extension more memorable!</p><h3 id="extension-logo" tabindex="-1"><a class="header-anchor" href="#extension-logo" aria-hidden="true">#</a> Extension logo</h3><p>The extension <code>logo</code> must be placed in the extension&#39;s root directory, and the file name must be <code>logo.png</code>, with a recommended size of <code>100x100</code>.</p><h3 id="extension-name" tabindex="-1"><a class="header-anchor" href="#extension-name" aria-hidden="true">#</a> Extension name</h3><p>The extension name needs to be modified with the <code>alias</code> parameter in <code>composer.json</code>, if not set then the package name is displayed by default</p><h2 id="_2-enable-extensions" tabindex="-1"><a class="header-anchor" href="#_2-enable-extensions" aria-hidden="true">#</a> 2. Enable extensions</h2><p>Once the extension has been created, you can see the newly created extension on the admin page <code>http://localhost/admin/auth/extensions</code> as follows</p><p><img src="`+d+`" alt="" loading="lazy"></p><p>Then we click on the <code>Update to version 1.0.0</code> and <code>Enable</code> buttons for the extension to make this extension work. The newly created extension will generate a default controller, in this example we can try to access <code>http://localhost:8000/admin/operation-log</code>, if it works then the extension is enabled for success.</p><h2 id="_3-functional-development" tabindex="-1"><a class="header-anchor" href="#_3-functional-development" aria-hidden="true">#</a> 3. Functional development</h2><p>The main function of this extension is to record the user&#39;s operation records, and then provide a page to view the records, and then we can create the default extension file to clean up the unused, clean up the directory structure as follows</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>├── <span class="token constant">README</span><span class="token operator">.</span>md
├── composer<span class="token operator">.</span>json <span class="token comment"># composer configuration file</span>
├── version<span class="token operator">.</span>php   <span class="token comment"># Extension Package Version Management Document</span>
├── logo<span class="token operator">.</span>png      <span class="token comment"># logo</span>
├── updates       <span class="token comment"># Table migration files for each version of the extension package</span>
├── resources 
│   └── lang  <span class="token comment"># language pack</span>
└── src
    ├── OperationLogServiceProvider<span class="token operator">.</span>php <span class="token comment"># Extension package service provider</span>
    ├── Setting<span class="token operator">.</span>php  <span class="token comment"># Extension Settings Form</span>
    ├── Models  <span class="token comment"># Model Directory</span>
    └── Http
        ├── routes<span class="token operator">.</span>php  <span class="token comment"># Extension Routing File</span>
        ├── Middleware  <span class="token comment"># Extensions Middleware Directory</span>
        └── Controllers <span class="token comment"># Extensions Controller Directory</span>
            └── OperationLogController<span class="token operator">.</span>php
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now let&#39;s get down to the business of feature development.</p><h3 id="create-migration-file-migration" tabindex="-1"><a class="header-anchor" href="#create-migration-file-migration" aria-hidden="true">#</a> Create migration file (migration)</h3><p>First we need to create a table migration file, run the command <code>php artisan make:migration CreateOperationLogTable</code>, and then write the contents of the file as follows</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Migrations<span class="token punctuation">\\</span>Migration</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Schema<span class="token punctuation">\\</span>Blueprint</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Schema</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">CreateOperationLogTable</span> <span class="token keyword">extends</span> <span class="token class-name">Migration</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Here you can specify your database connection</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;database.connection&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span><span class="token punctuation">:</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;database.default&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token class-name static-context">Schema</span><span class="token operator">::</span><span class="token function">hasTable</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;admin_operation_log&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name static-context">Schema</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;admin_operation_log&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Blueprint</span> <span class="token variable">$table</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">bigIncrements</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">unsigned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">bigInteger</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;user_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;method&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;ip&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;input&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;user_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">timestamps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name static-context">Schema</span><span class="token operator">::</span><span class="token function">dropIfExists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;admin_operation_log&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then move the file to the <code>updates</code> directory and rename it to <code>create_opration_log_table.php</code>. Finally, we need to modify the \`\`version.php\` extension&#39;s version management file to include the name of the migration file:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;1.0.0&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;Version Change Description 1&#39;</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;Version Change Description 2&#39;</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;create_opration_log_table.php&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Migrate file names and automatically run when installing or updating versions.</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,33),h=s("h3",{id:"models-controllers-and-routing",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#models-controllers-and-routing","aria-hidden":"true"},"#"),n(" Models, Controllers, and Routing")],-1),b=s("code",null,"extended directory /src/Models/OperationLog",-1),f={href:"https://github.com/dcat-admin/operation-log/blob/master/src/Models/",target:"_blank",rel:"noopener noreferrer"},x=s("code",null,"extension directory /src/Http/Controllers/OperationLogController.php",-1),y={href:"https://github.com/dcat-admin/",target:"_blank",rel:"noopener noreferrer"},w=o(`<p>Finally, our routing file needs to be modified so that your route does not conflict with other routes as much as possible.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Dcat<span class="token punctuation">\\</span>Admin<span class="token punctuation">\\</span>OperationLog<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Controllers</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Route</span><span class="token punctuation">;</span>

<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;auth/operation-logs&#39;</span><span class="token punctuation">,</span> <span class="token class-name class-name-fully-qualified static-context">Controllers<span class="token punctuation">\\</span>OperationLogController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token operator">.</span><span class="token string single-quoted-string">&#39;@index&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;dcat-admin.operation-log.index&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;auth/operation-logs/{id}&#39;</span><span class="token punctuation">,</span> <span class="token class-name class-name-fully-qualified static-context">Controllers<span class="token punctuation">\\</span>OperationLogController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token operator">.</span><span class="token string single-quoted-string">&#39;@destroy&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;dcat-admin.operation-log.destroy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="language-packs" tabindex="-1"><a class="header-anchor" href="#language-packs" aria-hidden="true">#</a> Language packs</h3><p>In this example, we take <code>en</code> and <code>zh_CN</code> as examples, create <code>en/log.php</code> and <code>zh_CN/log.php</code> files in <code>extensions/resources/lang</code> directory, and write the following content</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// en</span>
<span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;title&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Operation Log&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;setting_title&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Operation Log&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// zh_CN</span>
<span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;title&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;操作日志&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;setting_title&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;操作日志&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Finally, the contents of the language pack can be accessed from the controller in the following way, for more information on multilingualism you can refer to the official lavel documentation</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Dcat<span class="token punctuation">\\</span>Admin<span class="token punctuation">\\</span>OperationLog<span class="token punctuation">\\</span>OperationLogServiceProvider</span><span class="token punctuation">;</span>

OperationLogServiceProvider<span class="token punctuation">:</span><span class="token function">trans</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;log.title&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
OperationLogServiceProvider<span class="token punctuation">:</span><span class="token function">trans</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;log.setting_title&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="define-menu" tabindex="-1"><a class="header-anchor" href="#define-menu" aria-hidden="true">#</a> Define menu</h3><p>Next we also need to generate a menu for our extension, open the <code>extensions directory /src/OperationLogServiceProvider.php</code> and change the content as follows</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">OperationLogServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceProvider</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 定义菜单</span>
    <span class="token keyword">protected</span> <span class="token variable">$menu</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;title&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Operation Log&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;uri&#39;</span>   <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;auth/operation-logs&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;icon&#39;</span>  <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Icon can be left blank.</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">settingForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Setting</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you want to register a menu with hierarchies, you can do so in the following way</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Registration Menu</span>
<span class="token keyword">protected</span> <span class="token variable">$menu</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;title&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Operation Log&#39;</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;uri&#39;</span>   <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;icon&#39;</span>  <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;feather icon-x&#39;</span><span class="token punctuation">,</span> 
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;parent&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Operation Log&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Specify parent menu</span>
        <span class="token string single-quoted-string">&#39;title&#39;</span>  <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;List&#39;</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;uri&#39;</span>    <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;auth/operation-logs&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="test-extensions" tabindex="-1"><a class="header-anchor" href="#test-extensions" aria-hidden="true">#</a> Test extensions</h3><p>After all the above steps are completed, we can start testing the above features to verify if there are any errors before proceeding with the subsequent development.</p><p>Since we already installed and enabled the extension when we first created it, here we have to <strong>uninstall</strong> the current extension and then update to <code>1.0.0</code> version again so that the data tables and menus will be created.</p><blockquote><p>{tip} The <strong>Uninstall</strong> function will delete the extension&#39;s data or data tables, so please be careful to avoid data loss!!!!</p></blockquote><p>Open the extension management page <code>http://域名/admin/auth/extensions</code>, find the current extension, mouse over the extension line, click the <code>Uninstall</code> button and confirm, then click the <code>Update to version 1.0.0</code> and <code>Enable</code> buttons again. Finally <code>F5</code> Refresh your browser to see the newly created menu, click on the menu to access the operation logs management page <code>admin/auth/operation-logs</code>.</p><h3 id="registration-middleware" tabindex="-1"><a class="header-anchor" href="#registration-middleware" aria-hidden="true">#</a> Registration middleware</h3><p>Now our extension also needs a middleware to record user actions, create the file in the Extension directory <code>/src/Http/Middleware/LogOperation.php</code> and click on [LogOperation.php](https://github.com/dcat-admin/ operation-log/blob/master/src/Http/Middleware/LogOperation.php) to see it.</p><p>Then we need to register the middleware to make it work, open the extensions directory <code>/src/OperationLogServiceProvider.php</code>, and modify the content as follows</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">OperationLogServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceProvider</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token variable">$middleware</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;middle&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span> <span class="token comment">// Registered Middleware</span>
            <span class="token class-name static-context">LogOperation</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token variable">$menu</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;title&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Operation Log&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;uri&#39;</span>   <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;auth/operation-logs&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">settingForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Setting</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The middleware registered in the <code>$middleware</code> attribute will be merged into the configuration parameter <code>admin.route.middleware</code>.</p><ol><li><code>before</code> The middleware will be the first to execute.</li><li><code>middle</code> The middleware executes <strong>between <code>admin.auth</code> (in login authentication) and <code>admin.permission</code> (permission determination) middleware</strong>.</li><li><code>after</code> The middleware will be executed at the end.</li></ol><p>In this example, it is clear that logging user actions in the operations log requires logging logged-in user information, so the middleware must be executed after the <code>admin.auth</code> middleware in order to get the logged-in user data. And permissionless operations also need to be logged, so they must be performed before the <code>admin.permission</code> middleware, so only middleware of the type <code>middle</code> must be registered to meet these requirements!</p><p>After registering the middleware, we feel free to visit other pages in the system (except for the operation log management page), and then visit the operation log management page, you can see the user&#39;s operation log, and here the plug-in is basically developed.</p><h3 id="configuration-parameters-settings" tabindex="-1"><a class="header-anchor" href="#configuration-parameters-settings" aria-hidden="true">#</a> Configuration parameters (settings)</h3><p>In the current example, we need to allow the user to configure some custom parameters (e.g. configure routes that don&#39;t require logging of operations), so we also need a \`\`configuration form&#39;&#39; that allows the user to configure the parameters directly from the page. We need to return this configuration form object in the <code>OperationLogServiceProvider</code> class as <code>settingForm</code>.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">OperationLogServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceProvider</span>
<span class="token punctuation">{</span>
    <span class="token operator">...</span>

    <span class="token comment">// Return the configuration form object, or delete the method if you don&#39;t need to save the configuration parameters.  </span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">settingForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Setting</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then we need to modify the configuration form class <code>extended directory /src/Setting.php</code> as follows</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">Dcat<span class="token punctuation">\\</span>Admin<span class="token punctuation">\\</span>OperationLog</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Dcat<span class="token punctuation">\\</span>Admin<span class="token punctuation">\\</span>Extend<span class="token punctuation">\\</span>Setting</span> <span class="token keyword">as</span> Form<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Dcat<span class="token punctuation">\\</span>Admin<span class="token punctuation">\\</span>OperationLog<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>OperationLog</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Dcat<span class="token punctuation">\\</span>Admin<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Helper</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Setting</span> <span class="token keyword">extends</span> <span class="token class-name">Form</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Return form popup TITLE</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">trans</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;log.title&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Formatting the values of configuration parameters to be saved</span>
    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">formatInput</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$input</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Convert to array, note that if it is an array when saved here, it will be an array when read out.</span>
        <span class="token variable">$input</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;except&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name static-context">Helper</span><span class="token operator">::</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;except&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$input</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;allowed_methods&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name static-context">Helper</span><span class="token operator">::</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;allowed_methods&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token variable">$input</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">form</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Defining Form Fields</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">tags</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;except&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">multipleSelect</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;allowed_methods&#39;</span><span class="token punctuation">)</span>
            <span class="token operator">-&gt;</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token function">array_combine</span><span class="token punctuation">(</span><span class="token class-name static-context">OperationLog</span><span class="token operator">::</span><span class="token variable">$methods</span><span class="token punctuation">,</span> <span class="token class-name static-context">OperationLog</span><span class="token operator">::</span><span class="token variable">$methods</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">tags</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;secret_fields&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After the above settings are completed, we can save the custom parameters in the extension management page</p><p><img src="`+u+`" alt="" loading="lazy"></p><p>The configuration parameters can be read as follows, and can be used in the middleware <code>LogOperation</code></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Dcat<span class="token punctuation">\\</span>Admin<span class="token punctuation">\\</span>OperationLog<span class="token punctuation">\\</span>OperationLogServiceProvider</span><span class="token punctuation">;</span>

<span class="token comment">// 读取配置参数</span>
<span class="token variable">$except</span> <span class="token operator">=</span> <span class="token class-name static-context">OperationLogServiceProvider</span><span class="token operator">::</span><span class="token function">setting</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;except&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$allowedMethods</span> <span class="token operator">=</span> <span class="token class-name static-context">OperationLogServiceProvider</span><span class="token operator">::</span><span class="token function">setting</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;allowed_methods&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$secretFields</span> <span class="token operator">=</span> <span class="token class-name static-context">OperationLogServiceProvider</span><span class="token operator">::</span><span class="token function">setting</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;secret_fields&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="service-registration-and-initialization" tabindex="-1"><a class="header-anchor" href="#service-registration-and-initialization" aria-hidden="true">#</a> Service registration and initialization</h3>`,35),q=s("h3",{id:"view-view",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#view-view","aria-hidden":"true"},"#"),n(" View (view)")],-1),_=s("h3",{id:"static-resources",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#static-resources","aria-hidden":"true"},"#"),n(" Static resources")],-1),L=o(`<h3 id="modify-composer-json-readme-md" tabindex="-1"><a class="header-anchor" href="#modify-composer-json-readme-md" aria-hidden="true">#</a> Modify composer.json &amp; README.md</h3><p>After the code is complete, you need to modify the contents of <code>composer.json</code>, replace <code>description</code>, <code>keywords</code>, <code>license</code>, <code>authors</code> with your own information, and don&#39;t forget to complete <code>README.md</code> to supplement the documentation and other related information.</p><h3 id="release-extensions" tabindex="-1"><a class="header-anchor" href="#release-extensions" aria-hidden="true">#</a> Release extensions</h3><h4 id="upload-application-marketplace" tabindex="-1"><a class="header-anchor" href="#upload-application-marketplace" aria-hidden="true">#</a> Upload Application Marketplace</h4><p>Developers can publish extensions to the Marketplace, and then users can install them directly from the App Store.</p><h4 id="upload-to-github" tabindex="-1"><a class="header-anchor" href="#upload-to-github" aria-hidden="true">#</a> Upload to Github</h4><p>Log in to your Github, create a repository, and then follow the instructions on the page to push your code up.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git init
git remote add origin https://github.com/&lt;your-name&gt;/&lt;your-repository&gt;.git
git add .
git commit -am &quot;Initial commit.&quot;
git push origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="posted-to-packagist-org" tabindex="-1"><a class="header-anchor" href="#posted-to-packagist-org" aria-hidden="true">#</a> Posted to Packagist.org</h4><p>Next is to publish your project to <code>Packagist.org</code>, if you don&#39;t have an account, register one, then open <code>Submit</code> in the top navigation, fill in the repository address and submit it.</p><p>By default, <code>Packagist.org</code> is not automatically updated when you push new code, so you need to create a GitHub service hook. You can also update it manually by clicking the <code>Update</code> button on the page, but I recommend doing this automatically!</p><p>After committing, due to the delay in synchronization time, you may not be able to find your project when installing with <code>composer</code>, you may need to wait for the synchronization to complete.</p><p>Once the release is complete, you can install your extension via <code>composer</code>!</p>`,13);function O(S,D){const i=p("ExternalLinkIcon"),e=p("RouterLink");return l(),r("div",null,[m,s("p",null,[n("In this document, we will take developing an "),s("a",g,[n("Operation Log Extension"),a(i)]),n(" as an example to teach you how to develop an extension step by step, and distribute it to others to use. dcat-admin/operation-log).")]),v,s("p",null,[n("For a more detailed description of versioning for extensions, go to the "),a(e,{to:"/guide/extension-f.html#version"},{default:t(()=>[n("Extensions - Versioning")]),_:1}),n(" section.")]),h,s("p",null,[n("Create the model file "),b,n(" and click on "),s("a",f,[n("OperationLog.php"),a(i)]),n(" for the model contents. OperationLog.php) view.")]),s("p",null,[n("Then modify our controller "),x,n(" by clicking on "),s("a",y,[n("LogController.php"),a(i)]),n(". operation-log/blob/master/src/Http/Controllers/LogController.php) view.")]),w,s("p",null,[n("Since the current example does not use the service registration and initialization related functions, so this part of the content is skipped, students who need related information can refer to "),a(e,{to:"/guide/extension-f.html#service"},{default:t(()=>[n("extension-f.md#service")]),_:1}),n(" chapter.")]),q,s("p",null,[n("Since the current example does not use the function of custom static resources, so this part of the content is skipped first, students with related needs can refer to the "),a(e,{to:"/guide/extension-f.html#view"},{default:t(()=>[n("extension - view")]),_:1}),n(" chapter.")]),_,s("p",null,[n("Since there is no custom static resource in this example, we will skip this part first, if you need it, you can refer to "),a(e,{to:"/guide/extension-f.html#assets"},{default:t(()=>[n("extension - static resources")]),_:1}),n(".")]),L])}const $=c(k,[["render",O],["__file","extension-dev.html.vue"]]);export{$ as default};
