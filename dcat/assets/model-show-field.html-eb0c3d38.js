import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as e}from"./app-98225aba.js";const t={},p=e(`<h1 id="field-display" tabindex="-1"><a class="header-anchor" href="#field-display" aria-hidden="true">#</a> Field display</h1><h3 id="html" tabindex="-1"><a class="header-anchor" href="#html" aria-hidden="true">#</a> HTML</h3><p>The <code>html</code> method allows you to insert a piece of <code>HTML</code> code without displaying <code>label</code> on the details page</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// pass in string</span>
<span class="token variable">$show</span><span class="token operator">-&gt;</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;&lt;br/&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// pass in view</span>
<span class="token variable">$show</span><span class="token operator">-&gt;</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token function">view</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// incoming closures</span>
<span class="token variable">$show</span><span class="token operator">-&gt;</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// Get field information</span>
	<span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">;</span>
	<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">username</span><span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;id&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$id</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dividers" tabindex="-1"><a class="header-anchor" href="#dividers" aria-hidden="true">#</a> Dividers</h3><p>If a separator line is to be added between fields.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$show</span><span class="token operator">-&gt;</span><span class="token function">divider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="line-feed" tabindex="-1"><a class="header-anchor" href="#line-feed" aria-hidden="true">#</a> Line feed</h3><p>If you want to use line feeds between fields.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$show</span><span class="token operator">-&gt;</span><span class="token function">newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="modify-display-content" tabindex="-1"><a class="header-anchor" href="#modify-display-content" aria-hidden="true">#</a> Modify display content</h3><p>Modify the display using the following methods</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$show</span><span class="token operator">-&gt;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$title</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Get other fields of the current row</span>
    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">username</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token string double-quoted-string">&quot;&lt;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$title</span><span class="token punctuation">}</span></span>&gt; <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$username</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$show</span><span class="token operator">-&gt;</span><span class="token function">contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string double-quoted-string">&quot;&lt;pre&gt;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$content</span><span class="token punctuation">}</span></span>&lt;/pre&gt;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ways-to-help" tabindex="-1"><a class="header-anchor" href="#ways-to-help" aria-hidden="true">#</a> Ways to help</h3><p>The help method is used in the same way as the data form field help method, see [Help Method] (model-grid-column.md#help).</p><h3 id="built-in-display-extension-methods" tabindex="-1"><a class="header-anchor" href="#built-in-display-extension-methods" aria-hidden="true">#</a> Built-in Display Extension Methods</h3><p>Here are a few common display styles that are built in as methods:</p><h4 id="view" tabindex="-1"><a class="header-anchor" href="#view" aria-hidden="true">#</a> view</h4><p>The <code>view</code> method can introduce a view file.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// The following three variables are received in the template:</span>
<span class="token comment">// name field name</span>
<span class="token comment">// value field value</span>
<span class="token comment">// model Current row data</span>
<span class="token variable">$show</span><span class="token operator">-&gt;</span><span class="token property">content</span><span class="token operator">-&gt;</span><span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;admin.fields.content&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="explode" tabindex="-1"><a class="header-anchor" href="#explode" aria-hidden="true">#</a> explode</h4><p>The <code>explode</code> method splits the string into arrays.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$show</span><span class="token operator">-&gt;</span><span class="token property">tag</span><span class="token operator">-&gt;</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// You can specify delimiter, default &quot;,&quot;.</span>
<span class="token variable">$show</span><span class="token operator">-&gt;</span><span class="token property">tag</span><span class="token operator">-&gt;</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;|&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="prepend" tabindex="-1"><a class="header-anchor" href="#prepend" aria-hidden="true">#</a> prepend</h4><p>The <code>prepend</code> method is used to insert content in front of a value of type <code>string</code> or <code>array</code>.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// When the value of a field is a string</span>
<span class="token variable">$show</span><span class="token operator">-&gt;</span><span class="token property">email</span><span class="token operator">-&gt;</span><span class="token function">prepend</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;mailto:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// When the value of a field is an array</span>
<span class="token variable">$show</span><span class="token operator">-&gt;</span><span class="token property">arr</span><span class="token operator">-&gt;</span><span class="token function">prepend</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;first item&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>prepend</code> method allows passing parameters to closures</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$show</span><span class="token operator">-&gt;</span><span class="token property">email</span><span class="token operator">-&gt;</span><span class="token function">prepend</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token variable">$original</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// $value is the current field value</span>
    <span class="token comment">// $original is the original value of the current field as queried from the database.</span>
    
    <span class="token comment">// Get other field values</span>
    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">username</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token string double-quoted-string">&quot;[<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$username</span><span class="token punctuation">}</span></span>]&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="append" tabindex="-1"><a class="header-anchor" href="#append" aria-hidden="true">#</a> append</h4><p>The <code>append</code> method is used to insert content after a value of type <code>string</code> or <code>array</code>.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// When the value of a field is a string</span>
<span class="token variable">$show</span><span class="token operator">-&gt;</span><span class="token property">email</span><span class="token operator">-&gt;</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;@gmail.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// When the value of a field is an array</span>
<span class="token variable">$show</span><span class="token operator">-&gt;</span><span class="token property">arr</span><span class="token operator">-&gt;</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;last item&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>append</code> method allows passing parameters to closures</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$show</span><span class="token operator">-&gt;</span><span class="token property">email</span><span class="token operator">-&gt;</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token variable">$original</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// $value is the current field value</span>
    <span class="token comment">// $original is the original value of the current field as queried from the database.</span>
    
    <span class="token comment">// Get other field values</span>
    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">username</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token string double-quoted-string">&quot;[<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$username</span><span class="token punctuation">}</span></span>]&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="image" tabindex="-1"><a class="header-anchor" href="#image" aria-hidden="true">#</a> image</h4><p>The content of the field avatar is the path or url of the image, which can be displayed as the image.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$show</span><span class="token operator">-&gt;</span><span class="token function">avatar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The parameters of the image() method refer to Field::image().</p><h4 id="file" tabindex="-1"><a class="header-anchor" href="#file" aria-hidden="true">#</a> file</h4><p>The content of the field document is the path or url of a file, which can be displayed as a file.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$show</span><span class="token operator">-&gt;</span><span class="token function">avatar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The arguments of the file() method refer to Field::file().</p><h4 id="link" tabindex="-1"><a class="header-anchor" href="#link" aria-hidden="true">#</a> link</h4><p>The content of the field homepage is the url link, which can be displayed as an HTML link.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$show</span><span class="token operator">-&gt;</span><span class="token function">homepage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">link</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The arguments of the link() method refer to Field::link()</p><h4 id="label" tabindex="-1"><a class="header-anchor" href="#label" aria-hidden="true">#</a> label</h4><p>Display the contents of the field tag as label.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$show</span><span class="token operator">-&gt;</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The arguments of the label() method refer to Field::label().</p><h4 id="badge" tabindex="-1"><a class="header-anchor" href="#badge" aria-hidden="true">#</a> badge</h4><p>Display the contents of the field rate as badge.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$show</span><span class="token operator">-&gt;</span><span class="token function">rate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">badge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The arguments of the badge() method are referenced in Field::badge().</p><h4 id="using" tabindex="-1"><a class="header-anchor" href="#using" aria-hidden="true">#</a> using</h4><p>If the field gender takes the values <code>f</code> and <code>m</code>, it needs to be displayed as female and male respectively.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$show</span><span class="token operator">-&gt;</span><span class="token function">gender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">using</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;f&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;女&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;m&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;男&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="dot" tabindex="-1"><a class="header-anchor" href="#dot" aria-hidden="true">#</a> dot</h4><p>Column text can be preceded by a colored dot using the <code>dot</code> method.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Dcat<span class="token punctuation">\\</span>Admin<span class="token punctuation">\\</span>Admin</span><span class="token punctuation">;</span>

<span class="token variable">$show</span><span class="token operator">-&gt;</span><span class="token property">state</span>
	<span class="token operator">-&gt;</span><span class="token function">using</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Unprocessed&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Processed&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token operator">-&gt;</span><span class="token function">dot</span><span class="token punctuation">(</span>
		<span class="token punctuation">[</span>
			<span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;primary&#39;</span><span class="token punctuation">,</span>
			<span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;danger&#39;</span><span class="token punctuation">,</span>
			<span class="token number">3</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;success&#39;</span><span class="token punctuation">,</span>
			<span class="token number">4</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">Admin</span><span class="token operator">::</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span> 
	    <span class="token string single-quoted-string">&#39;primary&#39;</span> <span class="token comment">// The second parameter is the default value.</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="display-file-size" tabindex="-1"><a class="header-anchor" href="#display-file-size" aria-hidden="true">#</a> Display file size</h4><p>If the field data is a number of bytes representing the size of the file, you can display more readable text by calling the filezise method</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$show</span><span class="token operator">-&gt;</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;file_size&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">filesize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This value 199812019 will show 190.56 MB.</p>`,63),o=[p];function i(l,c){return s(),a("div",null,o)}const d=n(t,[["render",i],["__file","model-show-field.html.vue"]]);export{d as default};
