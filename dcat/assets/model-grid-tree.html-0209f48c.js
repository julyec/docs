const n=JSON.parse('{"key":"v-d56c6c9a","path":"/zh/guide/model-grid-tree.html","title":"树状表格","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"表结构和模型","slug":"表结构和模型","link":"#表结构和模型","children":[]},{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":3,"title":"orderable排序","slug":"orderable排序","link":"#orderable排序","children":[]},{"level":3,"title":"关于数据搜索","slug":"关于数据搜索","link":"#关于数据搜索","children":[]},{"level":3,"title":"与模型树功能的差别","slug":"与模型树功能的差别","link":"#与模型树功能的差别","children":[]}],"git":{"createdTime":1701780913000,"updatedTime":1701780913000,"contributors":[{"name":"Moments","email":"554676262@qq.com","commits":1}]},"readingTime":{"minutes":3.75,"words":1125},"filePathRelative":"zh/guide/model-grid-tree.md","localizedDate":"2023年12月5日","excerpt":"<h1> 树状表格</h1>\\n<p>树状表格支持分页和点击加载功能，特别适合用来展示数据量较大的多层级结构数据。</p>\\n<p></p>\\n<h3> 表结构和模型</h3>\\n<p>要使用树状表格，要遵守约定的表结构：</p>\\n<blockquote>\\n<p>{tip} 此表结构和模型可完全兼容 <code><a href=\\"/dcat/zh/guide/model-tree.html\\" target=\\"blank\\">模型树</a></code> 。</p>\\n</blockquote>\\n<div class=\\"language-sql line-numbers-mode\\" data-ext=\\"sql\\"><pre class=\\"language-sql\\"><code><span class=\\"token keyword\\">CREATE</span> <span class=\\"token keyword\\">TABLE</span> <span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>demo_categories<span class=\\"token punctuation\\">`</span></span> <span class=\\"token punctuation\\">(</span>\\n  <span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>id<span class=\\"token punctuation\\">`</span></span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">unsigned</span> <span class=\\"token operator\\">NOT</span> <span class=\\"token boolean\\">NULL</span> <span class=\\"token keyword\\">AUTO_INCREMENT</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>parent_id<span class=\\"token punctuation\\">`</span></span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">11</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">NOT</span> <span class=\\"token boolean\\">NULL</span> <span class=\\"token keyword\\">DEFAULT</span> <span class=\\"token string\\">\'0\'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>order<span class=\\"token punctuation\\">`</span></span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">11</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">NOT</span> <span class=\\"token boolean\\">NULL</span> <span class=\\"token keyword\\">DEFAULT</span> <span class=\\"token string\\">\'0\'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// order 字段不是必须的，不设置也可以</span>\\n  <span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>title<span class=\\"token punctuation\\">`</span></span> <span class=\\"token keyword\\">varchar</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">50</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">COLLATE</span> utf8_unicode_ci <span class=\\"token operator\\">NOT</span> <span class=\\"token boolean\\">NULL</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>created_at<span class=\\"token punctuation\\">`</span></span> <span class=\\"token keyword\\">timestamp</span> <span class=\\"token operator\\">NOT</span> <span class=\\"token boolean\\">NULL</span> <span class=\\"token keyword\\">DEFAULT</span> <span class=\\"token keyword\\">CURRENT_TIMESTAMP</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>updated_at<span class=\\"token punctuation\\">`</span></span> <span class=\\"token keyword\\">timestamp</span> <span class=\\"token operator\\">NOT</span> <span class=\\"token boolean\\">NULL</span> <span class=\\"token keyword\\">DEFAULT</span> <span class=\\"token keyword\\">CURRENT_TIMESTAMP</span> <span class=\\"token keyword\\">ON</span> <span class=\\"token keyword\\">UPDATE</span> <span class=\\"token keyword\\">CURRENT_TIMESTAMP</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token keyword\\">PRIMARY</span> <span class=\\"token keyword\\">KEY</span> <span class=\\"token punctuation\\">(</span><span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>id<span class=\\"token punctuation\\">`</span></span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">ENGINE</span><span class=\\"token operator\\">=</span><span class=\\"token keyword\\">InnoDB</span> <span class=\\"token keyword\\">DEFAULT</span> <span class=\\"token keyword\\">CHARSET</span><span class=\\"token operator\\">=</span>utf8 <span class=\\"token keyword\\">COLLATE</span><span class=\\"token operator\\">=</span>utf8_unicode_ci\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{n as data};
