const n=JSON.parse('{"key":"v-0803ddc8","path":"/zh/guide/model-tree.html","title":"模型树","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"表结构和模型","slug":"表结构和模型","link":"#表结构和模型","children":[]},{"level":2,"title":"使用方法","slug":"使用方法","link":"#使用方法","children":[{"level":3,"title":"修改模型查询条件","slug":"修改模型查询条件","link":"#修改模型查询条件","children":[]},{"level":3,"title":"限制最大层级数","slug":"限制最大层级数","link":"#限制最大层级数","children":[]}]},{"level":2,"title":"自定义行操作","slug":"自定义行操作","link":"#自定义行操作","children":[]},{"level":2,"title":"自定义工具栏按钮","slug":"自定义工具栏按钮","link":"#自定义工具栏按钮","children":[]}],"git":{"createdTime":1701780913000,"updatedTime":1701780913000,"contributors":[{"name":"Moments","email":"554676262@qq.com","commits":1}]},"readingTime":{"minutes":2.16,"words":648},"filePathRelative":"zh/guide/model-tree.md","localizedDate":"2023年12月5日","excerpt":"<h1> 模型树</h1>\\n<p>这个功能可以实现一个树状组件，可以用拖拽的方式实现数据的层级、排序等操作，下面是基本的用法。</p>\\n<p></p>\\n<h2> 表结构和模型</h2>\\n<p>要使用<code>model-tree</code>，要遵守约定的表结构：</p>\\n<blockquote>\\n<p>{tip} <code>parent_id</code>字段一定要默认为<code>0</code>！！！</p>\\n</blockquote>\\n<div class=\\"language-sql line-numbers-mode\\" data-ext=\\"sql\\"><pre class=\\"language-sql\\"><code><span class=\\"token keyword\\">CREATE</span> <span class=\\"token keyword\\">TABLE</span> <span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>demo_categories<span class=\\"token punctuation\\">`</span></span> <span class=\\"token punctuation\\">(</span>\\n  <span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>id<span class=\\"token punctuation\\">`</span></span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">unsigned</span> <span class=\\"token operator\\">NOT</span> <span class=\\"token boolean\\">NULL</span> <span class=\\"token keyword\\">AUTO_INCREMENT</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>parent_id<span class=\\"token punctuation\\">`</span></span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">11</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">NOT</span> <span class=\\"token boolean\\">NULL</span> <span class=\\"token keyword\\">DEFAULT</span> <span class=\\"token string\\">\'0\'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>order<span class=\\"token punctuation\\">`</span></span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">11</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">NOT</span> <span class=\\"token boolean\\">NULL</span> <span class=\\"token keyword\\">DEFAULT</span> <span class=\\"token string\\">\'0\'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>title<span class=\\"token punctuation\\">`</span></span> <span class=\\"token keyword\\">varchar</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">50</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">COLLATE</span> utf8_unicode_ci <span class=\\"token operator\\">NOT</span> <span class=\\"token boolean\\">NULL</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>created_at<span class=\\"token punctuation\\">`</span></span> <span class=\\"token keyword\\">timestamp</span> <span class=\\"token operator\\">NOT</span> <span class=\\"token boolean\\">NULL</span> <span class=\\"token keyword\\">DEFAULT</span> <span class=\\"token keyword\\">CURRENT_TIMESTAMP</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>updated_at<span class=\\"token punctuation\\">`</span></span> <span class=\\"token keyword\\">timestamp</span> <span class=\\"token operator\\">NOT</span> <span class=\\"token boolean\\">NULL</span> <span class=\\"token keyword\\">DEFAULT</span> <span class=\\"token keyword\\">CURRENT_TIMESTAMP</span> <span class=\\"token keyword\\">ON</span> <span class=\\"token keyword\\">UPDATE</span> <span class=\\"token keyword\\">CURRENT_TIMESTAMP</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token keyword\\">PRIMARY</span> <span class=\\"token keyword\\">KEY</span> <span class=\\"token punctuation\\">(</span><span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>id<span class=\\"token punctuation\\">`</span></span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">ENGINE</span><span class=\\"token operator\\">=</span><span class=\\"token keyword\\">InnoDB</span> <span class=\\"token keyword\\">DEFAULT</span> <span class=\\"token keyword\\">CHARSET</span><span class=\\"token operator\\">=</span>utf8 <span class=\\"token keyword\\">COLLATE</span><span class=\\"token operator\\">=</span>utf8_unicode_ci\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{n as data};
