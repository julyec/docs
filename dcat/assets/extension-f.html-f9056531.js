import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as r,c as l,a as n,b as e,d as s,w as d,e as i}from"./app-c17653d8.js";const p={},u=i(`<h1 id="extension-of-basic-use" tabindex="-1"><a class="header-anchor" href="#extension-of-basic-use" aria-hidden="true">#</a> Extension of basic use</h1><h2 id="basic-use" tabindex="-1"><a class="header-anchor" href="#basic-use" aria-hidden="true">#</a> Basic use</h2><h3 id="set-the-read-and-write-permissions-for-extension-related-directories" tabindex="-1"><a class="header-anchor" href="#set-the-read-and-write-permissions-for-extension-related-directories" aria-hidden="true">#</a> Set the read and write permissions for extension-related directories</h3><p>Before using the extension function, you need to ensure that the user has the read and write permissions of the extension related directories, otherwise it may cause the extension installation to fail, please ensure that you have the read and write permissions of the following directories</p><ol><li><code>ProjectDirectory/dcat-admin-extensions</code> extension installation directory, which can be changed according to the configuration parameter <code>admin.extensions.dir</code></li><li><code>public/vendor</code> extends the static resource distribution directory</li><li><code>resources/lang</code> language package directory</li></ol><h3 id="extension-installation" tabindex="-1"><a class="header-anchor" href="#extension-installation" aria-hidden="true">#</a> Extension installation</h3><p>The extensions in <code>Dcat Admin</code> support the following three installation methods, and after installing success, you can see the related extension information in <code>admin/auth/extensions</code> extension management page.</p><h4 id="_1-install-via-the-app-market" tabindex="-1"><a class="header-anchor" href="#_1-install-via-the-app-market" aria-hidden="true">#</a> 1. Install via the App Market</h4><p>Stay tuned...</p><h4 id="_2-local-installation" tabindex="-1"><a class="header-anchor" href="#_2-local-installation" aria-hidden="true">#</a> 2. Local installation</h4><p>Download the extended <code>zip</code> archive, note that it must be <code>zip</code> format, and then open the extensions management page <code>admin/auth/extensions</code>, and then click the form toolbar <code>local installation</code> button to upload and submit.</p><h4 id="_3-composer-installation" tabindex="-1"><a class="header-anchor" href="#_3-composer-installation" aria-hidden="true">#</a> 3.composer installation</h4><p>Install directly with composer according to the instructions provided in the extended developer documentation.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">composer</span> require <span class="token punctuation">{</span>extension name<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="enable-extensions" tabindex="-1"><a class="header-anchor" href="#enable-extensions" aria-hidden="true">#</a> enable extensions</h4><p>After installation, you need to click <code>Update to xxx version</code> and update the <code>Enable</code> button on the extensions management page before you can use it normally.</p><h2 id="developing-extensions" tabindex="-1"><a class="header-anchor" href="#developing-extensions" aria-hidden="true">#</a> Developing extensions</h2>`,17),h=n("h3",{id:"service-registration-and-initialization",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#service-registration-and-initialization","aria-hidden":"true"},"#"),e(" Service registration and initialization")],-1),m={href:"https://learnku.com/docs/laravel/8.x/providers/9362",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"ServiceProvider",-1),g={href:"https://learnku.com/docs/laravel/8.x/providers/9362",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"ServiceProvider",-1),b=n("code",null,"boot",-1),x=n("code",null,"boot",-1),f=n("code",null,"init",-1),y=i(`<h3 id="version-management" tabindex="-1"><a class="header-anchor" href="#version-management" aria-hidden="true">#</a> Version management</h3><p>Each extension has a <code>version.php</code> file, through this file you can achieve the version management function, every time we release a new version we just need to add a new version number and the relevant description to this file</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token comment">// key It&#39;s the version number, be careful not to prefix it with v!</span>
    <span class="token string single-quoted-string">&#39;1.0.0&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;Version description information, can have multiple&#39;</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;Description 2...&#39;</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;create_operation_log.php&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Version migration file, can have multiple</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    
    <span class="token string single-quoted-string">&#39;1.0.1&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;Version description information, can have multiple&#39;</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;update_operation_log.php&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Version migration files</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    
    <span class="token operator">...</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="upgrades" tabindex="-1"><a class="header-anchor" href="#upgrades" aria-hidden="true">#</a> Upgrades</h4><p>After installing the new version of the code, you can click the update button on the extension management page <code>admin/auth/extensions</code> to upgrade.</p><p>Clicking update will run the migration file if there is a migration file, recreate the menu if there is a menu, and republish the resource file if there is a static resource.</p><h4 id="rollback-version" tabindex="-1"><a class="header-anchor" href="#rollback-version" aria-hidden="true">#</a> Rollback version</h4><p>You can roll back to the specified version by commanding <code>php artisan admin:ext-rollback {extension name} {version number}</code>, but be aware that rolling back extensions will delete data and may result in data loss, so please be careful!!!!</p><h4 id="uninstallation" tabindex="-1"><a class="header-anchor" href="#uninstallation" aria-hidden="true">#</a> Uninstallation</h4><p>If your extension is already installed, you can uninstall the extension through the extension page <code>admin/auth/extensions</code>, but be aware that uninstalling the extension will delete data and may result in data loss, please be careful!</p><p>If you want to remove the extensions completely, just delete the extensions folder in the <code>dcat-admin-extensions</code> directory.</p><h3 id="view" tabindex="-1"><a class="header-anchor" href="#view" aria-hidden="true">#</a> View</h3><p>The default directory for the view is <code>extensions/resources/view</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>├── resources 
│   ├── <span class="token punctuation">..</span>.
│   └── views <span class="token comment"># 视图目录</span>
│       └── index.blade.php <span class="token comment"># 视图示例文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As soon as you put the view file in the above directory, the system will automatically register an alias to the view directory, which is the same as the extension name. Suppose your extension package name is <code>dcat-admin/form-step</code>, then you can load the view in the following way</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;dcat-admin.form-step::index&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="static-resources" tabindex="-1"><a class="header-anchor" href="#static-resources" aria-hidden="true">#</a> Static resources</h3><p>Assuming your extension package name is <code>dcat-admin/form-step</code>, you can register aliases for your static resources via the <code>$js</code> and <code>$css</code> attributes on <code>FormStepServiceProvider</code> if your extension contains static resources as follows</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>└── resources 
    └─── assets
      ├── css
      │   └── index<span class="token operator">.</span>css
      └── js
          └── index<span class="token operator">.</span>js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">FormStepServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceProvider</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token variable">$js</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;js/index.js&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token variable">$css</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;css/index.css&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then you can load the static resource by doing the following</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Dcat<span class="token punctuation">\\</span>Admin<span class="token punctuation">\\</span>Admin</span><span class="token punctuation">;</span>

<span class="token comment">// Use your package name directly to bring in the static resources of the extensions!</span>
<span class="token class-name static-context">Admin</span><span class="token operator">::</span><span class="token function">requireAssets</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;@dcat-admin.form-step&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Of course, you can also load static resources without registering aliases via the <code>$js</code> and <code>$css</code> attributes, but you can also load them directly using the following method, with the same effect</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// The above is equivalent to</span>
<span class="token class-name static-context">Admin</span><span class="token operator">::</span><span class="token function">js</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;@dcat-admin.form-step/js/index.js&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name static-context">Admin</span><span class="token operator">::</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;@dcat-admin.form-step/css/index.css&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24);function w(_,q){const o=t("RouterLink"),a=t("ExternalLinkIcon");return r(),l("div",null,[u,n("p",null,[e("For a detailed tutorial, please refer to the "),s(o,{to:"/guide/extension-dev.html"},{default:d(()=>[e("Development Extensions")]),_:1}),e(" chapter.")]),h,n("blockquote",null,[n("p",null,[e("{tip} If you're not familiar with the concept of a service provider, head over to "),n("a",m,[e("Laravel Documentation - Service Providers"),s(a)]),e(" to learn it first.")])]),n("p",null,[e("The extended "),v,e(" class is actually a "),n("a",g,[e("service provider"),s(a)]),e(", the only difference is that the extended "),k,e(" can't override "),b,e("! method, you need to replace the "),x,e(" method with "),f,e(".")]),y])}const A=c(p,[["render",w],["__file","extension-f.html.vue"]]);export{A as default};
