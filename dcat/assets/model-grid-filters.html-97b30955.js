import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as i,a as s,b as n,d as t,w as u,e as a}from"./app-c17653d8.js";const r="/dcat/assets/3g9EdvZTQA-4a946b59.png",d="/dcat/assets/vkPFs0Hnil-1e159f04.png",k={},v=a(`<h1 id="query-filter" tabindex="-1"><a class="header-anchor" href="#query-filter" aria-hidden="true">#</a> Query filter</h1><p><code>model-grid</code> provides a number of methods to implement query filtering of table data:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// prohibit the use of sth.</span>
<span class="token variable">$grid</span><span class="token operator">-&gt;</span><span class="token function">disableFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// show</span>
<span class="token variable">$grid</span><span class="token operator">-&gt;</span><span class="token function">showFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Disable filter button</span>
<span class="token variable">$grid</span><span class="token operator">-&gt;</span><span class="token function">disableFilterButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Display filter button</span>
<span class="token variable">$grid</span><span class="token operator">-&gt;</span><span class="token function">showFilterButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$grid</span><span class="token operator">-&gt;</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$filter</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// Expand Filter</span>
    <span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">expand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Add a field filter here</span>
    <span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;产品序列号&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">...</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="filter-layout" tabindex="-1"><a class="header-anchor" href="#filter-layout" aria-hidden="true">#</a> Filter layout</h2><p>The default layout is <code>rightSide</code>.</p><h3 id="rightside" tabindex="-1"><a class="header-anchor" href="#rightside" aria-hidden="true">#</a> rightSide</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Dcat<span class="token punctuation">\\</span>Admin<span class="token punctuation">\\</span>Grid</span><span class="token punctuation">;</span>

<span class="token variable">$grid</span><span class="token operator">-&gt;</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name class-name-fully-qualified type-declaration">Grid<span class="token punctuation">\\</span>Filter</span> <span class="token variable">$filter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Change to rightSide Layout</span>
    <span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">rightSide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>result</p><p><img src="`+r+`" alt="" loading="lazy"></p><h3 id="panel" tabindex="-1"><a class="header-anchor" href="#panel" aria-hidden="true">#</a> panel</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Dcat<span class="token punctuation">\\</span>Admin<span class="token punctuation">\\</span>Grid</span><span class="token punctuation">;</span>

<span class="token variable">$grid</span><span class="token operator">-&gt;</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name class-name-fully-qualified type-declaration">Grid<span class="token punctuation">\\</span>Filter</span> <span class="token variable">$filter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Change to panel layout</span>
    <span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">panel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Note that you need to readjust the width of the form fields when switching to panel layout.</span>
    <span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>result</p><p><img src="`+d+`" alt="" loading="lazy"></p><h3 id="custom-layout-view" tabindex="-1"><a class="header-anchor" href="#custom-layout-view" aria-hidden="true">#</a> Custom layout (view)</h3><p>If the above layout does not meet your needs, you can customize the filter template using the <code>view</code> method</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$grid</span><span class="token operator">-&gt;</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$filter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;xxx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="query-type" tabindex="-1"><a class="header-anchor" href="#query-type" aria-hidden="true">#</a> Query type</h2><p>The following filter types are currently supported:</p><h3 id="equal" tabindex="-1"><a class="header-anchor" href="#equal" aria-hidden="true">#</a> equal</h3><p><code>sql: ... WHERE </code>column<code> = &quot;$input&quot;</code>：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">,</span> <span class="token variable">$label</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="notequal" tabindex="-1"><a class="header-anchor" href="#notequal" aria-hidden="true">#</a> notEqual</h3><p><code>sql: ... WHERE </code>column<code> != &quot;$input&quot;</code>：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">notEqual</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">,</span> <span class="token variable">$label</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="like" tabindex="-1"><a class="header-anchor" href="#like" aria-hidden="true">#</a> like</h3><p><code>sql: ... WHERE </code>column<code> LIKE &quot;%$input%&quot;</code>：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">,</span> <span class="token variable">$label</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="ilike" tabindex="-1"><a class="header-anchor" href="#ilike" aria-hidden="true">#</a> ilike</h3><p><code>sql: ... WHERE </code>column<code> ILIKE &quot;%$input%&quot;</code>：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">ilike</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">,</span> <span class="token variable">$label</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="startwith" tabindex="-1"><a class="header-anchor" href="#startwith" aria-hidden="true">#</a> startWith</h3><p><code>sql: ... WHERE </code>column<code> LIKE &quot;$input%&quot;</code>：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">startWith</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">,</span> <span class="token variable">$label</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// If you need to use “ilike”</span>
<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">startWith</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">,</span> <span class="token variable">$label</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">ilike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="endwith" tabindex="-1"><a class="header-anchor" href="#endwith" aria-hidden="true">#</a> endWith</h3><p><code>sql: ... WHERE </code>column<code> LIKE &quot;%$input&quot;</code>：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">endWith</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">,</span> <span class="token variable">$label</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// If you need to use “ilike”</span>
<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">endWith</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">,</span> <span class="token variable">$label</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">ilike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="gt" tabindex="-1"><a class="header-anchor" href="#gt" aria-hidden="true">#</a> gt</h3><p><code>sql: ... WHERE </code>column<code> &gt; &quot;$input&quot;</code>：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">,</span> <span class="token variable">$label</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="lt" tabindex="-1"><a class="header-anchor" href="#lt" aria-hidden="true">#</a> lt</h3><p><code>sql: ... WHERE </code>column<code> &lt; &quot;$input&quot;</code>：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">lt</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">,</span> <span class="token variable">$label</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="ngt" tabindex="-1"><a class="header-anchor" href="#ngt" aria-hidden="true">#</a> ngt</h3><p><code>sql: ... WHERE </code>column<code> &lt;= &quot;$input&quot;</code>：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">ngt</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">,</span> <span class="token variable">$label</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="nlt" tabindex="-1"><a class="header-anchor" href="#nlt" aria-hidden="true">#</a> nlt</h3><p><code>sql: ... WHERE </code>column<code> &gt;= &quot;$input&quot;</code>：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">nlt</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">,</span> <span class="token variable">$label</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="between" tabindex="-1"><a class="header-anchor" href="#between" aria-hidden="true">#</a> between</h3><p><code>sql: ... WHERE </code>column<code> BETWEEN &quot;$start&quot; AND &quot;$end&quot;</code>：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">between</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">,</span> <span class="token variable">$label</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Set datetime type</span>
<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">between</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">,</span> <span class="token variable">$label</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">datetime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Set the time type</span>
<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">between</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">,</span> <span class="token variable">$label</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="in" tabindex="-1"><a class="header-anchor" href="#in" aria-hidden="true">#</a> in</h3><p><code>sql: ... WHERE </code>column<code> in (...$inputs)</code>：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">,</span> <span class="token variable">$label</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">multipleSelect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;key&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;value&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="notin" tabindex="-1"><a class="header-anchor" href="#notin" aria-hidden="true">#</a> notIn</h3><p><code>sql: ... WHERE </code>column<code> not in (...$inputs)</code>：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">notIn</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">,</span> <span class="token variable">$label</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">multipleSelect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;key&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;value&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="date" tabindex="-1"><a class="header-anchor" href="#date" aria-hidden="true">#</a> date</h3><p><code>sql: ... WHERE DATE(</code>column<code>) = &quot;$input&quot;</code>：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">,</span> <span class="token variable">$label</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="day" tabindex="-1"><a class="header-anchor" href="#day" aria-hidden="true">#</a> day</h3><p><code>sql: ... WHERE DAY(</code>column<code>) = &quot;$input&quot;</code>：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">day</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">,</span> <span class="token variable">$label</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="month" tabindex="-1"><a class="header-anchor" href="#month" aria-hidden="true">#</a> month</h3><p><code>sql: ... WHERE MONTH(</code>column<code>) = &quot;$input&quot;</code>：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">month</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">,</span> <span class="token variable">$label</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="year" tabindex="-1"><a class="header-anchor" href="#year" aria-hidden="true">#</a> year</h3><p><code>sql: ... WHERE YEAR(</code>column<code>) = &quot;$input&quot;</code>：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">year</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">,</span> <span class="token variable">$label</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="findinset" tabindex="-1"><a class="header-anchor" href="#findinset" aria-hidden="true">#</a> findInSet</h3><p><code>sql: ... WHERE FIND_IN_SET(&quot;$input&quot;, $column)</code>：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">findInSet</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">,</span> <span class="token variable">$label</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="complex-query-where" tabindex="-1"><a class="header-anchor" href="#complex-query-where" aria-hidden="true">#</a> Complex query where</h3><p>You can use WHERE to build more complex query filters.</p><p><code>sql: ... WHERE </code>title<code>LIKE &quot;%$input&quot; OR</code>content<code> LIKE &quot;%$input&quot;</code>：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;search&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;like&#39;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;%<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">input</span><span class="token punctuation">}</span></span>%&quot;</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">orWhere</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;content&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;like&#39;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;%<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">input</span><span class="token punctuation">}</span></span>%&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>sql: ... WHERE </code>rate<code>&gt;= 6 AND</code>created_at<code> = {$input}</code>:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Text&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">whereRaw</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;\`rate\` &gt;= 6 AND \`created_at\` = <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">input</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Relational query for the field corresponding to the relationship <code>profile</code>.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;mobile&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">whereHas</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;profile&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;address&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;like&#39;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;%<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">input</span><span class="token punctuation">}</span></span>%&quot;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">orWhere</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;like&#39;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;%<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">input</span><span class="token punctuation">}</span></span>%&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Address or mobile number&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="complex-range-queries-wherebetween" tabindex="-1"><a class="header-anchor" href="#complex-range-queries-wherebetween" aria-hidden="true">#</a> Complex range queries whereBetween</h3><p>Customizable range queries via <code>whereBetween</code></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">whereBetween</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$q</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token variable">$start</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">input</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;start&#39;</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token constant">null</span><span class="token punctuation">;</span>
	<span class="token variable">$end</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">input</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;end&#39;</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token constant">null</span><span class="token punctuation">;</span>

	<span class="token variable">$q</span><span class="token operator">-&gt;</span><span class="token function">whereHas</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;goods&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$q</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$start</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$start</span> <span class="token operator">!==</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token variable">$q</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;price&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;&gt;=&#39;</span><span class="token punctuation">,</span> <span class="token variable">$start</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		 
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$end</span> <span class="token operator">!==</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token variable">$q</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;price&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;&lt;=&#39;</span><span class="token punctuation">,</span> <span class="token variable">$end</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This method also supports time and date range queries</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">whereBetween</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$q</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">datetime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="filter-group" tabindex="-1"><a class="header-anchor" href="#filter-group" aria-hidden="true">#</a> Filter group</h3><p>Sometimes you need to set multiple filters for the same field, which can be done in the following ways</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;rate&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$group</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$group</span><span class="token operator">-&gt;</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;大于&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$group</span><span class="token operator">-&gt;</span><span class="token function">lt</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;小于&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$group</span><span class="token operator">-&gt;</span><span class="token function">nlt</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;不小于&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$group</span><span class="token operator">-&gt;</span><span class="token function">ngt</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;不大于&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$group</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;等于&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are several methods that can be invoked</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// equal</span>
<span class="token variable">$group</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// not equal to</span>
<span class="token variable">$group</span><span class="token operator">-&gt;</span><span class="token function">notEqual</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// greater than</span>
<span class="token variable">$group</span><span class="token operator">-&gt;</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// less than</span>
<span class="token variable">$group</span><span class="token operator">-&gt;</span><span class="token function">lt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// greater than or equal to</span>
<span class="token variable">$group</span><span class="token operator">-&gt;</span><span class="token function">nlt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// less than equal to</span>
<span class="token variable">$group</span><span class="token operator">-&gt;</span><span class="token function">ngt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// match</span>
<span class="token variable">$group</span><span class="token operator">-&gt;</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// complex condition</span>
<span class="token variable">$group</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// like query</span>
<span class="token variable">$group</span><span class="token operator">-&gt;</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// like query</span>
<span class="token variable">$group</span><span class="token operator">-&gt;</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ilike search</span>
<span class="token variable">$group</span><span class="token operator">-&gt;</span><span class="token function">ilike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Begin with what you have entered</span>
<span class="token variable">$group</span><span class="token operator">-&gt;</span><span class="token function">startWith</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// End with what you have entered</span>
<span class="token variable">$group</span><span class="token operator">-&gt;</span><span class="token function">endWith</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="range-query-scope" tabindex="-1"><a class="header-anchor" href="#range-query-scope" aria-hidden="true">#</a> Range query scope</h3><p>It is possible to define the queries you use most often as a range of queries that will appear in the drop-down menu of the Filter button, here are a few examples:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">scope</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;male&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;男性&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;gender&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;m&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// multi-conditional query</span>
<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">scope</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;new&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Recently changed&#39;</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">whereDate</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">,</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Y-m-d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">orWhere</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;updated_at&#39;</span><span class="token punctuation">,</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Y-m-d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Affiliation Search</span>
<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">scope</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;address&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">whereHas</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;profile&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">whereNotNull</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;address&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">scope</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;trashed&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Soft-deleted data&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">onlyTrashed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The first argument of the scope method is the key of the query, which will appear in the url, the second argument is the label of the drop-down menu item.</p><p>The scope method can be chained to any eloquent query condition, result reference Demo</p><h2 id="type-of-form" tabindex="-1"><a class="header-anchor" href="#type-of-form" aria-hidden="true">#</a> Type of form</h2><h3 id="text" tabindex="-1"><a class="header-anchor" href="#text" aria-hidden="true">#</a> text</h3><p>The default form type is <code>text input</code>, you can set <code>placeholder</code>:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">placeholder</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Please enter...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>It is also possible to restrict the user input format in some of the following ways:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">integer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">ip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">mac</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">mobile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// $options see https://github.com/RobinHerbots/Inputmask/blob/4.x/README_numeric.md</span>
<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">decimal</span><span class="token punctuation">(</span><span class="token variable">$options</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// $options see https://github.com/RobinHerbots/Inputmask/blob/4.x/README_numeric.md</span>
<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">currency</span><span class="token punctuation">(</span><span class="token variable">$options</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// $options see https://github.com/RobinHerbots/Inputmask/blob/4.x/README_numeric.md</span>
<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">percentage</span><span class="token punctuation">(</span><span class="token variable">$options</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// $options see https://github.com/RobinHerbots/Inputmask, $icon为input前面的图标</span>
<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">inputmask</span><span class="token punctuation">(</span><span class="token variable">$options</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$icon</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;pencil&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="table-selector-selecttable" tabindex="-1"><a class="header-anchor" href="#table-selector-selecttable" aria-hidden="true">#</a> Table selector (selectTable)</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Admin<span class="token punctuation">\\</span>Renderable<span class="token punctuation">\\</span>UserTable</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Dcat<span class="token punctuation">\\</span>Admin<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Administrator</span><span class="token punctuation">;</span>

<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;user_id&#39;</span><span class="token punctuation">)</span>
	<span class="token operator">-&gt;</span><span class="token function">selectTable</span><span class="token punctuation">(</span><span class="token class-name static-context">UserTable</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;id&#39;</span> <span class="token operator">=&gt;</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Set the rendering class instance and pass custom parameters</span>
	<span class="token operator">-&gt;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Pop-up window TITLE&#39;</span><span class="token punctuation">)</span>
	<span class="token operator">-&gt;</span><span class="token function">dialogWidth</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;50%&#39;</span><span class="token punctuation">)</span> <span class="token comment">// Popup width, default 800px</span>
	<span class="token operator">-&gt;</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token class-name static-context">Administrator</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Set the display of editing data</span>
	
<span class="token comment">// The code above is equivalent to</span>
<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;user_id&#39;</span><span class="token punctuation">)</span>
	<span class="token operator">-&gt;</span><span class="token function">selectTable</span><span class="token punctuation">(</span><span class="token class-name static-context">UserTable</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;id&#39;</span> <span class="token operator">=&gt;</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Set the rendering class instance and pass custom parameters</span>
	<span class="token operator">-&gt;</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Set the display of editing data</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		
		<span class="token keyword">return</span> <span class="token class-name static-context">Administrator</span><span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">pluck</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Define the rendering class as follows, which needs to inherit <code>Dcat\\Admin\\Grid\\LazyRenderable</code>.</p>`,104),g=a(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Admin<span class="token punctuation">\\</span>Renderable</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Dcat<span class="token punctuation">\\</span>Admin<span class="token punctuation">\\</span>Grid</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Dcat<span class="token punctuation">\\</span>Admin<span class="token punctuation">\\</span>Grid<span class="token punctuation">\\</span>LazyRenderable</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Dcat<span class="token punctuation">\\</span>Admin<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Administrator</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">UserTable</span> <span class="token keyword">extends</span> <span class="token class-name">LazyRenderable</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">grid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Grid</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Getting externally passed parameters</span>
        <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">;</span>
        
        <span class="token keyword">return</span> <span class="token class-name static-context">Grid</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Administrator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Grid</span> <span class="token variable">$grid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$grid</span><span class="token operator">-&gt;</span><span class="token function">column</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$grid</span><span class="token operator">-&gt;</span><span class="token function">column</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;username&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$grid</span><span class="token operator">-&gt;</span><span class="token function">column</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$grid</span><span class="token operator">-&gt;</span><span class="token function">column</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$grid</span><span class="token operator">-&gt;</span><span class="token function">column</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;updated_at&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token comment">// Specify the field name of the value to be displayed when the line selector is selected.</span>
			<span class="token comment">// Specify the field name of the value to be displayed when the line selector is selected.</span>
			<span class="token comment">// Specify the field name of the value to be displayed when the line selector is selected.</span>
			<span class="token comment">// If the form data has a &quot;name&quot;, &quot;title&quot;, or &quot;username&quot; field, you do not have to set this.</span>
			<span class="token variable">$grid</span><span class="token operator">-&gt;</span><span class="token function">rowSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">titleColumn</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;username&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token variable">$grid</span><span class="token operator">-&gt;</span><span class="token function">quickSearch</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;username&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token variable">$grid</span><span class="token operator">-&gt;</span><span class="token function">paginate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$grid</span><span class="token operator">-&gt;</span><span class="token function">disableActions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token variable">$grid</span><span class="token operator">-&gt;</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name class-name-fully-qualified type-declaration">Grid<span class="token punctuation">\\</span>Filter</span> <span class="token variable">$filter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;username&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="multipleselecttable" tabindex="-1"><a class="header-anchor" href="#multipleselecttable" aria-hidden="true">#</a> multipleSelectTable</h4><p>Multi-selected Uses are consistent with the <code>selectTable</code> method above</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;user_id&#39;</span><span class="token punctuation">)</span>
	<span class="token operator">-&gt;</span><span class="token function">multipleSelectTable</span><span class="token punctuation">(</span><span class="token class-name static-context">UserTable</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;id&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$form</span><span class="token operator">-&gt;</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Set the rendering class instance and pass custom parameters</span>
	<span class="token operator">-&gt;</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// Select up to 10 options. If you don&#39;t pass this, there&#39;s no limit.</span>
	<span class="token operator">-&gt;</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token class-name static-context">Administrator</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Set the display of editing data</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="select" tabindex="-1"><a class="header-anchor" href="#select" aria-hidden="true">#</a> select</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;key&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;value&#39;</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Or get data from an api, the format of the api refers to the select component of the model-form</span>
<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;api/users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="multipleselect" tabindex="-1"><a class="header-anchor" href="#multipleselect" aria-hidden="true">#</a> multipleSelect</h3><p>Generally used with <code>in</code> and <code>notIn</code> query types that require an array of queries, but can also be used with <code>where</code> type queries:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">multipleSelect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;key&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;value&#39;</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Or get data from an api, the format of which is referenced in the model-form&#39;s multipleSelect component</span>
<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">multipleSelect</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;api/users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="datetime" tabindex="-1"><a class="header-anchor" href="#datetime" aria-hidden="true">#</a> datetime</h3>`,10),m=s("code",null,"$options",-1),b={href:"http://eonasdan.github.io/bootstrap-datetimepicker/Options/",target:"_blank",rel:"noopener noreferrer"},h=a(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">datetime</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// \`date()\` equal to \`datetime([&#39;format&#39; =&gt; &#39;YYYY-MM-DD&#39;])\`</span>
<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// \`time()\` equal to \`datetime([&#39;format&#39; =&gt; &#39;HH:mm:ss&#39;])\`</span>
<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// \`day()\` equal to \`datetime([&#39;format&#39; =&gt; &#39;DD&#39;])\`</span>
<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">day</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// \`month()\` equal to \`datetime([&#39;format&#39; =&gt; &#39;MM&#39;])\`</span>
<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">month</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// \`year()\` equal to \`datetime([&#39;format&#39; =&gt; &#39;YYYY&#39;])\`</span>
<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">year</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If your time-date field is stored in the database as a timestamp type, you can convert the form value to a timestamp by using the <code>toTimestamp</code> method</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">datetime</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">toTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="common-methods" tabindex="-1"><a class="header-anchor" href="#common-methods" aria-hidden="true">#</a> Common methods</h2><h3 id="filter-width" tabindex="-1"><a class="header-anchor" href="#filter-width" aria-hidden="true">#</a> Filter width</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Set width to a value between &quot;1-12&quot;, default value is &quot;3&quot;.</span>
<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// you can also write out the absolute width</span>
<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;250px&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="set-default-values-default" tabindex="-1"><a class="header-anchor" href="#set-default-values-default" aria-hidden="true">#</a> Set default values (default)</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;PHP&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Java&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="expanding-the-filter-expand" tabindex="-1"><a class="header-anchor" href="#expanding-the-filter-expand" aria-hidden="true">#</a> Expanding the filter (expand)</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">expand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="do-not-display-the-border-of-the-filter-input-box" tabindex="-1"><a class="header-anchor" href="#do-not-display-the-border-of-the-filter-input-box" aria-hidden="true">#</a> Do not display the border of the filter input box</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">withoutInputBorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="set-filter-container-style" tabindex="-1"><a class="header-anchor" href="#set-filter-container-style" aria-hidden="true">#</a> Set filter container style</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">style</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;padding:0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="set-filter-container-padding" tabindex="-1"><a class="header-anchor" href="#set-filter-container-padding" aria-hidden="true">#</a> Set filter container padding</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;10px&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;10px&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;10px&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;10px&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ignore-filter-ignore" tabindex="-1"><a class="header-anchor" href="#ignore-filter-ignore" aria-hidden="true">#</a> ignore filter (ignore)</h3><p>The <code>ignore</code> method allows you to ignore the current filter when submitting the form.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;column&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">ignore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="relational-field-lookup" tabindex="-1"><a class="header-anchor" href="#relational-field-lookup" aria-hidden="true">#</a> Relational field lookup</h2><p>Suppose your model is as follows</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">hasOne</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">myPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">hasMany</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>first_name</code> field of the <code>profiles</code> table and the <code>title</code> field of the <code>posts</code> table can be queried by the following methods</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$grid</span><span class="token operator">-&gt;</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$filter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;profile.first_name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;myPosts.title&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),f={href:"https://github.com/jqhph/laravel-wherehasin",target:"_blank",rel:"noopener noreferrer"},q=s("code",null,"whereHasIn",-1),$=a(`<h2 id="custom-filters" tabindex="-1"><a class="header-anchor" href="#custom-filters" aria-hidden="true">#</a> Custom Filters</h2><p>The following is an implementation of <code>between</code> to explain how to customize the filter.</p><p>First create a new filter class to inherit <code>Dcat\\Admin\\Filter\\AbstractFilter</code>:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">Dcat<span class="token punctuation">\\</span>Admin<span class="token punctuation">\\</span>Grid<span class="token punctuation">\\</span>Filter</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Dcat<span class="token punctuation">\\</span>Admin<span class="token punctuation">\\</span>Admin</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Dcat<span class="token punctuation">\\</span>Admin<span class="token punctuation">\\</span>Grid<span class="token punctuation">\\</span>Filter<span class="token punctuation">\\</span>Presenter<span class="token punctuation">\\</span>DateTime</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Arr</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Between</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractFilter</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Customize your filter display templates</span>
    <span class="token keyword">protected</span> <span class="token variable">$view</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;admin::filter.between&#39;</span><span class="token punctuation">;</span>

    <span class="token comment">// This method is used to generate a unique id for the filter field</span>
    <span class="token comment">// This unique id can be manipulated with js code</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">formatId</span><span class="token punctuation">(</span><span class="token variable">$column</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       <span class="token variable">$id</span>   <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;.&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;_&#39;</span><span class="token punctuation">,</span> <span class="token variable">$column</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">parent</span><span class="token operator">-&gt;</span><span class="token function">getGrid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;start&#39;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$name</span><span class="token punctuation">}</span></span><span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$id</span><span class="token punctuation">}</span></span>_start&quot;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;end&#39;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$name</span><span class="token punctuation">}</span></span><span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$id</span><span class="token punctuation">}</span></span>_end&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Form form name attribute formatting</span>
    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">formatName</span><span class="token punctuation">(</span><span class="token variable">$column</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$columns</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;.&#39;</span><span class="token punctuation">,</span> <span class="token variable">$column</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$columns</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$columns</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">array_shift</span><span class="token punctuation">(</span><span class="token variable">$columns</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$columns</span> <span class="token keyword">as</span> <span class="token variable">$column</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token variable">$name</span> <span class="token operator">.=</span> <span class="token string double-quoted-string">&quot;[<span class="token interpolation"><span class="token variable">$column</span></span>]&quot;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;start&#39;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$name</span><span class="token punctuation">}</span></span>[start]&quot;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;end&#39;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$name</span><span class="token punctuation">}</span></span>[end]&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Create conditions</span>
    <span class="token comment">// The build condition here supports the \`Laravel query builder\`.</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">condition</span><span class="token punctuation">(</span><span class="token variable">$inputs</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name static-context">Arr</span><span class="token operator">::</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token variable">$inputs</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">column</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">value</span> <span class="token operator">=</span> <span class="token class-name static-context">Arr</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$inputs</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">column</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token function">array_filter</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">value</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token variable">$val</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;start&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;end&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// The array returned here is equivalent to</span>
            <span class="token comment">// $query-&gt;where($this-&gt;column, &#39;&lt;=&#39;, $value[&#39;end&#39;]);</span>
            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">buildCondition</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">column</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;&lt;=&#39;</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;end&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;end&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;start&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// The array returned here is equivalent to</span>
            <span class="token comment">// $query-&gt;where($this-&gt;column, &#39;&gt;=&#39;, $value[&#39;end&#39;]);</span>
            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">buildCondition</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">column</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;&gt;=&#39;</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;start&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">query</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;whereBetween&#39;</span><span class="token punctuation">;</span>

        <span class="token comment">// The array returned here is equivalent to</span>
        <span class="token comment">// $query-&gt;whereBetween($this-&gt;column, $value[&#39;end&#39;]);</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">buildCondition</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">column</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Customizing the filter form display</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">datetime</span><span class="token punctuation">(</span><span class="token variable">$options</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">view</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;admin::filter.betweenDatetime&#39;</span><span class="token punctuation">;</span>

        <span class="token class-name static-context">DateTime</span><span class="token operator">::</span><span class="token function">collectAssets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">setupDatetime</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">setupDatetime</span><span class="token punctuation">(</span><span class="token variable">$options</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;format&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name static-context">Arr</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;format&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;YYYY-MM-DD HH:mm:ss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;locale&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name static-context">Arr</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;locale&#39;</span><span class="token punctuation">,</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;app.locale&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$startOptions</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$endOptions</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$options</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;useCurrent&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Do what you want with the form using the formatted id above.</span>
        <span class="token variable">$script</span> <span class="token operator">=</span> <span class="token string heredoc-string"><span class="token delimiter symbol"><span class="token punctuation">&lt;&lt;&lt;</span>JS</span>
            $(&#39;#<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;start&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>&#39;).datetimepicker(<span class="token interpolation"><span class="token variable">$startOptions</span></span>);
            $(&#39;#<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;end&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>&#39;).datetimepicker(<span class="token interpolation"><span class="token variable">$endOptions</span></span>);
            $(&quot;#<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;start&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>&quot;).on(&quot;dp.change&quot;, function (e) {
                $(&#39;#<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;end&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>&#39;).data(&quot;DateTimePicker&quot;).minDate(e.date);
            });
            $(&quot;#<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;end&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>&quot;).on(&quot;dp.change&quot;, function (e) {
                $(&#39;#<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;start&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>&#39;).data(&quot;DateTimePicker&quot;).maxDate(e.date);
            });
<span class="token delimiter symbol">JS<span class="token punctuation">;</span></span></span>

        <span class="token class-name static-context">Admin</span><span class="token operator">::</span><span class="token function">script</span><span class="token punctuation">(</span><span class="token variable">$script</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>admin::filter.between</code> looks like：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;filter-input col-sm-{{ <span class="token interpolation"><span class="token variable">$width</span></span> }} &quot;</span>  style<span class="token operator">=</span><span class="token string double-quoted-string">&quot;{!! <span class="token interpolation"><span class="token variable">$style</span></span> !!}&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;form-group&quot;</span> <span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;input-group input-group-sm&quot;</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;input-group-addon&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>b<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token operator">!</span><span class="token operator">!</span> <span class="token variable">$label</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string double-quoted-string">&quot;text&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;form-control&quot;</span> placeholder<span class="token operator">=</span><span class="token string double-quoted-string">&quot;{<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$label</span><span class="token punctuation">}</span></span>}&quot;</span> name<span class="token operator">=</span><span class="token string double-quoted-string">&quot;{<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$name</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;start&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>}&quot;</span> value<span class="token operator">=</span><span class="token string double-quoted-string">&quot;{{ request(<span class="token interpolation"><span class="token variable">$name</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;start&#39;</span><span class="token punctuation">]</span></span>, \\Illuminate\\Support\\Arr::get(<span class="token interpolation"><span class="token variable">$value</span></span>, &#39;start&#39;)) }}&quot;</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;input-group-addon&quot;</span> style<span class="token operator">=</span><span class="token string double-quoted-string">&quot;border-left: 0; border-right: 0;&quot;</span><span class="token operator">&gt;</span>To<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string double-quoted-string">&quot;text&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;form-control&quot;</span> placeholder<span class="token operator">=</span><span class="token string double-quoted-string">&quot;{<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$label</span><span class="token punctuation">}</span></span>}&quot;</span> name<span class="token operator">=</span><span class="token string double-quoted-string">&quot;{<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$name</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;end&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>}&quot;</span> value<span class="token operator">=</span><span class="token string double-quoted-string">&quot;{{ request(<span class="token interpolation"><span class="token variable">$name</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;end&#39;</span><span class="token punctuation">]</span></span>, \\Illuminate\\Support\\Arr::get(<span class="token interpolation"><span class="token variable">$value</span></span>, &#39;end&#39;)) }}&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>admin::filter.betweenDatetime</code>looks like：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;filter-input col-sm-{{ <span class="token interpolation"><span class="token variable">$width</span></span> }}&quot;</span>  style<span class="token operator">=</span><span class="token string double-quoted-string">&quot;{!! <span class="token interpolation"><span class="token variable">$style</span></span> !!}&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;form-group&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;input-group input-group-sm&quot;</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;input-group-addon&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>b<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token variable">$label</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">&gt;</span>  <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;fa fa-calendar&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string double-quoted-string">&quot;text&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;form-control&quot;</span> id<span class="token operator">=</span><span class="token string double-quoted-string">&quot;{<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$id</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;start&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>}&quot;</span> placeholder<span class="token operator">=</span><span class="token string double-quoted-string">&quot;{<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$label</span><span class="token punctuation">}</span></span>}&quot;</span> name<span class="token operator">=</span><span class="token string double-quoted-string">&quot;{<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$name</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;start&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>}&quot;</span> value<span class="token operator">=</span><span class="token string double-quoted-string">&quot;{{ request(<span class="token interpolation"><span class="token variable">$name</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;start&#39;</span><span class="token punctuation">]</span></span>, \\Illuminate\\Support\\Arr::get(<span class="token interpolation"><span class="token variable">$value</span></span>, &#39;start&#39;)) }}&quot;</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;input-group-addon&quot;</span> style<span class="token operator">=</span><span class="token string double-quoted-string">&quot;border-left: 0; border-right: 0;&quot;</span><span class="token operator">&gt;</span>To<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string double-quoted-string">&quot;text&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;form-control&quot;</span> id<span class="token operator">=</span><span class="token string double-quoted-string">&quot;{<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$id</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;end&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>}&quot;</span> placeholder<span class="token operator">=</span><span class="token string double-quoted-string">&quot;{<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$label</span><span class="token punctuation">}</span></span>}&quot;</span> name<span class="token operator">=</span><span class="token string double-quoted-string">&quot;{<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$name</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;end&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>}&quot;</span> value<span class="token operator">=</span><span class="token string double-quoted-string">&quot;{{ request(<span class="token interpolation"><span class="token variable">$name</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;end&#39;</span><span class="token punctuation">]</span></span>, \\Illuminate\\Support\\Arr::get(<span class="token interpolation"><span class="token variable">$value</span></span>, &#39;end&#39;)) }}&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now just call the <code>extend</code> method to use it, open <code>app/Admin/bootstrap.php</code> and add the following code:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Filter</span><span class="token operator">::</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;customBetween&#39;</span><span class="token punctuation">,</span> <span class="token class-name class-name-fully-qualified static-context">Filter<span class="token punctuation">\\</span>Between</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>use：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$filter</span><span class="token operator">-&gt;</span><span class="token function">customBetween</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">datetime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,12);function y(w,x){const o=p("RouterLink"),e=p("ExternalLinkIcon");return c(),i("div",null,[v,s("blockquote",null,[s("p",null,[n("{tip} The data table is loaded asynchronously here, please refer to "),t(o,{to:"/guide/lazy.html"},{default:u(()=>[n("load asynchronously")]),_:1}),n(" for more details.")])]),g,s("p",null,[n("Search by date time component. Reference for parameters and values of "),m,n(),s("a",b,[n("bootstrap-datetimepicker"),t(e)])]),h,s("p",null,[n("If "),s("a",f,[n("dcat/laravel-wherehasin"),t(e)]),n(" is installed, the "),q,n(" method will be used in preference to queries")]),$])}const A=l(k,[["render",y],["__file","model-grid-filters.html.vue"]]);export{A as default};
